{"ast":null,"code":"import _defineProperty from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var _extraReducers;// import ContractType from \"./contractType\";\nimport*as variable from\"../../variables/Variables\";import JSONPLACEHOLDERApi from\"api/JSONPLACEHOLDERApi\";import{createPostData,convertDateToString,createAccountData,createHeader}from\"util/ContructorCreation\";var _require=require(\"@reduxjs/toolkit\"),createSlice=_require.createSlice,createAsyncThunk=_require.createAsyncThunk;/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */ /**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */export var login=createAsyncThunk(\"login\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return JSONPLACEHOLDERApi.login(params);case 2:result=_context.sent;return _context.abrupt(\"return\",result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());var loginSlice=createSlice({name:\"login\",initialState:{token:\"\",current:{},loading:false,// * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\nsuccess:false,// * trường này dùng để hiển thị pop up success nếu như gọi API thành công\nfail:false,//* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\nerror:\"\",expiresTime:\"\",signInForm:[{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.username,type:variable.text,labeltext:\"User name\",placeholder:\"Username\",value:\"\"},validation:[],valid:{}}]}},{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.password,type:variable.password,labeltext:\"\",placeholder:\"Password\",value:\"\"},validation:[],valid:{}}]}}]},reducers:{logOut:function logOut(state,action){console.log(\"Đã vào logout\");state.token=\"\";localStorage.setItem(\"token\",\"\");}},// ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\nextraReducers:(_extraReducers={},_defineProperty(_extraReducers,login.pending,function(state){}),_defineProperty(_extraReducers,login.rejected,function(state,action){state.token=\"\";}),_defineProperty(_extraReducers,login.fulfilled,function(state,action){console.log(\"actioon: \",action.payload);state.token=action.payload.data.token;state.expiresTime=action.payload.data.expiresTime;localStorage.setItem(\"token\",action.payload.data.token);// variable.token=action.payload.data.token;\n}),_extraReducers)});var loginReducer=loginSlice.reducer,actions=loginSlice.actions;//createSlice sẽ trả về cho ta 2 biến là reducer và action\nvar logOut=actions.logOut;export{logOut};export default loginReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Login/LoginSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","require","createSlice","createAsyncThunk","login","params","thunkAPI","result","loginSlice","name","initialState","token","current","loading","success","fail","error","expiresTime","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","logOut","state","action","console","log","localStorage","setItem","extraReducers","pending","rejected","fulfilled","payload","data","loginReducer","reducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const login = createAsyncThunk(\"login\", async (params, thunkAPI) => {\r\n  const result = await JSONPLACEHOLDERApi.login(params);\r\n  return result;\r\n});\r\n\r\nconst loginSlice= createSlice({\r\n  name: \"login\",\r\n  initialState: {\r\n    token: \"\",\r\n    current: {},\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    expiresTime:\"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    logOut: (state, action) => {\r\n      console.log(\"Đã vào logout\")\r\n      state.token = \"\";\r\n      localStorage.setItem(\"token\",\"\")\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [login.pending]: (state) => {},\r\n    [login.rejected]: (state, action) => {\r\n      state.token = \"\";\r\n    },\r\n    [login.fulfilled]: (state, action) => {\r\n      console.log(\"actioon: \", action.payload);\r\n      state.token = action.payload.data.token;\r\n      state.expiresTime=action.payload.data.expiresTime;\r\n      localStorage.setItem(\"token\",action.payload.data.token)\r\n      // variable.token=action.payload.data.token;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: loginReducer, actions } = loginSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const {logOut} = actions;\r\nexport default loginReducer;\r\n"]},"metadata":{},"sourceType":"module"}