{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\layouts\\\\Admin.jsx\";\n\n/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport imageSide from \"assets/img/garden.jpg\";\nimport Footer from \"components/Footer/Footer\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport React, { useRef, useState } from \"react\";\nimport NotificationSystem from \"react-notification-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { addObject } from \"redux/index\";\nimport { getFirebase } from \"redux/Selector/Selectors\";\nimport routes from \"routes.js\";\nimport firebase from \"util/firebase\";\nimport { style } from \"variables/Variables.jsx\";\n\nconst Admin = props => {\n  const [image, setImage] = useState(imageSide);\n  const [color, setColor] = useState(\"black\");\n  const [hasImage, setHasImage] = useState(true);\n  const [isNotify, setIsNotify] = useState(0); // ! cái này dùng để ngăn cho việc notification nổ lần đầu tiên khi hàng của store đc thêm vào lần đầu tiên\n\n  const [fixedClasses, setFixedClasses] = useState(\"dropdown show-dropdown open\");\n  let history = useHistory();\n  let location = useLocation();\n  const mainPanel = useRef();\n  const notify = useRef();\n  const dataInFirebase = useSelector(state => getFirebase(state));\n  const dispatch = useDispatch(); //! Hàm này có tác dụng là tạo ra một notification, ta sẽ dùng hàm này cứ mỗi khi firebase bắt\n  //! sự kiện\n\n  const addNotify = () => {\n    var color = Math.floor(Math.random() * 4 + 1);\n    var level;\n    const notification = notify.current;\n\n    switch (color) {\n      case 1:\n        level = \"success\";\n        break;\n\n      case 2:\n        level = \"warning\";\n        break;\n\n      case 3:\n        level = \"error\";\n        break;\n\n      case 4:\n        level = \"info\";\n        break;\n\n      default:\n        break;\n    }\n\n    notification.addNotification({\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        \"data-notify\": \"icon\",\n        className: \"pe-7s-gift\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 14\n        }\n      }),\n      message: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, \"Welcome to \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 22\n        }\n      }, \"Light Bootstrap Dashboard\"), \" - a beautiful freebie for every web developer.\"),\n      level: level,\n      position: \"tr\",\n      autoDismiss: 15\n    });\n  }; // handleNotificationClick = (position) => {\n  //   var color = Math.floor(Math.random() * 4 + 1);\n  //   var level;\n  //   switch (color) {\n  //     case 1:\n  //       level = \"success\";\n  //       break;\n  //     case 2:\n  //       level = \"warning\";\n  //       break;\n  //     case 3:\n  //       level = \"error\";\n  //       break;\n  //     case 4:\n  //       level = \"info\";\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   this.state._notificationSystem.addNotification({\n  //     title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n  //     message: (\n  //       <div>\n  //         Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n  //         every web developer.\n  //       </div>\n  //     ),\n  //     level: level,\n  //     position: position,\n  //     autoDismiss: 15,\n  //   });\n  // };\n\n\n  const getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: prop.layout + prop.path,\n          render: props => /*#__PURE__*/React.createElement(prop.component, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }\n          })),\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }\n        });\n      } else {\n        return null;\n      }\n    });\n  };\n\n  const getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (props.location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\n        return routes[i].name;\n      }\n    }\n\n    return \"Brand\";\n  };\n\n  const handleImageClick = image => {\n    setImage(image);\n  };\n\n  const handleColorClick = color => {\n    setColor(color);\n  };\n\n  const handleHasImage = hasImage => {\n    setHasImage(hasImage);\n  };\n\n  const handleFixedClick = () => {\n    if (fixedClasses === \"dropdown\") {\n      setFixedClasses(\"dropdown show-dropdown open\");\n    } else {\n      setFixedClasses(\"dropdown\");\n    }\n  }; // * cho này để lắng nghe firebase DB realtime, ta ko dùng nữa\n\n\n  React.useEffect(() => {\n    // console.log(\"arrr= \", dataInFirebase.firebaseData);\n    // firebaseListening();\n    // return () => {\n    //   removeFirebaseListening();\n    // };\n    // const messaging = firebase.messaging();\n    // messaging.onMessage((payload) => {\n    //   console.log(\"Message received. \", payload);\n    // });\n    const messaging = firebase.messaging(); // [START messaging_get_token]\n    // Get registration token. Initially this makes a network call, once retrieved\n    // subsequent calls to getToken will return from cache.\n\n    messaging.getToken({\n      vapidKey: \"<YOUR_PUBLIC_VAPID_KEY_HERE>\"\n    }).then(currentToken => {\n      if (currentToken) {\n        // Send the token to your server and update the UI if necessary\n        // ...\n        console.log(\"Message received. \", token);\n      } else {\n        // Show permission request UI\n        console.log(\"No registration token available. Request permission to generate one.\"); // ...\n      }\n    }).catch(err => {\n      console.log(\"An error occurred while retrieving token. \", err); // ...\n    }); // [END messaging_get_token]\n  }, []);\n  React.useEffect(() => {\n    //! setIsNotify dùng để ngăn cho ko hiện notification khi lần đầu event listener đc nổ\n    setIsNotify(isNotify + 1); //! đây là đk để nổi notification =_\n\n    if (dataInFirebase.firebaseData.length != 0 && isNotify >= 2) {\n      addNotify();\n    }\n    /**\n     * * Sẽ có thêm phần chức năng là hiển thị số post cần phải duyệt,\n     * * mỗi post sẽ có trạng thái là duyệt và chưa duyệt, những cái chưa duyệt sẽ đc đưa vào list chưa duyệt và hiển thị\n     * * số sẽ trừ dần mỗi khi duyệt xong và bài post cũng sẽ biến mất hoàn toàn khỏi list hiển thị\n     */\n\n  }, [dataInFirebase]);\n  React.useEffect(() => {\n    if (window.innerWidth < 993 && history.location.pathname !== location.pathname && document.documentElement.className.indexOf(\"nav-open\") !== -1) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    }\n\n    if (history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      mainPanel.scrollTop = 0;\n    }\n  }, []); // ! Lắng nghe sự thay đổi của database trên firebase\n\n  const firebaseListening = params => {// var userCount = firebase.database().ref(\"users\");\n    // userCount.on(\"value\", (snapshot) => {\n    //   let newArr = [];\n    //   // ? Vì snapshot sẽ chỉ trả về các obj nên ta muốn nó thành 1 array ta phải làm bằng tay, chi tiết thế nào thì coi trong quick note\n    //   snapshot.forEach((child) => {\n    //     //chỉ bỏ những node child nào có status là no, tức là chưa đc duyệt\n    //     if (child.val()[\"status\"] == \"not\") {\n    //       newArr.push({ ...child.val(), userId: child.key });\n    //     }\n    //   });\n    //   dispatch(addObject(newArr));\n    // });\n  }; //! bỏ lắng nghe khi cái component này unmount\n\n\n  function removeFirebaseListening(params) {// firebase.database().ref(\"user\").off(\"value\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NotificationSystem, {\n    ref: notify,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sidebar, Object.assign({}, props, {\n    routes: routes,\n    image: image,\n    color: color,\n    hasImage: hasImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"main-panel\",\n    className: \"main-panel\",\n    ref: mainPanel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AdminNavbar, Object.assign({}, props, {\n    brandText: getBrandText(props.location.pathname),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, getRoutes(routes)), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Admin;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/layouts/Admin.jsx"],"names":["imageSide","Footer","AdminNavbar","Sidebar","React","useRef","useState","NotificationSystem","useDispatch","useSelector","Route","Switch","useHistory","useLocation","addObject","getFirebase","routes","firebase","style","Admin","props","image","setImage","color","setColor","hasImage","setHasImage","isNotify","setIsNotify","fixedClasses","setFixedClasses","history","location","mainPanel","notify","dataInFirebase","state","dispatch","addNotify","Math","floor","random","level","notification","current","addNotification","title","message","position","autoDismiss","getRoutes","map","prop","key","layout","path","getBrandText","i","length","pathname","indexOf","name","handleImageClick","handleColorClick","handleHasImage","handleFixedClick","useEffect","messaging","getToken","vapidKey","then","currentToken","console","log","token","catch","err","firebaseData","window","innerWidth","document","documentElement","className","classList","toggle","action","scrollTop","scrollingElement","firebaseListening","params","removeFirebaseListening"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport imageSide from \"assets/img/garden.jpg\";\nimport Footer from \"components/Footer/Footer\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport React, { useRef, useState } from \"react\";\nimport NotificationSystem from \"react-notification-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { addObject } from \"redux/index\";\nimport { getFirebase } from \"redux/Selector/Selectors\";\nimport routes from \"routes.js\";\nimport firebase from \"util/firebase\";\nimport { style } from \"variables/Variables.jsx\";\n\nconst Admin = (props) => {\n  const [image, setImage] = useState(imageSide);\n  const [color, setColor] = useState(\"black\");\n  const [hasImage, setHasImage] = useState(true);\n  const [isNotify, setIsNotify] = useState(0); // ! cái này dùng để ngăn cho việc notification nổ lần đầu tiên khi hàng của store đc thêm vào lần đầu tiên\n  const [fixedClasses, setFixedClasses] = useState(\n    \"dropdown show-dropdown open\"\n  );\n  let history = useHistory();\n  let location = useLocation();\n  const mainPanel = useRef();\n  const notify = useRef();\n  const dataInFirebase = useSelector((state) => getFirebase(state));\n  const dispatch = useDispatch();\n\n  //! Hàm này có tác dụng là tạo ra một notification, ta sẽ dùng hàm này cứ mỗi khi firebase bắt\n  //! sự kiện\n  const addNotify = () => {\n    var color = Math.floor(Math.random() * 4 + 1);\n    var level;\n    const notification = notify.current;\n    switch (color) {\n      case 1:\n        level = \"success\";\n        break;\n      case 2:\n        level = \"warning\";\n        break;\n      case 3:\n        level = \"error\";\n        break;\n      case 4:\n        level = \"info\";\n        break;\n      default:\n        break;\n    }\n    notification.addNotification({\n      title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n      message: (\n        <div>\n          Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n          every web developer.\n        </div>\n      ),\n      level: level,\n      position: \"tr\",\n      autoDismiss: 15,\n    });\n  };\n\n  // handleNotificationClick = (position) => {\n  //   var color = Math.floor(Math.random() * 4 + 1);\n  //   var level;\n  //   switch (color) {\n  //     case 1:\n  //       level = \"success\";\n  //       break;\n  //     case 2:\n  //       level = \"warning\";\n  //       break;\n  //     case 3:\n  //       level = \"error\";\n  //       break;\n  //     case 4:\n  //       level = \"info\";\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   this.state._notificationSystem.addNotification({\n  //     title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n  //     message: (\n  //       <div>\n  //         Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n  //         every web developer.\n  //       </div>\n  //     ),\n  //     level: level,\n  //     position: position,\n  //     autoDismiss: 15,\n  //   });\n  // };\n  const getRoutes = (routes) => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            render={(props) => (\n              <prop.component\n                {...props}\n                // handleClick={handleNotificationClick}\n              />\n            )}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  const getBrandText = (path) => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        props.location.pathname.indexOf(routes[i].layout + routes[i].path) !==\n        -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n  const handleImageClick = (image) => {\n    setImage(image);\n  };\n  const handleColorClick = (color) => {\n    setColor(color);\n  };\n  const handleHasImage = (hasImage) => {\n    setHasImage(hasImage);\n  };\n  const handleFixedClick = () => {\n    if (fixedClasses === \"dropdown\") {\n      setFixedClasses(\"dropdown show-dropdown open\");\n    } else {\n      setFixedClasses(\"dropdown\");\n    }\n  };\n\n  // * cho này để lắng nghe firebase DB realtime, ta ko dùng nữa\n  React.useEffect(() => {\n    // console.log(\"arrr= \", dataInFirebase.firebaseData);\n    // firebaseListening();\n    // return () => {\n    //   removeFirebaseListening();\n    // };\n    // const messaging = firebase.messaging();\n    // messaging.onMessage((payload) => {\n    //   console.log(\"Message received. \", payload);\n    // });\n\n    const messaging = firebase.messaging();\n    // [START messaging_get_token]\n    // Get registration token. Initially this makes a network call, once retrieved\n    // subsequent calls to getToken will return from cache.\n    messaging\n      .getToken({ vapidKey: \"<YOUR_PUBLIC_VAPID_KEY_HERE>\" })\n      .then((currentToken) => {\n        if (currentToken) {\n          // Send the token to your server and update the UI if necessary\n          // ...\n          console.log(\"Message received. \", token);\n        } else {\n          // Show permission request UI\n          console.log(\n            \"No registration token available. Request permission to generate one.\"\n          );\n          // ...\n        }\n      })\n      .catch((err) => {\n        console.log(\"An error occurred while retrieving token. \", err);\n        // ...\n      });\n    // [END messaging_get_token]\n  }, []);\n\n  React.useEffect(() => {\n    //! setIsNotify dùng để ngăn cho ko hiện notification khi lần đầu event listener đc nổ\n    setIsNotify(isNotify + 1);\n\n    //! đây là đk để nổi notification =_\n    if (dataInFirebase.firebaseData.length != 0 && isNotify >= 2) {\n      addNotify();\n    }\n\n    /**\n     * * Sẽ có thêm phần chức năng là hiển thị số post cần phải duyệt,\n     * * mỗi post sẽ có trạng thái là duyệt và chưa duyệt, những cái chưa duyệt sẽ đc đưa vào list chưa duyệt và hiển thị\n     * * số sẽ trừ dần mỗi khi duyệt xong và bài post cũng sẽ biến mất hoàn toàn khỏi list hiển thị\n     */\n  }, [dataInFirebase]);\n\n  React.useEffect(() => {\n    if (\n      window.innerWidth < 993 &&\n      history.location.pathname !== location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    }\n    if (history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      mainPanel.scrollTop = 0;\n    }\n  }, []);\n\n  // ! Lắng nghe sự thay đổi của database trên firebase\n  const firebaseListening = (params) => {\n    // var userCount = firebase.database().ref(\"users\");\n    // userCount.on(\"value\", (snapshot) => {\n    //   let newArr = [];\n    //   // ? Vì snapshot sẽ chỉ trả về các obj nên ta muốn nó thành 1 array ta phải làm bằng tay, chi tiết thế nào thì coi trong quick note\n    //   snapshot.forEach((child) => {\n    //     //chỉ bỏ những node child nào có status là no, tức là chưa đc duyệt\n    //     if (child.val()[\"status\"] == \"not\") {\n    //       newArr.push({ ...child.val(), userId: child.key });\n    //     }\n    //   });\n    //   dispatch(addObject(newArr));\n    // });\n  };\n\n  //! bỏ lắng nghe khi cái component này unmount\n  function removeFirebaseListening(params) {\n    // firebase.database().ref(\"user\").off(\"value\");\n  }\n  return (\n    <div className=\"wrapper\">\n      <NotificationSystem ref={notify} style={style} />\n      <Sidebar\n        {...props}\n        routes={routes}\n        image={image}\n        color={color}\n        hasImage={hasImage}\n      />\n      <div id=\"main-panel\" className=\"main-panel\" ref={mainPanel}>\n        <AdminNavbar\n          {...props}\n          brandText={getBrandText(props.location.pathname)}\n        />\n        <Switch>{getRoutes(routes)}</Switch>\n        <Footer />\n      </div>\n    </div>\n  );\n};\nexport default Admin;\n"]},"metadata":{},"sourceType":"module"}