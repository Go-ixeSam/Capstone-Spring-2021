{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { createPostData, convertDateToString, createAccountData, createHeader } from \"util/ContructorCreation\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n\n\nexport const login = createAsyncThunk(\"login\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.login(params);\n  return result;\n});\nconst loginSlice = createSlice({\n  name: \"login\",\n  initialState: {\n    token: \"\",\n    notificationCount: 0,\n    current: {},\n    loading: false,\n    // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\n    success: false,\n    // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\n    fail: false,\n    //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\n    error: \"\",\n    expiresTime: \"\",\n    signInForm: [{\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.username,\n            type: variable.text,\n            labeltext: \"User name\",\n            placeholder: \"Username\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }, {\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.password,\n            type: variable.password,\n            labeltext: \"\",\n            placeholder: \"Password\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }]\n  },\n  reducers: {\n    logOut: (state, action) => {\n      console.log(\"Đã vào logout\");\n      state.token = \"\";\n      localStorage.setItem(\"token\", \"\");\n    },\n    //! 2 hàm dưới dùng để cho người dùng biết có bao nhiêu notfication đã đến và đã đc xử lí xong\n    increaseNotificationCount: (state, action) => {\n      state.notificationCount = state.notificationCount + 1;\n    },\n    decreaseNotificationCount: (state, action) => {\n      state.notificationCount = state.notificationCount - action.payload;\n    },\n    setNotificationCount: (state, action) => {\n      state.notificationCount = action.payload;\n    }\n  },\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\n  extraReducers: {\n    [login.pending]: state => {},\n    [login.rejected]: (state, action) => {\n      state.token = \"\";\n    },\n    [login.fulfilled]: (state, action) => {\n      console.log(\"actioon: \", action.payload);\n      state.token = action.payload.data.token;\n      state.expiresTime = action.payload.data.expiresTime;\n      localStorage.setItem(\"token\", action.payload.data.token); // variable.token=action.payload.data.token;\n    }\n  }\n});\nconst {\n  reducer: loginReducer,\n  actions\n} = loginSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {\n  logOut,\n  increaseNotificationCount,\n  decreaseNotificationCount,\n  setNotificationCount\n} = actions;\nexport default loginReducer;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/redux/Login/LoginSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","createSlice","createAsyncThunk","require","login","params","thunkAPI","result","loginSlice","name","initialState","token","notificationCount","current","loading","success","fail","error","expiresTime","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","logOut","state","action","console","log","localStorage","setItem","increaseNotificationCount","decreaseNotificationCount","payload","setNotificationCount","extraReducers","pending","rejected","fulfilled","data","reducer","loginReducer","actions"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAZ,MAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,YAJF,QAKO,yBALP;;AAMA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;AAEA;;;;;;AAMA;;;;;;;AAKA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,CAAC,OAAD,EAAU,OAAOG,MAAP,EAAeC,QAAf,KAA4B;AACzE,QAAMC,MAAM,GAAG,MAAMX,kBAAkB,CAACQ,KAAnB,CAAyBC,MAAzB,CAArB;AACA,SAAOE,MAAP;AACD,CAHoC,CAA9B;AAKP,MAAMC,UAAU,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,iBAAiB,EAAE,CAFP;AAGZC,IAAAA,OAAO,EAAE,EAHG;AAIZC,IAAAA,OAAO,EAAE,KAJG;AAII;AAChBC,IAAAA,OAAO,EAAE,KALG;AAKI;AAChBC,IAAAA,IAAI,EAAE,KANM;AAMC;AACbC,IAAAA,KAAK,EAAE,EAPK;AAQZC,IAAAA,WAAW,EAAE,EARD;AASZC,IAAAA,UAAU,EAAE,CACV;AACEC,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,WAAW,EAAE3B,QAAQ,CAAC4B,KADxB;AAEEC,UAAAA,aAAa,EAAE;AACbf,YAAAA,IAAI,EAAEd,QAAQ,CAAC8B,QADF;AAEbC,YAAAA,IAAI,EAAE/B,QAAQ,CAACgC,IAFF;AAGbC,YAAAA,SAAS,EAAE,WAHE;AAIbC,YAAAA,WAAW,EAAE,UAJA;AAKbC,YAAAA,KAAK,EAAE;AALM,WAFjB;AASEC,UAAAA,UAAU,EAAE,EATd;AAUEC,UAAAA,KAAK,EAAE;AAVT,SADI;AADH;AADP,KADU,EAmBV;AACEZ,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,WAAW,EAAE3B,QAAQ,CAAC4B,KADxB;AAEEC,UAAAA,aAAa,EAAE;AACbf,YAAAA,IAAI,EAAEd,QAAQ,CAACsC,QADF;AAEbP,YAAAA,IAAI,EAAE/B,QAAQ,CAACsC,QAFF;AAGbL,YAAAA,SAAS,EAAE,EAHE;AAIbC,YAAAA,WAAW,EAAE,UAJA;AAKbC,YAAAA,KAAK,EAAE;AALM,WAFjB;AASEC,UAAAA,UAAU,EAAE,EATd;AAUEC,UAAAA,KAAK,EAAE;AAVT,SADI;AADH;AADP,KAnBU;AATA,GAFe;AAkD7BE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAH,MAAAA,KAAK,CAACzB,KAAN,GAAc,EAAd;AACA6B,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,EAA9B;AACD,KALO;AAOR;AACAC,IAAAA,yBAAyB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACxB,iBAAN,GAA0BwB,KAAK,CAACxB,iBAAN,GAA0B,CAApD;AACD,KAVO;AAWR+B,IAAAA,yBAAyB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACxB,iBAAN,GAA0BwB,KAAK,CAACxB,iBAAN,GAA0ByB,MAAM,CAACO,OAA3D;AACD,KAbO;AAcRC,IAAAA,oBAAoB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACxB,iBAAN,GAA0ByB,MAAM,CAACO,OAAjC;AACD;AAhBO,GAlDmB;AAqE7B;AACAE,EAAAA,aAAa,EAAE;AACb,KAAC1C,KAAK,CAAC2C,OAAP,GAAkBX,KAAD,IAAW,CAAE,CADjB;AAEb,KAAChC,KAAK,CAAC4C,QAAP,GAAkB,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACzB,KAAN,GAAc,EAAd;AACD,KAJY;AAKb,KAACP,KAAK,CAAC6C,SAAP,GAAmB,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAM,CAACO,OAAhC;AACAR,MAAAA,KAAK,CAACzB,KAAN,GAAc0B,MAAM,CAACO,OAAP,CAAeM,IAAf,CAAoBvC,KAAlC;AACAyB,MAAAA,KAAK,CAAClB,WAAN,GAAoBmB,MAAM,CAACO,OAAP,CAAeM,IAAf,CAAoBhC,WAAxC;AACAsB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,MAAM,CAACO,OAAP,CAAeM,IAAf,CAAoBvC,KAAlD,EAJoC,CAKpC;AACD;AAXY;AAtEc,CAAD,CAA9B;AAqFA,MAAM;AAAEwC,EAAAA,OAAO,EAAEC,YAAX;AAAyBC,EAAAA;AAAzB,IAAqC7C,UAA3C,C,CAAuD;;AACvD,OAAO,MAAM;AACX2B,EAAAA,MADW;AAEXO,EAAAA,yBAFW;AAGXC,EAAAA,yBAHW;AAIXE,EAAAA;AAJW,IAKTQ,OALG;AAMP,eAAeD,YAAf","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const login = createAsyncThunk(\"login\", async (params, thunkAPI) => {\r\n  const result = await JSONPLACEHOLDERApi.login(params);\r\n  return result;\r\n});\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState: {\r\n    token: \"\",\r\n    notificationCount: 0,\r\n    current: {},\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    expiresTime: \"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    logOut: (state, action) => {\r\n      console.log(\"Đã vào logout\");\r\n      state.token = \"\";\r\n      localStorage.setItem(\"token\", \"\");\r\n    },\r\n\r\n    //! 2 hàm dưới dùng để cho người dùng biết có bao nhiêu notfication đã đến và đã đc xử lí xong\r\n    increaseNotificationCount: (state, action) => {\r\n      state.notificationCount = state.notificationCount + 1;\r\n    },\r\n    decreaseNotificationCount: (state, action) => {\r\n      state.notificationCount = state.notificationCount - action.payload;\r\n    },\r\n    setNotificationCount: (state, action) => {\r\n      state.notificationCount = action.payload;\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [login.pending]: (state) => {},\r\n    [login.rejected]: (state, action) => {\r\n      state.token = \"\";\r\n    },\r\n    [login.fulfilled]: (state, action) => {\r\n      console.log(\"actioon: \", action.payload);\r\n      state.token = action.payload.data.token;\r\n      state.expiresTime = action.payload.data.expiresTime;\r\n      localStorage.setItem(\"token\", action.payload.data.token);\r\n      // variable.token=action.payload.data.token;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: loginReducer, actions } = loginSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const {\r\n  logOut,\r\n  increaseNotificationCount,\r\n  decreaseNotificationCount,\r\n  setNotificationCount,\r\n} = actions;\r\nexport default loginReducer;\r\n"]},"metadata":{},"sourceType":"module"}