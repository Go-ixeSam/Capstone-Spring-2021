{"ast":null,"code":"import _defineProperty from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var _extraReducers;// import ContractType from \"./contractType\";\nimport*as variable from\"../../variables/Variables\";import JSONPLACEHOLDERApi from\"api/JSONPLACEHOLDERApi\";import{createPostData,convertDateToString,createAccountData,createHeader}from\"util/ContructorCreation\";var _require=require(\"@reduxjs/toolkit\"),createSlice=_require.createSlice,createAsyncThunk=_require.createAsyncThunk;/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */ /**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */export var getALL=createAsyncThunk(\"account/getFakeAPI\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return JSONPLACEHOLDERApi.getAll(null);case 2:result=_context.sent;return _context.abrupt(\"return\",result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());/**\r\n * * api trả về thông tin của cây dựa trên tên\r\n */export var getPlantInfo=createAsyncThunk(\"account/getPlantInfo\",/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return JSONPLACEHOLDERApi.getPlantInfo(params);case 2:result=_context2.sent;return _context2.abrupt(\"return\",result);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}());var account=createSlice({name:\"account\",initialState:{accountData:[//  createAccountData(1,\"alive\",\"Khá bảnh\",\"samxxx@gmail.com\",\"08/17/1998\",\"Nam\",\"02/23/2021\",\"08081501\"),\n//  createAccountData(2,\"dead\",\"Khong bảnh lắm\",\"samxxx@gmail.com\",\"02/17/1990\",\"Nam\",\"02/23/2021\",\"08081501\"),\n//  createAccountData(3,\"alive\",\"Okiem \",\"samxxx@gmail.com\",\"01/17/1991\",\"Nữ\",\"02/23/2021\",\"08081501\"),\ncreateAccountData(1,\"alive\",\"Khá bảnh\",\"02/23/2021\"),createAccountData(2,\"dead\",\"Khong bảnh lắm\",\"02/23/2021\"),createAccountData(3,\"alive\",\"Okiem \",\"02/23/2021\")],accountTableHeader:[createHeader(\"Người dùng\",false,true,variable.userName),createHeader(\"Ngày tạo\",false,true,variable.createDate),createHeader(\"Trạng thái\",false,true,variable.accoutStatus),createHeader(\"ID\",true,false,variable.id)// {\n//   id: \"email\",\n//   numeric: true,\n//   disablePadding: false,\n//   label: [variable.email],\n// },\n// {\n//   id: \"birthdate\",\n//   numeric: true,\n//   disablePadding: false,\n//   label: [variable.birthDate],\n// },\n// {\n//   id: \"sex\",\n//   numeric: true,\n//   disablePadding: false,\n//   label: [variable.sex],\n// },\n// {\n//   id: \"phone\",\n//   numeric: true,\n//   disablePadding: false,\n//   label: [variable.phone],\n// },\n],current:{},loading:false,// * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\nsuccess:false,// * trường này dùng để hiển thị pop up success nếu như gọi API thành công\nfail:false,//* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\nerror:\"\",signInForm:[{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.username,type:variable.text,labeltext:\"User name\",placeholder:\"Username\",value:\"\"},validation:[],valid:{}}]}},{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.password,type:variable.password,labeltext:\"\",placeholder:\"Password\",value:\"\"},validation:[],valid:{}}]}}]},reducers:{addContract:function addContract(state,action){/**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */state.contracts.record.push(action.payload);},modifyContract:function modifyContract(state,action){state.contracts.record=action.payload;},ModifyContractFomr:function ModifyContractFomr(state,action){state.contractForm=action.payload;}},// ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\nextraReducers:(_extraReducers={},_defineProperty(_extraReducers,getALL.pending,function(state){state.loading=true;state.success=false;state.fail=false;}),_defineProperty(_extraReducers,getALL.rejected,function(state,action){// * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\nstate.error=action.error;state.loading=false;state.success=true;state.fail=false;state.current=action.payload;}),_defineProperty(_extraReducers,getALL.fulfilled,function(state,action){// * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\nstate.loading=false;state.success=true;state.fail=false;state.current=action.payload;}),_defineProperty(_extraReducers,getPlantInfo.pending,function(state){}),_defineProperty(_extraReducers,getPlantInfo.rejected,function(state,action){}),_defineProperty(_extraReducers,getPlantInfo.fulfilled,function(state,action){}),_extraReducers)});var accountReducer=account.reducer,actions=account.actions;//createSlice sẽ trả về cho ta 2 biến là reducer và action\nvar addContract=actions.addContract,modifyContract=actions.modifyContract,ModifyContractFomr=actions.ModifyContractFomr;export{addContract,modifyContract,ModifyContractFomr};export default accountReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Account/AccountSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","require","createSlice","createAsyncThunk","getALL","params","thunkAPI","getAll","result","getPlantInfo","account","name","initialState","accountData","accountTableHeader","userName","createDate","accoutStatus","id","current","loading","success","fail","error","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","addContract","state","action","contracts","record","push","payload","modifyContract","ModifyContractFomr","contractForm","extraReducers","pending","rejected","fulfilled","accountReducer","reducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const getALL = createAsyncThunk(\r\n  \"account/getFakeAPI\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getAll(null);\r\n    return result;\r\n  }\r\n);\r\n\r\n/**\r\n * * api trả về thông tin của cây dựa trên tên\r\n */\r\nexport const getPlantInfo = createAsyncThunk(\r\n  \"account/getPlantInfo\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getPlantInfo(params);\r\n    return result;\r\n  }\r\n);\r\n\r\nconst account = createSlice({\r\n  name: \"account\",\r\n  initialState: {\r\n    accountData: [\r\n      //  createAccountData(1,\"alive\",\"Khá bảnh\",\"samxxx@gmail.com\",\"08/17/1998\",\"Nam\",\"02/23/2021\",\"08081501\"),\r\n      //  createAccountData(2,\"dead\",\"Khong bảnh lắm\",\"samxxx@gmail.com\",\"02/17/1990\",\"Nam\",\"02/23/2021\",\"08081501\"),\r\n      //  createAccountData(3,\"alive\",\"Okiem \",\"samxxx@gmail.com\",\"01/17/1991\",\"Nữ\",\"02/23/2021\",\"08081501\"),\r\n      createAccountData(1, \"alive\", \"Khá bảnh\", \"02/23/2021\"),\r\n      createAccountData(2, \"dead\", \"Khong bảnh lắm\", \"02/23/2021\"),\r\n      createAccountData(3, \"alive\", \"Okiem \", \"02/23/2021\"),\r\n      \r\n    ],\r\n    accountTableHeader: [\r\n      createHeader(\"Người dùng\", false, true, variable.userName),\r\n      createHeader(\"Ngày tạo\", false, true, variable.createDate),\r\n      createHeader(\"Trạng thái\", false, true, variable.accoutStatus),\r\n      createHeader(\"ID\", true, false, variable.id),\r\n      // {\r\n      //   id: \"email\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.email],\r\n      // },\r\n      // {\r\n      //   id: \"birthdate\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.birthDate],\r\n      // },\r\n      // {\r\n      //   id: \"sex\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.sex],\r\n      // },\r\n\r\n      // {\r\n      //   id: \"phone\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.phone],\r\n      // },\r\n    ],\r\n    current: {},\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    addContract: (state, action) => {\r\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\r\n      state.contracts.record.push(action.payload);\r\n    },\r\n    modifyContract: (state, action) => {\r\n      state.contracts.record = action.payload;\r\n    },\r\n    ModifyContractFomr: (state, action) => {\r\n      state.contractForm = action.payload;\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getALL.pending]: (state) => {\r\n      state.loading = true;\r\n      state.success = false;\r\n      state.fail = false;\r\n    },\r\n    [getALL.rejected]: (state, action) => {\r\n      // * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\r\n      state.error = action.error;\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.fail = false;\r\n      state.current = action.payload;\r\n    },\r\n    [getALL.fulfilled]: (state, action) => {\r\n      // * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.fail = false;\r\n      state.current = action.payload;\r\n    },\r\n    [getPlantInfo.pending]: (state) => {},\r\n    [getPlantInfo.rejected]: (state, action) => {},\r\n    [getPlantInfo.fulfilled]: (state, action) => {},\r\n  },\r\n});\r\n\r\nconst { reducer: accountReducer, actions } = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addContract, modifyContract, ModifyContractFomr } = actions;\r\nexport default accountReducer;\r\n"]},"metadata":{},"sourceType":"module"}