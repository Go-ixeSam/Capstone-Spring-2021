{"ast":null,"code":"import _defineProperty from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var _extraReducers;// import ContractType from \"./contractType\";\nimport*as variable from\"../../variables/Variables\";import JSONPLACEHOLDERApi from\"api/JSONPLACEHOLDERApi\";import{createPostData,convertDateToString,createAccountData,createHeader}from\"util/ContructorCreation\";var _require=require(\"@reduxjs/toolkit\"),createSlice=_require.createSlice,createAsyncThunk=_require.createAsyncThunk;/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */ /**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */ //* Hàm dùng để cập nhật ngưỡng báo cáo\nexport var updatePercentThreshold=createAsyncThunk(\"PrecentReport/put\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return JSONPLACEHOLDERApi.editPrecentReport(params);case 2:result=_context.sent;return _context.abrupt(\"return\",result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());//* Hàm dùng để load các ngưỡng báo cáo\nexport var getAllPercentReport=createAsyncThunk(\"PrecentReport/GetAll\",/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return JSONPLACEHOLDERApi.getAllPercent(null);case 2:result=_context2.sent;return _context2.abrupt(\"return\",result);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}());var systemConfig=createSlice({name:\"systemConfig\",initialState:{percentResult:[{id:1,name:\"Phần trăm số lượng account\",precent:40},{id:2,name:\"Phần trăm số lượng bài Post\",precent:30}],loading:false,// * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\nsuccess:false,// * trường này dùng để hiển thị pop up success nếu như gọi API thành công\nfail:false,//* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\nerror:\"\",selectedId:\"\",percent:\"\",percentNames:[],systemConfigForm:[{row:{cols:[{elementType:variable.select,// Loại input\nelementConfig:{name:variable.percentName,type:variable.select,labeltext:\"Loại ngưỡng báo cáo\",options:[],value:\"\"}}// {\n//   elementType: variable.input,\n//   elementConfig: {\n//     name: variable.percent,\n//     type: variable.text,\n//     labeltext: \"Phần trăm báo cáo\",\n//     value: \"\",\n//   },\n// },\n]}}]},reducers:{//   ! Hàm dùng để đưa các lựa chọn về loại percent vào form\naddPercentReportName:function addPercentReportName(state,action){//* Cái phần commend này là dùng để lấy từ API\nstate.systemConfigForm[0].row.cols[0].elementConfig.options=action.payload;var arra=[];state.systemConfigForm[0].row.cols[0].elementConfig.options.map(function(percent){arra.push({key:percent.name,value:percent.id});});state.percentNames=arra;},//* Hàm này dùng để lấy ra cái percent đúng với cái ID\ngetPercentById:function getPercentById(state,action){state.systemConfigForm[0].row.cols[0].elementConfig.options.map(function(item){if(action.payload==item.id){state.percent=item.precent;}});}},// ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\nextraReducers:(_extraReducers={},_defineProperty(_extraReducers,getAllPercentReport.pending,function(state){state.loading=true;}),_defineProperty(_extraReducers,getAllPercentReport.rejected,function(state,action){state.error=action.error;state.loading=false;}),_defineProperty(_extraReducers,getAllPercentReport.fulfilled,function(state,action){state.percentResult=action.payload;state.loading=false;}),_defineProperty(_extraReducers,updatePercentThreshold.pending,function(state){state.loading=true;}),_defineProperty(_extraReducers,updatePercentThreshold.rejected,function(state,action){state.error=action.error;state.loading=false;}),_defineProperty(_extraReducers,updatePercentThreshold.fulfilled,function(state,action){state.percentResult=action.payload;state.loading=false;}),_extraReducers)});var systemConfigReducer=systemConfig.reducer,actions=systemConfig.actions;//createSlice sẽ trả về cho ta 2 biến là reducer và action\nvar addPercentReportName=actions.addPercentReportName,getPercentById=actions.getPercentById;export{addPercentReportName,getPercentById};export default systemConfigReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/SystemConfiguration/SystemConfigurationSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","require","createSlice","createAsyncThunk","updatePercentThreshold","params","thunkAPI","editPrecentReport","result","getAllPercentReport","getAllPercent","systemConfig","name","initialState","percentResult","id","precent","loading","success","fail","error","selectedId","percent","percentNames","systemConfigForm","row","cols","elementType","select","elementConfig","percentName","type","labeltext","options","value","reducers","addPercentReportName","state","action","payload","arra","map","push","key","getPercentById","item","extraReducers","pending","rejected","fulfilled","systemConfigReducer","reducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\n\r\n//* Hàm dùng để cập nhật ngưỡng báo cáo\r\nexport const updatePercentThreshold = createAsyncThunk(\r\n  \"PrecentReport/put\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.editPrecentReport(params);\r\n    return result;\r\n  }\r\n);\r\n\r\n//* Hàm dùng để load các ngưỡng báo cáo\r\nexport const getAllPercentReport = createAsyncThunk(\r\n  \"PrecentReport/GetAll\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getAllPercent(null);\r\n    return result;\r\n  }\r\n);\r\n\r\nconst systemConfig = createSlice({\r\n  name: \"systemConfig\",\r\n  initialState: {\r\n    percentResult: [\r\n      {\r\n        id: 1,\r\n        name: \"Phần trăm số lượng account\",\r\n        precent: 40,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Phần trăm số lượng bài Post\",\r\n        precent: 30,\r\n      },\r\n    ],\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    selectedId: \"\",\r\n    percent: \"\",\r\n    percentNames: [],\r\n    systemConfigForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.select, // Loại input\r\n              elementConfig: {\r\n                name: variable.percentName,\r\n                type: variable.select,\r\n                labeltext: \"Loại ngưỡng báo cáo\",\r\n                options: [],\r\n                value: \"\",\r\n              },\r\n            },\r\n            // {\r\n            //   elementType: variable.input,\r\n            //   elementConfig: {\r\n            //     name: variable.percent,\r\n            //     type: variable.text,\r\n            //     labeltext: \"Phần trăm báo cáo\",\r\n            //     value: \"\",\r\n            //   },\r\n            // },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    //   ! Hàm dùng để đưa các lựa chọn về loại percent vào form\r\n    addPercentReportName: (state, action) => {\r\n      //* Cái phần commend này là dùng để lấy từ API\r\n      state.systemConfigForm[0].row.cols[0].elementConfig.options =action.payload;\r\n      let arra = [];\r\n      state.systemConfigForm[0].row.cols[0].elementConfig.options.map(\r\n        (percent) => {\r\n          arra.push({ key: percent.name, value: percent.id });\r\n        }\r\n      );\r\n      state.percentNames = arra;\r\n    },\r\n\r\n    //* Hàm này dùng để lấy ra cái percent đúng với cái ID\r\n    getPercentById: (state, action) => {\r\n      state.systemConfigForm[0].row.cols[0].elementConfig.options.map((item) => {\r\n        if (action.payload == item.id) {\r\n          state.percent = item.precent;\r\n        }\r\n      });\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getAllPercentReport.pending]: (state) => {\r\n      state.loading = true;\r\n    },\r\n    [getAllPercentReport.rejected]: (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    },\r\n    [getAllPercentReport.fulfilled]: (state, action) => {\r\n      state.percentResult = action.payload;\r\n      state.loading = false;\r\n    },\r\n    [updatePercentThreshold.pending]: (state) => {\r\n      state.loading = true;\r\n    },\r\n    [updatePercentThreshold.rejected]: (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    },\r\n    [updatePercentThreshold.fulfilled]: (state, action) => {\r\n      state.percentResult = action.payload;\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: systemConfigReducer, actions } = systemConfig; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addPercentReportName, getPercentById } = actions;\r\nexport default systemConfigReducer;\r\n"]},"metadata":{},"sourceType":"module"}