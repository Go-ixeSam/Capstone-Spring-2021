{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\SystemConfiguration.jsx\";\nimport React from \"react\";\nimport { CardNoFooter } from \"../components/Card/Card\";\nimport { Col, Grid, Row } from \"react-bootstrap\";\nimport { FormControll } from \"../components/Formik/FormikControl\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPercentReport, getPercent } from \"../redux/Selector/Selectors\";\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\nimport * as variable from \"../variables/Variables\";\nimport { addPercentReportName, getPercentById } from \"../redux/index\";\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\n\nfunction SystemConfiguration() {\n  const dispatch = useDispatch();\n  const systemConfigForm = useSelector(state => getPercentReport(state));\n  React.useEffect(() => {\n    dispatch(addPercentReportName());\n  }, []);\n  const initialValue = {\n    [variable.percentName]: \"\",\n    [variable.percent]: \"\"\n  };\n\n  const percentInput = {\n    elementType: variable.input,\n    elementConfig: {\n      name: variable.percent,\n      type: variable.text,\n      labeltext: \"Phần trăm báo cáo\",\n      value: \"\"\n    }\n  },\n        InputDepend = props => {\n    const percent = useSelector(state => getPercent(state));\n    const {\n      values: {\n        percentName\n      },\n      touched,\n      setFieldValue\n    } = useFormikContext();\n    const [field, meta] = useField(props);\n    React.useEffect(() => {\n      // set the value of textC, based on textA and textB\n      if (touched.percentName) {\n        dispatch(getPercentById(percentName));\n        setFieldValue(props.name, `${percent}`);\n      }\n    }, [touched.percentName]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControll, Object.assign({}, props, field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    title: \"\",\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: initialValue //   validationSchema={validationSchema}\n      //   onSubmit={onSubmit}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, formik => {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, systemConfigForm.map(rows => {\n        const columns = rows.row.cols;\n        return columns.map(column => {\n          // const controlType = column.elementType;\n          const {\n            name,\n            type,\n            labeltext,\n            placeholder //   options,\n\n          } = column.elementConfig;\n          return /*#__PURE__*/React.createElement(FormControll, Object.assign({\n            elementType: type,\n            type: type,\n            label: labeltext,\n            name: name\n          }, column, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }\n          }));\n        });\n      }), /*#__PURE__*/React.createElement(InputDepend, Object.assign({}, percentInput, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(MaterialButton, {\n        variant: \"contained\",\n        color: \"success\",\n        size: \"large\",\n        style: {\n          marginRight: 5,\n          marginTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 23\n        }\n      }, \"Duy\\u1EC7t rau\"));\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default SystemConfiguration;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/SystemConfiguration.jsx"],"names":["React","CardNoFooter","Col","Grid","Row","FormControll","useDispatch","useSelector","getPercentReport","getPercent","Formik","Field","Form","useField","useFormikContext","variable","addPercentReportName","getPercentById","MaterialButton","SystemConfiguration","dispatch","systemConfigForm","state","useEffect","initialValue","percentName","percent","percentInput","elementType","input","elementConfig","name","type","text","labeltext","value","InputDepend","props","values","touched","setFieldValue","field","meta","margin","padding","width","formik","map","rows","columns","row","cols","column","placeholder","marginRight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport { FormControll } from \"../components/Formik/FormikControl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPercentReport, getPercent } from \"../redux/Selector/Selectors\";\r\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\r\n\r\nimport * as variable from \"../variables/Variables\";\r\nimport { addPercentReportName, getPercentById } from \"../redux/index\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\n\r\nfunction SystemConfiguration() {\r\n  const dispatch = useDispatch();\r\n  const systemConfigForm = useSelector((state) => getPercentReport(state));\r\n  React.useEffect(() => {\r\n    dispatch(addPercentReportName());\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    [variable.percentName]: \"\",\r\n    [variable.percent]: \"\",\r\n  };\r\n  const percentInput = {\r\n      elementType: variable.input,\r\n      elementConfig: {\r\n        name: variable.percent,\r\n        type: variable.text,\r\n        labeltext: \"Phần trăm báo cáo\",\r\n        value: \"\",\r\n      },\r\n    },\r\n    InputDepend = (props) => {\r\n      const percent = useSelector((state) => getPercent(state));\r\n      const {\r\n        values: { percentName },\r\n        touched,\r\n        setFieldValue,\r\n      } = useFormikContext();\r\n      const [field, meta] = useField(props);\r\n\r\n      React.useEffect(() => {\r\n        // set the value of textC, based on textA and textB\r\n        if (touched.percentName) {\r\n          dispatch(getPercentById(percentName));\r\n          setFieldValue(props.name, `${percent}`);\r\n        }\r\n      }, [touched.percentName]);\r\n\r\n      return (\r\n        <>\r\n          <FormControll {...props} {...field} />\r\n          {/* {!!meta.touched && !!meta.error && <div>{meta.error}</div>} */}\r\n        </>\r\n      );\r\n    };\r\n\r\n  return (\r\n    <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n      <CardNoFooter\r\n        title=\"\"\r\n        content={\r\n          <React.Fragment>\r\n            <div style={{ width: \"30%\" }}>\r\n              <Formik\r\n                initialValues={initialValue}\r\n                //   validationSchema={validationSchema}\r\n                //   onSubmit={onSubmit}\r\n              >\r\n                {(formik) => {\r\n                  return (\r\n                    <Form>\r\n                      {systemConfigForm.map((rows) => {\r\n                        const columns = rows.row.cols;\r\n                        return columns.map((column) => {\r\n                          // const controlType = column.elementType;\r\n                          const {\r\n                            name,\r\n                            type,\r\n                            labeltext,\r\n                            placeholder,\r\n                            //   options,\r\n                          } = column.elementConfig;\r\n                          return (\r\n                            <FormControll\r\n                              elementType={type}\r\n                              type={type}\r\n                              label={labeltext}\r\n                              name={name}\r\n                              {...column}\r\n                            />\r\n                          );\r\n                        });\r\n                      })}\r\n                      <InputDepend {...percentInput} />\r\n                      <MaterialButton\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        size=\"large\"\r\n                        style={{ marginRight: 5, marginTop: 10 }}\r\n                      >\r\n                        Duyệt rau\r\n                      </MaterialButton>\r\n                    </Form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </div>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default SystemConfiguration;\r\n"]},"metadata":{},"sourceType":"module"}