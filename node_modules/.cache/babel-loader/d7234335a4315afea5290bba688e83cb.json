{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\SystemConfiguration.jsx\";\nimport React, { useState } from \"react\";\nimport { CardNoFooter } from \"../components/Card/Card\";\nimport { Col, Grid, Row } from \"react-bootstrap\";\nimport { FormControll } from \"../components/Formik/FormikControl\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPercentReport, getPercent, getPercentName, getPercentResult, getSystemConfigLoading } from \"../redux/Selector/Selectors\";\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\nimport * as variable from \"../variables/Variables\";\nimport { addPercentReportName, getPercentById, getAllPercentReport, updatePercentThreshold } from \"../redux/index\";\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\n\nfunction SystemConfiguration() {\n  const dispatch = useDispatch();\n  const loading = useSelector(state => getSystemConfigLoading(state));\n  const percentNames = {\n    elementConfig: {\n      options: useSelector(state => getPercentName(state))\n    }\n  };\n  React.useEffect(() => {\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\n    const loadPercentName = async () => {\n      const res = await dispatch(getAllPercentReport());\n      dispatch(addPercentReportName(res.payload.data));\n    };\n\n    loadPercentName();\n  }, []);\n  const initialValue = {\n    [variable.percentName]: \"\",\n    [variable.percent]: \"\"\n  };\n\n  const MyField = props => {\n    const percent = useSelector(state => getPercent(state));\n    const {\n      values: {\n        percentName\n      },\n      setFieldValue\n    } = useFormikContext();\n    const [field, meta] = useField(props);\n    React.useEffect(() => {\n      const set = () => {\n        dispatch(getPercentById(percentName));\n        setFieldValue(props.name, percent);\n      };\n\n      set();\n    }, [percentName, percent]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControll, Object.assign({}, props, field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const onSubmit = (value, onSubmitProps) => {\n    dispatch(updatePercentThreshold({\n      id: value[variable.percentName],\n      name: \"\",\n      precent: value[variable.percent]\n    }).then(res => {\n      console.log(\"Kết quả= \", res);\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingPopUp, {\n    visible: loading,\n    length: \"200px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    title: \"\",\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: initialValue //   validationSchema={validationSchema}\n      ,\n      onSubmit: onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, formik => {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControll, Object.assign({\n        elementType: \"select\",\n        label: \"Loại ngưỡng báo cáo\",\n        name: variable.percentName\n      }, percentNames, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(MyField, {\n        elementType: \"input\",\n        type: \"text\",\n        label: \"Phần trăm ngưỡng\",\n        name: variable.percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(MaterialButton, {\n        variant: \"contained\",\n        color: \"success\",\n        type: \"submit\",\n        size: \"large\",\n        style: {\n          marginRight: 5,\n          marginTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, \"Duy\\u1EC7t rau\"));\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default SystemConfiguration;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/SystemConfiguration.jsx"],"names":["React","useState","CardNoFooter","Col","Grid","Row","FormControll","useDispatch","useSelector","getPercentReport","getPercent","getPercentName","getPercentResult","getSystemConfigLoading","Formik","Field","Form","useField","useFormikContext","ShowPopUp","SuccessPopUp","LoadingPopUp","variable","addPercentReportName","getPercentById","getAllPercentReport","updatePercentThreshold","MaterialButton","SystemConfiguration","dispatch","loading","state","percentNames","elementConfig","options","useEffect","loadPercentName","res","payload","data","initialValue","percentName","percent","MyField","props","values","setFieldValue","field","meta","set","name","onSubmit","value","onSubmitProps","id","precent","then","console","log","margin","padding","width","formik","marginRight","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,gBADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,gBAJF,EAKEC,sBALF,QAMO,6BANP;AAOA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,gBAAxC,QAAgE,QAAhE;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,YAAlC,QAAsD,wBAAtD;AAEA,OAAO,KAAKC,QAAZ,MAA0B,wBAA1B;AACA,SACEC,oBADF,EAEEC,cAFF,EAGEC,mBAHF,EAIEC,sBAJF,QAKO,gBALP;AAMA,SAASC,cAAT,QAA+B,2CAA/B;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,QAAMC,QAAQ,GAAGtB,WAAW,EAA5B;AACA,QAAMuB,OAAO,GAAEtB,WAAW,CAACuB,KAAK,IAAElB,sBAAsB,CAACkB,KAAD,CAA9B,CAA1B;AACA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,OAAO,EAAE1B,WAAW,CAAEuB,KAAD,IAAWpB,cAAc,CAACoB,KAAD,CAA1B;AADP;AADI,GAArB;AAMA/B,EAAAA,KAAK,CAACmC,SAAN,CAAgB,MAAM;AACpB;AACC,UAAMC,eAAe,GAAC,YAAS;AAC7B,YAAMC,GAAG,GAAC,MAAMR,QAAQ,CAACJ,mBAAmB,EAApB,CAAxB;AACAI,MAAAA,QAAQ,CAACN,oBAAoB,CAACc,GAAG,CAACC,OAAJ,CAAYC,IAAb,CAArB,CAAR;AACD,KAHD;;AAIFH,IAAAA,eAAe;AACf,GAPD,EAOG,EAPH;AASA,QAAMI,YAAY,GAAG;AACnB,KAAClB,QAAQ,CAACmB,WAAV,GAAwB,EADL;AAEnB,KAACnB,QAAQ,CAACoB,OAAV,GAAoB;AAFD,GAArB;;AAKA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,UAAMF,OAAO,GAAGlC,WAAW,CAAEuB,KAAD,IAAWrB,UAAU,CAACqB,KAAD,CAAtB,CAA3B;AACA,UAAM;AACJc,MAAAA,MAAM,EAAE;AAAEJ,QAAAA;AAAF,OADJ;AAEJK,MAAAA;AAFI,QAGF5B,gBAAgB,EAHpB;AAIA,UAAM,CAAC6B,KAAD,EAAQC,IAAR,IAAgB/B,QAAQ,CAAC2B,KAAD,CAA9B;AAEA5C,IAAAA,KAAK,CAACmC,SAAN,CAAgB,MAAM;AACpB,YAAMc,GAAG,GAAG,MAAM;AAChBpB,QAAAA,QAAQ,CAACL,cAAc,CAACiB,WAAD,CAAf,CAAR;AACAK,QAAAA,aAAa,CAACF,KAAK,CAACM,IAAP,EAAaR,OAAb,CAAb;AACD,OAHD;;AAIAO,MAAAA,GAAG;AACJ,KAND,EAMG,CAACR,WAAD,EAAcC,OAAd,CANH;AAQA,wBACE,uDACE,oBAAC,YAAD,oBAAkBE,KAAlB,EAA6BG,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GArBD;;AAuBA,QAAMI,QAAQ,GAAG,CAACC,KAAD,EAAQC,aAAR,KAA0B;AACzCxB,IAAAA,QAAQ,CACNH,sBAAsB,CAAC;AACrB4B,MAAAA,EAAE,EAAEF,KAAK,CAAC9B,QAAQ,CAACmB,WAAV,CADY;AAErBS,MAAAA,IAAI,EAAE,EAFe;AAGrBK,MAAAA,OAAO,EAAEH,KAAK,CAAC9B,QAAQ,CAACoB,OAAV;AAHO,KAAD,CAAtB,CAIGc,IAJH,CAISnB,GAAD,IAAS;AACfoB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBrB,GAAxB;AACD,KAND,CADM,CAAR;AASD,GAVD;;AAYA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEP,OAAvB;AAAgC,IAAA,MAAM,EAAC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,KAAK,EAAE;AAAE6B,MAAAA,MAAM,EAAE,CAAV;AAAaC,MAAAA,OAAO,EAAE;AAAtB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,EADR;AAEE,IAAA,OAAO,eACL,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAErB,YADjB,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAEW,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKIW,MAAD,IAAY;AACX,0BACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAC,QADd;AAEE,QAAA,KAAK,EAAE,qBAFT;AAGE,QAAA,IAAI,EAAExC,QAAQ,CAACmB;AAHjB,SAIMT,YAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,eAOE,oBAAC,OAAD;AACE,QAAA,WAAW,EAAC,OADd;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE,kBAHT;AAIE,QAAA,IAAI,EAAEV,QAAQ,CAACoB,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eAcE,oBAAC,cAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,KAAK,EAAE;AAAEqB,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,SAAS,EAAE;AAA7B,SALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAdF,CADF;AA0BD,KAhCH,CADF,CADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAkDD;;AAED,eAAepC,mBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport { FormControll } from \"../components/Formik/FormikControl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPercentReport,\r\n  getPercent,\r\n  getPercentName,\r\n  getPercentResult,\r\n  getSystemConfigLoading\r\n} from \"../redux/Selector/Selectors\";\r\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\r\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\r\n\r\nimport * as variable from \"../variables/Variables\";\r\nimport {\r\n  addPercentReportName,\r\n  getPercentById,\r\n  getAllPercentReport,\r\n  updatePercentThreshold,\r\n} from \"../redux/index\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\n\r\nfunction SystemConfiguration() {\r\n  const dispatch = useDispatch();\r\n  const loading =useSelector(state=>getSystemConfigLoading(state))\r\n  const percentNames = {\r\n    elementConfig: {\r\n      options: useSelector((state) => getPercentName(state)),\r\n    },\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\r\n     const loadPercentName=async()=>{\r\n       const res=await dispatch(getAllPercentReport())\r\n       dispatch(addPercentReportName(res.payload.data))\r\n     }\r\n   loadPercentName()\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    [variable.percentName]: \"\",\r\n    [variable.percent]: \"\",\r\n  };\r\n\r\n  const MyField = (props) => {\r\n    const percent = useSelector((state) => getPercent(state));\r\n    const {\r\n      values: { percentName },\r\n      setFieldValue,\r\n    } = useFormikContext();\r\n    const [field, meta] = useField(props);\r\n\r\n    React.useEffect(() => {\r\n      const set = () => {\r\n        dispatch(getPercentById(percentName));\r\n        setFieldValue(props.name, percent);\r\n      };\r\n      set();\r\n    }, [percentName, percent]);\r\n\r\n    return (\r\n      <>\r\n        <FormControll {...props} {...field} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onSubmit = (value, onSubmitProps) => {\r\n    dispatch(\r\n      updatePercentThreshold({\r\n        id: value[variable.percentName],\r\n        name: \"\",\r\n        precent: value[variable.percent],\r\n      }).then((res) => {\r\n        console.log(\"Kết quả= \",res)\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LoadingPopUp visible={loading} length=\"200px\" />\r\n      <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n        <CardNoFooter\r\n          title=\"\"\r\n          content={\r\n            <React.Fragment>\r\n              <div style={{ width: \"30%\" }}>\r\n                <Formik\r\n                  initialValues={initialValue}\r\n                  //   validationSchema={validationSchema}\r\n                  onSubmit={onSubmit}\r\n                >\r\n                  {(formik) => {\r\n                    return (\r\n                      <Form>\r\n                        <FormControll\r\n                          elementType=\"select\"\r\n                          label={\"Loại ngưỡng báo cáo\"}\r\n                          name={variable.percentName}\r\n                          {...percentNames}\r\n                        />\r\n                        <MyField\r\n                          elementType=\"input\"\r\n                          type=\"text\"\r\n                          label={\"Phần trăm ngưỡng\"}\r\n                          name={variable.percent}\r\n                        />\r\n\r\n                        <MaterialButton\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          type=\"submit\"\r\n                          size=\"large\"\r\n                          style={{ marginRight: 5, marginTop: 10 }}\r\n                        >\r\n                          Duyệt rau\r\n                        </MaterialButton>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </div>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SystemConfiguration;\r\n"]},"metadata":{},"sourceType":"module"}