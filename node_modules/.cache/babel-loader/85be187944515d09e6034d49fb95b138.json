{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { createPostData, convertDateToString, createAccountData, createHeader } from \"util/ContructorCreation\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n\n\nconst dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState: {\n    loading: false,\n    // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\n    success: false,\n    // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\n    fail: false,\n    //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\n    error: \"\",\n    updateDashboard: [{\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: \"updateTime\",\n            type: variable.select,\n            labeltext: \"Thời gian xem báo cáo\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }]\n  },\n  reducers: {},\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\n  extraReducers: {}\n});\nconst {\n  reducer: dashboardReducer,\n  actions\n} = dashboardSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {} = actions;\nexport default dashboardReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Dashboard/DashboardSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","createSlice","createAsyncThunk","require","dashboardSlice","name","initialState","loading","success","fail","error","updateDashboard","row","cols","elementType","input","elementConfig","type","select","labeltext","value","validation","valid","reducers","extraReducers","reducer","dashboardReducer","actions"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAZ,MAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,YAJF,QAKO,yBALP;;AAMA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;AAEA;;;;;;AAMA;;;;;;;AAMA,MAAMC,cAAc,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,KADG;AACI;AAChBC,IAAAA,OAAO,EAAE,KAFG;AAEI;AAChBC,IAAAA,IAAI,EAAE,KAHM;AAGC;AACbC,IAAAA,KAAK,EAAE,EAJK;AAKZC,IAAAA,eAAe,EAAE,CACf;AACEC,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,WAAW,EAAEnB,QAAQ,CAACoB,KADxB;AAEEC,UAAAA,aAAa,EAAE;AACbX,YAAAA,IAAI,EAAE,YADO;AAEbY,YAAAA,IAAI,EAAEtB,QAAQ,CAACuB,MAFF;AAGbC,YAAAA,SAAS,EAAE,uBAHE;AAIbC,YAAAA,KAAK,EAAE;AAJM,WAFjB;AAQEC,UAAAA,UAAU,EAAE,EARd;AASEC,UAAAA,KAAK,EAAE;AATT,SADI;AADH;AADP,KADe;AALL,GAFmB;AA2BjCC,EAAAA,QAAQ,EAAE,EA3BuB;AA6BjC;AACAC,EAAAA,aAAa,EAAE;AA9BkB,CAAD,CAAlC;AAiCA,MAAM;AAAEC,EAAAA,OAAO,EAAEC,gBAAX;AAA6BC,EAAAA;AAA7B,IAAyCvB,cAA/C,C,CAA+D;;AAC/D,OAAO,MAAM,KAAKuB,OAAX;AACP,eAAeD,gBAAf","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\n\r\nconst dashboardSlice = createSlice({\r\n  name: \"dashboard\",\r\n  initialState: {\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    updateDashboard: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: \"updateTime\",\r\n                type: variable.select,\r\n                labeltext: \"Thời gian xem báo cáo\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {},\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {},\r\n});\r\n\r\nconst { reducer: dashboardReducer, actions } = dashboardSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const {} = actions;\r\nexport default dashboardReducer;\r\n"]},"metadata":{},"sourceType":"module"}