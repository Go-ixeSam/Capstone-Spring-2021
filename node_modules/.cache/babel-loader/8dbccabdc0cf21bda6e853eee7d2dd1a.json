{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\src\\\\layouts\\\\Admin.jsx\";\n\n/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\nimport imageSide from \"assets/img/garden.jpg\";\nimport Footer from \"components/Footer/Footer\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport React, { useRef, useState } from \"react\";\nimport NotificationSystem from \"react-notification-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { addObject, increaseNotificationCount } from \"redux/index\";\nimport { getFirebase } from \"redux/Selector/Selectors\";\nimport routes from \"routes.js\";\nimport message from \"util/firebase\";\nimport { style } from \"variables/Variables.jsx\";\nimport * as variable from \"../variables/Variables\";\n\nconst Admin = props => {\n  const [image, setImage] = useState(imageSide);\n  const [color, setColor] = useState(\"black\");\n  const [hasImage, setHasImage] = useState(true);\n  const [isNotify, setIsNotify] = useState(0); // ! cái này dùng để ngăn cho việc notification nổ lần đầu tiên khi hàng của store đc thêm vào lần đầu tiên\n\n  const [fixedClasses, setFixedClasses] = useState(\"dropdown show-dropdown open\");\n  let history = useHistory();\n  let location = useLocation();\n  const mainPanel = useRef();\n  const notify = useRef();\n  const dataInFirebase = useSelector(state => getFirebase(state));\n  const dispatch = useDispatch(); //! Hàm này có tác dụng là tạo ra một notification, ta sẽ dùng hàm này cứ mỗi khi firebase bắt\n  //! sự kiện\n\n  const addNotify = message => {\n    // increaseNotificationCount()\n    // dispatch(increaseNotificationCount())\n    var color = Math.floor(Math.random() * 4 + 1);\n    var level;\n    const notification = notify.current;\n\n    switch (color) {\n      case 1:\n        level = \"success\";\n        break;\n\n      case 2:\n        level = \"warning\";\n        break;\n\n      case 3:\n        level = \"error\";\n        break;\n\n      case 4:\n        level = \"info\";\n        break;\n\n      default:\n        break;\n    }\n\n    notification.addNotification({\n      title: /*#__PURE__*/React.createElement(\"span\", {\n        \"data-notify\": \"icon\",\n        className: \"pe-7s-leaf\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 14\n        }\n      }),\n      message: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }\n      }, message),\n      level: level,\n      position: \"tr\",\n      autoDismiss: 15\n    });\n  }; // handleNotificationClick = (position) => {\n  //   var color = Math.floor(Math.random() * 4 + 1);\n  //   var level;\n  //   switch (color) {\n  //     case 1:\n  //       level = \"success\";\n  //       break;\n  //     case 2:\n  //       level = \"warning\";\n  //       break;\n  //     case 3:\n  //       level = \"error\";\n  //       break;\n  //     case 4:\n  //       level = \"info\";\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   this.state._notificationSystem.addNotification({\n  //     title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n  //     message: (\n  //       <div>\n  //         Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n  //         every web developer.\n  //       </div>\n  //     ),\n  //     level: level,\n  //     position: position,\n  //     autoDismiss: 15,\n  //   });\n  // };\n\n\n  const getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: prop.layout + prop.path,\n          render: props => /*#__PURE__*/React.createElement(prop.component, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }\n          })),\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }\n        });\n      } else {\n        return null;\n      }\n    });\n  };\n\n  const getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (props.location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\n        return routes[i].name;\n      }\n    }\n\n    return \"Brand\";\n  };\n\n  const handleImageClick = image => {\n    setImage(image);\n  };\n\n  const handleColorClick = color => {\n    setColor(color);\n  };\n\n  const handleHasImage = hasImage => {\n    setHasImage(hasImage);\n  };\n\n  const handleFixedClick = () => {\n    if (fixedClasses === \"dropdown\") {\n      setFixedClasses(\"dropdown show-dropdown open\");\n    } else {\n      setFixedClasses(\"dropdown\");\n    }\n  }; // * cho này để lắng nghe firebase DB realtime, ta ko dùng nữa\n\n\n  React.useEffect(() => {\n    message.onMessage(payload => {\n      console.log(\"Message received. \", payload); //! cứ mỗi 1 noti đến là cộgn thêm 1\n      // increaseNotificationCount();\n\n      addNotify(payload.notification.body);\n    });\n  }, []);\n\n  function notifyMe() {\n    // Let's check if the browser supports notifications\n    if (!(\"Notification\" in window)) {\n      alert(\"This browser does not support desktop notification\");\n    } // Let's check whether notification permissions have already been granted\n    else if (Notification.permission === \"granted\") {\n        // If it's okay let's create a notification\n        var notification = new Notification(\"Hi there!\");\n      } // Otherwise, we need to ask the user for permission\n      else if (Notification.permission !== \"denied\") {\n          Notification.requestPermission(function (permission) {\n            // If the user accepts, let's create a notification\n            if (permission === \"granted\") {\n              var notification = new Notification(\"Hi there!\");\n            }\n          });\n        } // At last, if the user has denied notifications, and you\n    // want to be respectful there is no need to bother them any more.\n\n  }\n\n  React.useEffect(() => {\n    //! setIsNotify dùng để ngăn cho ko hiện notification khi lần đầu event listener đc nổ\n    setIsNotify(isNotify + 1); //! đây là đk để nổi notification =_\n\n    if (dataInFirebase.firebaseData.length != 0 && isNotify >= 2) {\n      addNotify();\n    }\n    /**\r\n     * * Sẽ có thêm phần chức năng là hiển thị số post cần phải duyệt,\r\n     * * mỗi post sẽ có trạng thái là duyệt và chưa duyệt, những cái chưa duyệt sẽ đc đưa vào list chưa duyệt và hiển thị\r\n     * * số sẽ trừ dần mỗi khi duyệt xong và bài post cũng sẽ biến mất hoàn toàn khỏi list hiển thị\r\n     */\n\n  }, [dataInFirebase]);\n  React.useEffect(() => {\n    // * Doạn này dùng để thu cái nav bar lại khi chiều rộng bị bé lại\n    if (window.innerWidth < 993 && history.location.pathname !== location.pathname && document.documentElement.className.indexOf(\"nav-open\") !== -1) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    } // * Đoạn này dùng để lưu lại nơi scroll top\n\n\n    if (history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      mainPanel.scrollTop = 0;\n    }\n  }, [mainPanel]); // ! Lắng nghe sự thay đổi của database trên firebase\n\n  const firebaseListening = params => {// var userCount = firebase.database().ref(\"users\");\n    // userCount.on(\"value\", (snapshot) => {\n    //   let newArr = [];\n    //   // ? Vì snapshot sẽ chỉ trả về các obj nên ta muốn nó thành 1 array ta phải làm bằng tay, chi tiết thế nào thì coi trong quick note\n    //   snapshot.forEach((child) => {\n    //     //chỉ bỏ những node child nào có status là no, tức là chưa đc duyệt\n    //     if (child.val()[\"status\"] == \"not\") {\n    //       newArr.push({ ...child.val(), userId: child.key });\n    //     }\n    //   });\n    //   dispatch(addObject(newArr));\n    // });\n  }; //! bỏ lắng nghe khi cái component này unmount\n\n\n  function removeFirebaseListening(params) {// firebase.database().ref(\"user\").off(\"value\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NotificationSystem, {\n    ref: notify,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sidebar, Object.assign({}, props, {\n    routes: routes,\n    image: image,\n    color: color,\n    hasImage: hasImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"main-panel\",\n    className: \"main-panel\",\n    ref: mainPanel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AdminNavbar, Object.assign({}, props, {\n    brandText: getBrandText(props.location.pathname),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, getRoutes(routes)), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Admin;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/layouts/Admin.jsx"],"names":["imageSide","Footer","AdminNavbar","Sidebar","React","useRef","useState","NotificationSystem","useDispatch","useSelector","Route","Switch","useHistory","useLocation","addObject","increaseNotificationCount","getFirebase","routes","message","style","variable","Admin","props","image","setImage","color","setColor","hasImage","setHasImage","isNotify","setIsNotify","fixedClasses","setFixedClasses","history","location","mainPanel","notify","dataInFirebase","state","dispatch","addNotify","Math","floor","random","level","notification","current","addNotification","title","position","autoDismiss","getRoutes","map","prop","key","layout","path","getBrandText","i","length","pathname","indexOf","name","handleImageClick","handleColorClick","handleHasImage","handleFixedClick","useEffect","onMessage","payload","console","log","body","notifyMe","window","alert","Notification","permission","requestPermission","firebaseData","innerWidth","document","documentElement","className","classList","toggle","action","scrollTop","scrollingElement","firebaseListening","params","removeFirebaseListening"],"mappings":"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","sourcesContent":["/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport imageSide from \"assets/img/garden.jpg\";\r\nimport Footer from \"components/Footer/Footer\";\r\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\r\nimport Sidebar from \"components/Sidebar/Sidebar\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport NotificationSystem from \"react-notification-system\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\r\nimport { addObject, increaseNotificationCount } from \"redux/index\";\r\nimport { getFirebase } from \"redux/Selector/Selectors\";\r\nimport routes from \"routes.js\";\r\nimport message from \"util/firebase\";\r\nimport { style } from \"variables/Variables.jsx\";\r\nimport * as variable from \"../variables/Variables\";\r\nconst Admin = (props) => {\r\n  const [image, setImage] = useState(imageSide);\r\n  const [color, setColor] = useState(\"black\");\r\n  const [hasImage, setHasImage] = useState(true);\r\n  const [isNotify, setIsNotify] = useState(0); // ! cái này dùng để ngăn cho việc notification nổ lần đầu tiên khi hàng của store đc thêm vào lần đầu tiên\r\n  const [fixedClasses, setFixedClasses] = useState(\r\n    \"dropdown show-dropdown open\"\r\n  );\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n  const mainPanel = useRef();\r\n  const notify = useRef();\r\n  const dataInFirebase = useSelector((state) => getFirebase(state));\r\n  const dispatch = useDispatch();\r\n\r\n  //! Hàm này có tác dụng là tạo ra một notification, ta sẽ dùng hàm này cứ mỗi khi firebase bắt\r\n  //! sự kiện\r\n  const addNotify = (message) => {\r\n    // increaseNotificationCount()\r\n    // dispatch(increaseNotificationCount())\r\n    var color = Math.floor(Math.random() * 4 + 1);\r\n    var level;\r\n    const notification = notify.current;\r\n    switch (color) {\r\n      case 1:\r\n        level = \"success\";\r\n        break;\r\n      case 2:\r\n        level = \"warning\";\r\n        break;\r\n      case 3:\r\n        level = \"error\";\r\n        break;\r\n      case 4:\r\n        level = \"info\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    notification.addNotification({\r\n      title: <span data-notify=\"icon\" className=\"pe-7s-leaf\" />,\r\n      message: <div>{message}</div>,\r\n      level: level,\r\n      position: \"tr\",\r\n      autoDismiss: 15,\r\n    });\r\n  };\r\n\r\n  // handleNotificationClick = (position) => {\r\n  //   var color = Math.floor(Math.random() * 4 + 1);\r\n  //   var level;\r\n  //   switch (color) {\r\n  //     case 1:\r\n  //       level = \"success\";\r\n  //       break;\r\n  //     case 2:\r\n  //       level = \"warning\";\r\n  //       break;\r\n  //     case 3:\r\n  //       level = \"error\";\r\n  //       break;\r\n  //     case 4:\r\n  //       level = \"info\";\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   this.state._notificationSystem.addNotification({\r\n  //     title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\r\n  //     message: (\r\n  //       <div>\r\n  //         Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\r\n  //         every web developer.\r\n  //       </div>\r\n  //     ),\r\n  //     level: level,\r\n  //     position: position,\r\n  //     autoDismiss: 15,\r\n  //   });\r\n  // };\r\n  const getRoutes = (routes) => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/admin\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            render={(props) => (\r\n              <prop.component\r\n                {...props}\r\n                // handleClick={handleNotificationClick}\r\n              />\r\n            )}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  const getBrandText = (path) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        props.location.pathname.indexOf(routes[i].layout + routes[i].path) !==\r\n        -1\r\n      ) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"Brand\";\r\n  };\r\n  const handleImageClick = (image) => {\r\n    setImage(image);\r\n  };\r\n  const handleColorClick = (color) => {\r\n    setColor(color);\r\n  };\r\n  const handleHasImage = (hasImage) => {\r\n    setHasImage(hasImage);\r\n  };\r\n  const handleFixedClick = () => {\r\n    if (fixedClasses === \"dropdown\") {\r\n      setFixedClasses(\"dropdown show-dropdown open\");\r\n    } else {\r\n      setFixedClasses(\"dropdown\");\r\n    }\r\n  };\r\n\r\n  // * cho này để lắng nghe firebase DB realtime, ta ko dùng nữa\r\n  React.useEffect(() => {\r\n    message.onMessage((payload) => {\r\n      console.log(\"Message received. \", payload);\r\n\r\n      //! cứ mỗi 1 noti đến là cộgn thêm 1\r\n      // increaseNotificationCount();\r\n      addNotify(payload.notification.body);\r\n    });\r\n  }, []);\r\n\r\n  function notifyMe() {\r\n    // Let's check if the browser supports notifications\r\n    if (!(\"Notification\" in window)) {\r\n      alert(\"This browser does not support desktop notification\");\r\n    }\r\n\r\n    // Let's check whether notification permissions have already been granted\r\n    else if (Notification.permission === \"granted\") {\r\n      // If it's okay let's create a notification\r\n      var notification = new Notification(\"Hi there!\");\r\n    }\r\n\r\n    // Otherwise, we need to ask the user for permission\r\n    else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission(function (permission) {\r\n        // If the user accepts, let's create a notification\r\n        if (permission === \"granted\") {\r\n          var notification = new Notification(\"Hi there!\");\r\n        }\r\n      });\r\n    }\r\n\r\n    // At last, if the user has denied notifications, and you\r\n    // want to be respectful there is no need to bother them any more.\r\n  }\r\n  React.useEffect(() => {\r\n    //! setIsNotify dùng để ngăn cho ko hiện notification khi lần đầu event listener đc nổ\r\n    setIsNotify(isNotify + 1);\r\n\r\n    //! đây là đk để nổi notification =_\r\n    if (dataInFirebase.firebaseData.length != 0 && isNotify >= 2) {\r\n      addNotify();\r\n    }\r\n\r\n    /**\r\n     * * Sẽ có thêm phần chức năng là hiển thị số post cần phải duyệt,\r\n     * * mỗi post sẽ có trạng thái là duyệt và chưa duyệt, những cái chưa duyệt sẽ đc đưa vào list chưa duyệt và hiển thị\r\n     * * số sẽ trừ dần mỗi khi duyệt xong và bài post cũng sẽ biến mất hoàn toàn khỏi list hiển thị\r\n     */\r\n  }, [dataInFirebase]);\r\n\r\n  React.useEffect(() => {\r\n    // * Doạn này dùng để thu cái nav bar lại khi chiều rộng bị bé lại\r\n    if (\r\n      window.innerWidth < 993 &&\r\n      history.location.pathname !== location.pathname &&\r\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n    ) {\r\n      document.documentElement.classList.toggle(\"nav-open\");\r\n    }\r\n\r\n   // * Đoạn này dùng để lưu lại nơi scroll top\r\n    if (history.action === \"PUSH\") {\r\n      document.documentElement.scrollTop = 0;\r\n      document.scrollingElement.scrollTop = 0;\r\n      mainPanel.scrollTop = 0;\r\n    }\r\n  }, [mainPanel]);\r\n\r\n  // ! Lắng nghe sự thay đổi của database trên firebase\r\n  const firebaseListening = (params) => {\r\n    // var userCount = firebase.database().ref(\"users\");\r\n    // userCount.on(\"value\", (snapshot) => {\r\n    //   let newArr = [];\r\n    //   // ? Vì snapshot sẽ chỉ trả về các obj nên ta muốn nó thành 1 array ta phải làm bằng tay, chi tiết thế nào thì coi trong quick note\r\n    //   snapshot.forEach((child) => {\r\n    //     //chỉ bỏ những node child nào có status là no, tức là chưa đc duyệt\r\n    //     if (child.val()[\"status\"] == \"not\") {\r\n    //       newArr.push({ ...child.val(), userId: child.key });\r\n    //     }\r\n    //   });\r\n    //   dispatch(addObject(newArr));\r\n    // });\r\n  };\r\n\r\n  //! bỏ lắng nghe khi cái component này unmount\r\n  function removeFirebaseListening(params) {\r\n    // firebase.database().ref(\"user\").off(\"value\");\r\n  }\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <NotificationSystem ref={notify} style={style} />\r\n      <Sidebar\r\n        {...props}\r\n        routes={routes}\r\n        image={image}\r\n        color={color}\r\n        hasImage={hasImage}\r\n      />\r\n      <div id=\"main-panel\" className=\"main-panel\" ref={mainPanel}>\r\n        <AdminNavbar\r\n          {...props}\r\n          brandText={getBrandText(props.location.pathname)}\r\n        />\r\n        <Switch>{getRoutes(routes)}</Switch>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Admin;\r\n"]},"metadata":{},"sourceType":"module"}