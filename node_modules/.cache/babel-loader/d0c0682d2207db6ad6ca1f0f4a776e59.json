{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import axios from\"axios\";import queryString from\"query-string\";import*as variable from\"variables/Variables\";import{useDispatch,useSelector}from\"react-redux\";import{getToken}from\"redux/Selector/Selectors\";import React from\"react\";import{useState,useEffect}from\"react\";// export function create () {\n//   const [token,setToken]=React.useState(useSelector(state=>getToken(state)))\n//   return [token]\n// }\nfunction useFriendStatus(friendID){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),token=_useState2[0],setToken=_useState2[1];var result=useSelector(function(state){return getToken(state);});useEffect(function(){function handleStatusChange(){setToken(result);}handleStatusChange();});return token;}// import persitorStore from \"redux/store\"\n// const {store}=persitorStore()\n// console.log(\"store nè\",store.getState().post)\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request-\n// config` for the full list of configs\n// console.log(\"store= \",store.getState().post)\n// export const getTokenFromStore=()=>{\n//   const [token,setToken]=useState(useSelector(state=>getToken(state)))\n//   return token\n// }\nvar axiosClient=axios.create({baseURL:variable.jsonplaceholerAPI,headers:{\"content-type\":\"application/json\"},//   ! Việc parse param của asiox có hơi\n// !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\n//? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\n//?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\nparamsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});axiosClient.interceptors.request.use(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",config);case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());// * mỗi reponse ta sẽ phải thực hiện lấy\naxiosClient.interceptors.response.use(function(response){return response;},function(error){throw error;});export var axiosTeamClient=axios.create({baseURL:variable.teamBaseURL,headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer \".concat(localStorage.getItem(\"token\")),\"Access-Control-Allow-Headers\":\"*\"},paramsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});axiosTeamClient.interceptors.request.use(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",config);case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}(),function(error){return Promise.reject(error);});axiosTeamClient.interceptors.response.use(function(response){return response;},function(error){throw error;});/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */export var axiosWithoutToken=axios.create({baseURL:variable.teamBaseURL,headers:{\"Content-type\":\"application/json\",\"Access-Control-Allow-Origin\":\"*\"},paramsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});// ! Xử lí phần authen token, mỗi api đề có cái này mới\naxiosWithoutToken.interceptors.request.use(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(config){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:config.headers={\"Access-Control-Allow-Origin\":\"*\"};return _context3.abrupt(\"return\",config);case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}());axiosWithoutToken.interceptors.response.use(function(response){response.headers={\"Access-Control-Allow-Origin\":\"*\"};return response;},function(error){throw error;});export default axiosClient;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/api/axiosClient.js"],"names":["axios","queryString","variable","useDispatch","useSelector","getToken","React","useState","useEffect","useFriendStatus","friendID","token","setToken","result","state","handleStatusChange","axiosClient","create","baseURL","jsonplaceholerAPI","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","error","axiosTeamClient","teamBaseURL","Authorization","localStorage","getItem","Promise","reject","axiosWithoutToken"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport * as variable from \"variables/Variables\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getToken } from \"redux/Selector/Selectors\";\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// export function create () {\r\n//   const [token,setToken]=React.useState(useSelector(state=>getToken(state)))\r\n//   return [token]\r\n// }\r\nfunction useFriendStatus(friendID) {\r\n  const [token, setToken] = useState(\"\");\r\n  const result = useSelector((state) => getToken(state));\r\n  useEffect(() => {\r\n    function handleStatusChange() {\r\n      setToken(result);\r\n    }\r\n    handleStatusChange();\r\n  });\r\n\r\n  return token;\r\n}\r\n// import persitorStore from \"redux/store\"\r\n// const {store}=persitorStore()\r\n// console.log(\"store nè\",store.getState().post)\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-\r\n// config` for the full list of configs\r\n\r\n// console.log(\"store= \",store.getState().post)\r\n// export const getTokenFromStore=()=>{\r\n//   const [token,setToken]=useState(useSelector(state=>getToken(state)))\r\n//   return token\r\n// }\r\nconst axiosClient = axios.create({\r\n  baseURL: variable.jsonplaceholerAPI,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  //   ! Việc parse param của asiox có hơi\r\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\r\n\r\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\r\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const axiosTeamClient = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    \"Access-Control-Allow-Headers\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosTeamClient.interceptors.request.use(\r\n  async (config) => {\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosTeamClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\r\nexport const axiosWithoutToken = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n// ! Xử lí phần authen token, mỗi api đề có cái này mới\r\naxiosWithoutToken.interceptors.request.use(async (config) => {\r\n  config.headers = {\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  };\r\n  return config;\r\n});\r\naxiosWithoutToken.interceptors.response.use(\r\n  (response) => {\r\n    response.headers = {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    };\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}