{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\src\\\\components\\\\Formik\\\\FormikControl.js\";\nimport React from \"react\";\nimport { FormControl, FormGroup, HelpBlock } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport * as variable from \"variables/Variables\";\nimport Select from \"./Select\";\nimport Input from \"./Input\";\nimport RadioButton from \"./RadioButton\";\nimport CheckboxGroup from \"./CheckboxGroup\";\nimport DatePicker from \"./DatePicker\";\nimport TextArea from \"./Textarea\";\nexport const FormControll = argument => {\n  // const {}\n  switch (argument.elementType) {\n    case variable.input:\n      return /*#__PURE__*/React.createElement(Input, Object.assign({}, argument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 14\n        }\n      }));\n\n    case \"textarea\":\n      return /*#__PURE__*/React.createElement(TextArea, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 14\n        }\n      });\n\n    case variable.select:\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, argument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 14\n        }\n      }));\n\n    case variable.radiobutton:\n      return /*#__PURE__*/React.createElement(RadioButton, Object.assign({}, argument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 14\n        }\n      }));\n\n    case variable.checkboxgroup:\n      return /*#__PURE__*/React.createElement(CheckboxGroup, Object.assign({}, argument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 14\n        }\n      }));\n\n    case variable.date:\n      return /*#__PURE__*/React.createElement(DatePicker, Object.assign({}, argument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return null;\n  }\n};\n/**\r\n * Thiết kế lại theo hướng của formik\r\n * @param {*} argument\r\n */\n\nexport const FormInput = argument => {\n  let inputElement = /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }\n  });\n  let feedBack = /*#__PURE__*/React.createElement(HelpBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 18\n    }\n  });\n\n  switch (argument.elementType) {\n    case \"input\":\n      feedBack = /*#__PURE__*/React.createElement(HelpBlock, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 18\n        }\n      }, argument.valid.errorMessage);\n      inputElement = /*#__PURE__*/React.createElement(FormGroup, {\n        validationState: argument.valid.type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, argument.elementConfig.labeltext), /*#__PURE__*/React.createElement(FormControl, Object.assign({}, argument.elementConfig, {\n        onChange: argument.change,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      })), feedBack);\n      break;\n\n    case \"textarea\":\n      break;\n\n    case \"select\":\n      var itemOption = argument.elementConfig.options;\n      inputElement = /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, argument.elementConfig.labeltext), /*#__PURE__*/React.createElement(FormControl, {\n        componentClass: \"select\",\n        onChange: argument.change,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, itemOption.map(opt => {\n        if (argument.elementConfig.value == opt.value) {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            key: opt.id,\n            value: opt.value,\n            selected: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }\n          }, opt.displayValue);\n        } else {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            key: opt.id,\n            value: opt.value,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }\n          }, opt.displayValue);\n        }\n      })));\n      break;\n  }\n\n  return inputElement;\n};\nexport function useFormResult() {\n  const contractForm = useSelector(state => state.contract.contractForm);\n  const contracts = useSelector(state => state.contract.contracts);\n  let contract = React.useState({});\n  contractForm.map(rows => {\n    rows.row.cols.map(col => {\n      let name = col.elementConfig.name;\n      contract = { ...contract,\n        [name]: col.elementConfig.value\n      };\n    });\n  }); // console.log(\"contracs= \", contracts.record.length);\n\n  contract = { // [variable.id]: contracts.record.length + 1,\n    ...contract,\n    [variable.check]: false,\n    [variable.time]: new Date().toString()\n  };\n  return contract;\n}","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/components/Formik/FormikControl.js"],"names":["React","FormControl","FormGroup","HelpBlock","useSelector","variable","Select","Input","RadioButton","CheckboxGroup","DatePicker","TextArea","FormControll","argument","elementType","input","select","radiobutton","checkboxgroup","date","FormInput","inputElement","feedBack","valid","errorMessage","type","elementConfig","labeltext","change","itemOption","options","map","opt","value","id","displayValue","useFormResult","contractForm","state","contract","contracts","useState","rows","row","cols","col","name","check","time","Date","toString"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { FormControl, FormGroup, HelpBlock } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as variable from \"variables/Variables\";\r\nimport Select from \"./Select\";\r\nimport Input from \"./Input\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport TextArea from \"./Textarea\";\r\n\r\nexport const FormControll = (argument) => {\r\n  // const {}\r\n  switch (argument.elementType) {\r\n    case variable.input:\r\n      return <Input {...argument} />;\r\n    case \"textarea\":\r\n      return <TextArea />;\r\n    case variable.select:\r\n      return <Select {...argument} />;\r\n    case variable.radiobutton:\r\n      return <RadioButton {...argument} />;\r\n    case variable.checkboxgroup:\r\n      return <CheckboxGroup {...argument} />;\r\n    case variable.date:\r\n      return <DatePicker {...argument} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Thiết kế lại theo hướng của formik\r\n * @param {*} argument\r\n */\r\nexport const FormInput = (argument) => {\r\n  let inputElement = <FormGroup></FormGroup>;\r\n  let feedBack = <HelpBlock></HelpBlock>;\r\n  switch (argument.elementType) {\r\n    case \"input\":\r\n      feedBack = <HelpBlock>{argument.valid.errorMessage}</HelpBlock>;\r\n      inputElement = (\r\n        <FormGroup validationState={argument.valid.type}>\r\n          <label>{argument.elementConfig.labeltext}</label>\r\n          <FormControl {...argument.elementConfig} onChange={argument.change} />\r\n          {feedBack}\r\n        </FormGroup>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      break;\r\n    case \"select\":\r\n      var itemOption = argument.elementConfig.options;\r\n      inputElement = (\r\n        <FormGroup>\r\n          <label>{argument.elementConfig.labeltext}</label>\r\n          <FormControl componentClass=\"select\" onChange={argument.change}>\r\n            {itemOption.map((opt) => {\r\n              if (argument.elementConfig.value == opt.value) {\r\n                return (\r\n                  <option key={opt.id} value={opt.value} selected>\r\n                    {opt.displayValue}\r\n                  </option>\r\n                );\r\n              } else {\r\n                return (\r\n                  <option key={opt.id} value={opt.value}>\r\n                    {opt.displayValue}\r\n                  </option>\r\n                );\r\n              }\r\n            })}\r\n          </FormControl>\r\n        </FormGroup>\r\n      );\r\n      break;\r\n  }\r\n  return inputElement;\r\n};\r\n\r\nexport function useFormResult() {\r\n  const contractForm = useSelector((state) => state.contract.contractForm);\r\n  const contracts = useSelector((state) => state.contract.contracts);\r\n  let contract = React.useState({});\r\n\r\n  contractForm.map((rows) => {\r\n    rows.row.cols.map((col) => {\r\n      let name = col.elementConfig.name;\r\n      contract = { ...contract, [name]: col.elementConfig.value };\r\n    });\r\n  });\r\n  // console.log(\"contracs= \", contracts.record.length);\r\n  contract = {\r\n    // [variable.id]: contracts.record.length + 1,\r\n    ...contract,\r\n    [variable.check]: false,\r\n    [variable.time]: new Date().toString(),\r\n  };\r\n  return contract;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}