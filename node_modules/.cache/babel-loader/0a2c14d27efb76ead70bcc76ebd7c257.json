{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\src\\\\views\\\\Wikipedia.jsx\";\nimport React from \"react\";\nimport { isTemplateMiddleOrTemplateTail } from \"typescript\";\nimport useForceUpdate from \"use-force-update\";\nimport \"./Wiki.css\";\nimport { wikiVegetableSearch } from \"redux/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { getWikiResult, getVegetableAPIloadingTime } from \"redux/Selector/Selectors\";\nimport LoadingSpinner, { SwitchSpinner } from \"components/LoadingSpinner/LoadingSpinner\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nfunction Wikipedia() {\n  const [wikiSearchReturnValues, setWikiSearchReturnValues] = React.useState([]);\n  const [wikiSearchTerms, setWikiSearchTerms] = React.useState(\"\");\n  const forceUpdate = useForceUpdate();\n  const dispatch = useDispatch();\n  const loading = useSelector(state => getVegetableAPIloadingTime(state));\n  const location = useLocation();\n  const history = useHistory();\n  console.log(\"Location= \", location);\n\n  const useWikiSearchEngine = e => {\n    e.preventDefault();\n    setWikiSearchReturnValues([]);\n    let vegetableList = {};\n\n    const search = async () => {\n      const result = await dispatch(wikiVegetableSearch(wikiSearchTerms));\n      console.log(\"result= \", result);\n\n      if (!result.error) {\n        vegetableList = await result.payload.data;\n      } else {\n        vegetableList = [];\n      }\n\n      const tmp = [];\n\n      for (let key in vegetableList) {\n        tmp.push({\n          title: vegetableList[key].title,\n          image: vegetableList[key].image\n        });\n      }\n\n      console.log(\"leak wiki= \", tmp);\n      setWikiSearchReturnValues(tmp);\n    };\n\n    search();\n  };\n\n  const changeWikiSearchTerms = e => {\n    console.log(\"value search= \", e.target.value);\n    setWikiSearchTerms(e.target.value);\n  };\n\n  let wikiSearchResults = [];\n\n  for (var key in wikiSearchReturnValues) {\n    wikiSearchResults.push( /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchResultDiv\",\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: wikiSearchReturnValues[key].image,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, wikiSearchReturnValues[key].title))));\n  }\n\n  console.log(wikiSearchResults);\n\n  const totheNew = () => {\n    history.push(\"/white\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Wikipedia Search Engine\"), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: wikiSearchTerms || \"\",\n    onChange: changeWikiSearchTerms,\n    placeholder: \"Search Wikipedia Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: useWikiSearchEngine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(SwitchSpinner, {\n    show: loading,\n    size: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), setWikiSearchReturnValues.length != 0 ? wikiSearchResults : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Kh\\xF4ng c\\xF3 k\\u1EBFt qu\\u1EA3\"));\n}\n\nexport default Wikipedia;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/views/Wikipedia.jsx"],"names":["React","isTemplateMiddleOrTemplateTail","useForceUpdate","wikiVegetableSearch","useDispatch","useSelector","Link","getWikiResult","getVegetableAPIloadingTime","LoadingSpinner","SwitchSpinner","useHistory","useLocation","Wikipedia","wikiSearchReturnValues","setWikiSearchReturnValues","useState","wikiSearchTerms","setWikiSearchTerms","forceUpdate","dispatch","loading","state","location","history","console","log","useWikiSearchEngine","e","preventDefault","vegetableList","search","result","error","payload","data","tmp","key","push","title","image","changeWikiSearchTerms","target","value","wikiSearchResults","totheNew","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { isTemplateMiddleOrTemplateTail } from \"typescript\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport \"./Wiki.css\";\r\nimport { wikiVegetableSearch } from \"redux/index\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getWikiResult,\r\n  getVegetableAPIloadingTime,\r\n} from \"redux/Selector/Selectors\";\r\nimport LoadingSpinner, {\r\n  SwitchSpinner,\r\n} from \"components/LoadingSpinner/LoadingSpinner\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nfunction Wikipedia() {\r\n  const [wikiSearchReturnValues, setWikiSearchReturnValues] = React.useState(\r\n    []\r\n  );\r\n  const [wikiSearchTerms, setWikiSearchTerms] = React.useState(\"\");\r\n  const forceUpdate = useForceUpdate();\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => getVegetableAPIloadingTime(state));\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  console.log(\"Location= \", location);\r\n\r\n  const useWikiSearchEngine = (e) => {\r\n    e.preventDefault();\r\n    setWikiSearchReturnValues([]);\r\n    let vegetableList = {};\r\n    const search = async () => {\r\n      const result = await dispatch(wikiVegetableSearch(wikiSearchTerms));\r\n      console.log(\"result= \", result);\r\n      if (!result.error) {\r\n        vegetableList = await result.payload.data;\r\n      } else {\r\n        vegetableList = [];\r\n      }\r\n      const tmp = [];\r\n      for (let key in vegetableList) {\r\n        tmp.push({\r\n          title: vegetableList[key].title,\r\n          image: vegetableList[key].image,\r\n        });\r\n      }\r\n      console.log(\"leak wiki= \", tmp);\r\n      setWikiSearchReturnValues(tmp);\r\n    };\r\n    search();\r\n  };\r\n  const changeWikiSearchTerms = (e) => {\r\n    console.log(\"value search= \", e.target.value);\r\n    setWikiSearchTerms(e.target.value);\r\n  };\r\n\r\n  let wikiSearchResults = [];\r\n  for (var key in wikiSearchReturnValues) {\r\n    wikiSearchResults.push(\r\n      <div className=\"searchResultDiv\" key={key}>\r\n        <img src={wikiSearchReturnValues[key].image} alt=\"\" />\r\n        <Link to=\"/white\">\r\n          <h3>{wikiSearchReturnValues[key].title}</h3>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  console.log(wikiSearchResults);\r\n  const totheNew = () => {\r\n    history.push(\"/white\");\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Wikipedia Search Engine</h1>\r\n      <form action=\"\">\r\n        <input\r\n          type=\"text\"\r\n          value={wikiSearchTerms || \"\"}\r\n          onChange={changeWikiSearchTerms}\r\n          placeholder=\"Search Wikipedia Articles\"\r\n        />\r\n        <button type=\"submit\" onClick={useWikiSearchEngine}>\r\n          Search\r\n        </button>\r\n      </form>\r\n      <SwitchSpinner show={loading} size={50} />\r\n      {setWikiSearchReturnValues.length != 0 ? (\r\n        wikiSearchResults\r\n      ) : (\r\n        <p>Không có kết quả</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wikipedia;\r\n"]},"metadata":{},"sourceType":"module"}