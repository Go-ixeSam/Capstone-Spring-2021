{"ast":null,"code":"import _objectDestructuringEmpty from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectDestructuringEmpty\";import _defineProperty from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var _extraReducers;import JSONPLACEHOLDERApi from\"api/JSONPLACEHOLDERApi\";import*as variable from\"../../variables/Variables\";var _require=require(\"@reduxjs/toolkit\"),createSlice=_require.createSlice,createAsyncThunk=_require.createAsyncThunk;export var getDashboard=createAsyncThunk(\"dashboard/getDashboard\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return JSONPLACEHOLDERApi.getDashboard(null);case 2:result=_context.sent;return _context.abrupt(\"return\",result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());export var getTop10=createAsyncThunk(\"dashboard/getTop10\",/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return JSONPLACEHOLDERApi.getTop10(params);case 2:result=_context2.sent;return _context2.abrupt(\"return\",result);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}());export var getShareAndExchangeCompare=createAsyncThunk(\"dashboard/getShareAndExchangeCompare\",/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return JSONPLACEHOLDERApi.getShareAndExchangeCompare(params);case 2:result=_context3.sent;return _context3.abrupt(\"return\",result);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x5,_x6){return _ref3.apply(this,arguments);};}());/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */ /**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */var dashboardSlice=createSlice({name:\"dashboard\",initialState:{loading:false,// * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\nsuccess:false,// * trường này dùng để hiển thị pop up success nếu như gọi API thành công\nfail:false,//* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\nresult:[],error:\"\",updateDashboard:[{row:{cols:[{elementType:variable.input,elementConfig:{name:\"updateTime\",type:variable.select,labeltext:\"Thời gian xem báo cáo\",value:\"\"},validation:[],valid:{}}]}}]},reducers:{},// ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\nextraReducers:(_extraReducers={},_defineProperty(_extraReducers,getDashboard.fulfilled,function(state,action){state.result=action.payload;}),_defineProperty(_extraReducers,getDashboard.rejected,function(state){console.log(\"Dashboard lấy về ko thành công\");}),_defineProperty(_extraReducers,getDashboard.pending,function(state){console.log(\"Dashboard đang pending\");}),_extraReducers)});var dashboardReducer=dashboardSlice.reducer,actions=dashboardSlice.actions;//createSlice sẽ trả về cho ta 2 biến là reducer và action\n_objectDestructuringEmpty(actions);export{};export default dashboardReducer;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/redux/Dashboard/DashboardSlice.jsx"],"names":["JSONPLACEHOLDERApi","variable","require","createSlice","createAsyncThunk","getDashboard","params","thunkAPI","result","getTop10","getShareAndExchangeCompare","dashboardSlice","name","initialState","loading","success","fail","error","updateDashboard","row","cols","elementType","input","elementConfig","type","select","labeltext","value","validation","valid","reducers","extraReducers","fulfilled","state","action","payload","rejected","console","log","pending","dashboardReducer","reducer","actions"],"mappings":"ovBAAA,MAAOA,CAAAA,kBAAP,KAA+B,wBAA/B,CACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,2BAA1B,C,aAC0CC,OAAO,CAAC,kBAAD,C,CAAzCC,W,UAAAA,W,CAAaC,gB,UAAAA,gB,CAErB,MAAO,IAAMC,CAAAA,YAAY,CAAGD,gBAAgB,CAC1C,wBAD0C,0FAE1C,iBAAOE,MAAP,CAAeC,QAAf,mJACuBP,CAAAA,kBAAkB,CAACK,YAAnB,CAAgC,IAAhC,CADvB,QACQG,MADR,+CAESA,MAFT,wDAF0C,mEAArC,CAOP,MAAO,IAAMC,CAAAA,QAAQ,CAAGL,gBAAgB,CACtC,oBADsC,2FAEtC,kBAAOE,MAAP,CAAeC,QAAf,wJACuBP,CAAAA,kBAAkB,CAACS,QAAnB,CAA4BH,MAA5B,CADvB,QACQE,MADR,iDAESA,MAFT,0DAFsC,qEAAjC,CAOP,MAAO,IAAME,CAAAA,0BAA0B,CAAGN,gBAAgB,CACxD,sCADwD,2FAExD,kBAAOE,MAAP,CAAeC,QAAf,wJACuBP,CAAAA,kBAAkB,CAACU,0BAAnB,CAA8CJ,MAA9C,CADvB,QACQE,MADR,iDAESA,MAFT,0DAFwD,qEAAnD,CAQP;;;;IAMA;;;;GAMA,GAAMG,CAAAA,cAAc,CAAGR,WAAW,CAAC,CACjCS,IAAI,CAAE,WAD2B,CAEjCC,YAAY,CAAE,CACZC,OAAO,CAAE,KADG,CACI;AAChBC,OAAO,CAAE,KAFG,CAEI;AAChBC,IAAI,CAAE,KAHM,CAGC;AACbR,MAAM,CAAE,EAJI,CAKZS,KAAK,CAAE,EALK,CAMZC,eAAe,CAAE,CACf,CACEC,GAAG,CAAE,CACHC,IAAI,CAAE,CACJ,CACEC,WAAW,CAAEpB,QAAQ,CAACqB,KADxB,CAEEC,aAAa,CAAE,CACbX,IAAI,CAAE,YADO,CAEbY,IAAI,CAAEvB,QAAQ,CAACwB,MAFF,CAGbC,SAAS,CAAE,uBAHE,CAIbC,KAAK,CAAE,EAJM,CAFjB,CAQEC,UAAU,CAAE,EARd,CASEC,KAAK,CAAE,EATT,CADI,CADH,CADP,CADe,CANL,CAFmB,CA4BjCC,QAAQ,CAAE,EA5BuB,CA8BjC;AACAC,aAAa,mDACV1B,YAAY,CAAC2B,SADH,CACe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CAC3CD,KAAK,CAACzB,MAAN,CAAe0B,MAAM,CAACC,OAAtB,CACD,CAHU,iCAIV9B,YAAY,CAAC+B,QAJH,CAIc,SAACH,KAAD,CAAW,CAClCI,OAAO,CAACC,GAAR,CAAY,gCAAZ,EACD,CANU,iCAOVjC,YAAY,CAACkC,OAPH,CAOa,SAACN,KAAD,CAAW,CACjCI,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACD,CATU,iBA/BoB,CAAD,CAAlC,C,GA4CiBE,CAAAA,gB,CAA8B7B,c,CAAvC8B,O,CAA2BC,O,CAAY/B,c,CAAZ+B,O,CAA4B;0BAC7CA,O,WAClB,cAAeF,CAAAA,gBAAf","sourcesContent":["import JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport * as variable from \"../../variables/Variables\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nexport const getDashboard = createAsyncThunk(\r\n  \"dashboard/getDashboard\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getDashboard(null);\r\n    return result;\r\n  }\r\n);\r\nexport const getTop10 = createAsyncThunk(\r\n  \"dashboard/getTop10\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getTop10(params);\r\n    return result;\r\n  }\r\n);\r\nexport const getShareAndExchangeCompare = createAsyncThunk(\r\n  \"dashboard/getShareAndExchangeCompare\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getShareAndExchangeCompare(params);\r\n    return result;\r\n  }\r\n);\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\n\r\nconst dashboardSlice = createSlice({\r\n  name: \"dashboard\",\r\n  initialState: {\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    result: [],\r\n    error: \"\",\r\n    updateDashboard: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: \"updateTime\",\r\n                type: variable.select,\r\n                labeltext: \"Thời gian xem báo cáo\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {},\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getDashboard.fulfilled]: (state, action) => {\r\n      state.result = action.payload;\r\n    },\r\n    [getDashboard.rejected]: (state) => {\r\n      console.log(\"Dashboard lấy về ko thành công\");\r\n    },\r\n    [getDashboard.pending]: (state) => {\r\n      console.log(\"Dashboard đang pending\");\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: dashboardReducer, actions } = dashboardSlice; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const {} = actions;\r\nexport default dashboardReducer;\r\n"]},"metadata":{},"sourceType":"module"}