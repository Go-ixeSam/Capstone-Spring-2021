{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nimport * as variable from \"variables/Variables\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getToken } from \"redux/Selector/Selectors\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\"; // export function create () {\n//   const [token,setToken]=React.useState(useSelector(state=>getToken(state)))\n//   return [token]\n// }\n\nfunction useFriendStatus(friendID) {\n  const [token, setToken] = useState(\"\");\n  const result = useSelector(state => getToken(state));\n  useEffect(() => {\n    function handleStatusChange() {\n      setToken(result);\n    }\n\n    handleStatusChange();\n  });\n  return token;\n} // import persitorStore from \"redux/store\"\n// const {store}=persitorStore()\n// console.log(\"store nè\",store.getState().post)\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request-\n// config` for the full list of configs\n// console.log(\"store= \",store.getState().post)\n// export const getTokenFromStore=()=>{\n//   const [token,setToken]=useState(useSelector(state=>getToken(state)))\n//   return token\n// }\n\n\nconst axiosClient = axios.create({\n  baseURL: variable.jsonplaceholerAPI,\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  //   ! Việc parse param của asiox có hơi\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  return config;\n}); // * mỗi reponse ta sẽ phải thực hiện lấy\n\naxiosClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  throw error;\n});\nexport const axiosTeamClient = axios.create({\n  baseURL: variable.teamBaseURL,\n  headers: {\n    \"Content-type\": \"application/json\",\n    // Authorization: `Bearer ${token}`,\n    // Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjAxMjM0NTYyMjIiLCJBY2NvdW50SWQiOiIxMTY5NDBhNy01ZTdmLTQyNGQtYmNhNS05ZjQwZTRlZGI1NzkiLCJuYmYiOjE2MTg1NjMwOTAsImV4cCI6MTYxODgyMjI5MCwiaWF0IjoxNjE4NTYzMDkwfQ.S2SwNcsIni5iDUKIkfhhwP1TDKsjnTGq4ydwLu8M8cQ`,\n    \"Access-Control-Allow-Headers\": \"*\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosTeamClient.interceptors.request.use(async config => {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosTeamClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  throw error;\n});\n/**\r\n * * axios dành cho những apii cần token\r\n */\n\nexport const useAxios = () => {\n  const [axiosTeamClient, setAxiosTeamClient] = React.useState({});\n  const token = useSelector(state => getToken(state));\n  axiosTeamClient = axios.create({\n    baseURL: variable.teamBaseURL,\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n      \"Access-Control-Allow-Headers\": \"*\"\n    },\n    paramsSerializer: params => queryString.stringify(params)\n  });\n  axiosTeamClient.interceptors.request.use(async config => {\n    return config;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  axiosTeamClient.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    throw error;\n  });\n  React.useEffect(() => {\n    setAxiosTeamClient(axiosTeamClient);\n  }, []); // return [axiosTeamClient]\n\n  return axiosTeamClient;\n};\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\n\nexport const axiosWithoutToken = axios.create({\n  baseURL: variable.teamBaseURL,\n  headers: {\n    \"Content-type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // ! Xử lí phần authen token, mỗi api đề có cái này mới\n\naxiosWithoutToken.interceptors.request.use(async config => {\n  return config;\n});\naxiosWithoutToken.interceptors.response.use(response => {\n  response.headers = {\n    \"Access-Control-Allow-Origin\": \"*\"\n  };\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/api/axiosClient.js"],"names":["axios","queryString","variable","useDispatch","useSelector","getToken","React","useState","useEffect","useFriendStatus","friendID","token","setToken","result","state","handleStatusChange","axiosClient","create","baseURL","jsonplaceholerAPI","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","error","axiosTeamClient","teamBaseURL","Promise","reject","useAxios","setAxiosTeamClient","Authorization","axiosWithoutToken"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport * as variable from \"variables/Variables\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getToken } from \"redux/Selector/Selectors\";\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// export function create () {\r\n//   const [token,setToken]=React.useState(useSelector(state=>getToken(state)))\r\n//   return [token]\r\n// }\r\nfunction useFriendStatus(friendID) {\r\n  const [token, setToken] = useState(\"\");\r\n  const result = useSelector((state) => getToken(state));\r\n  useEffect(() => {\r\n    function handleStatusChange() {\r\n      setToken(result);\r\n    }\r\n    handleStatusChange();\r\n  });\r\n\r\n  return token;\r\n}\r\n// import persitorStore from \"redux/store\"\r\n// const {store}=persitorStore()\r\n// console.log(\"store nè\",store.getState().post)\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-\r\n// config` for the full list of configs\r\n\r\n// console.log(\"store= \",store.getState().post)\r\n// export const getTokenFromStore=()=>{\r\n//   const [token,setToken]=useState(useSelector(state=>getToken(state)))\r\n//   return token\r\n// }\r\nconst axiosClient = axios.create({\r\n  baseURL: variable.jsonplaceholerAPI,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  //   ! Việc parse param của asiox có hơi\r\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\r\n\r\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\r\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const axiosTeamClient = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    // Authorization: `Bearer ${token}`,\r\n    // Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjAxMjM0NTYyMjIiLCJBY2NvdW50SWQiOiIxMTY5NDBhNy01ZTdmLTQyNGQtYmNhNS05ZjQwZTRlZGI1NzkiLCJuYmYiOjE2MTg1NjMwOTAsImV4cCI6MTYxODgyMjI5MCwiaWF0IjoxNjE4NTYzMDkwfQ.S2SwNcsIni5iDUKIkfhhwP1TDKsjnTGq4ydwLu8M8cQ`,\r\n    \"Access-Control-Allow-Headers\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosTeamClient.interceptors.request.use(\r\n  async (config) => {\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosTeamClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\n/**\r\n * * axios dành cho những apii cần token\r\n */\r\nexport const useAxios = () => {\r\n  const [axiosTeamClient, setAxiosTeamClient] = React.useState({});\r\n  const token = useSelector((state) => getToken(state));\r\n  axiosTeamClient = axios.create({\r\n    baseURL: variable.teamBaseURL,\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n      \"Access-Control-Allow-Headers\": \"*\",\r\n    },\r\n    paramsSerializer: (params) => queryString.stringify(params),\r\n  });\r\n\r\n  axiosTeamClient.interceptors.request.use(\r\n    async (config) => {\r\n      return config;\r\n    },\r\n    function (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  axiosTeamClient.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      throw error;\r\n    }\r\n  );\r\n  React.useEffect(() => {\r\n    setAxiosTeamClient(axiosTeamClient);\r\n  }, []);\r\n  // return [axiosTeamClient]\r\n  return axiosTeamClient\r\n};\r\n\r\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\r\nexport const axiosWithoutToken = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n// ! Xử lí phần authen token, mỗi api đề có cái này mới\r\naxiosWithoutToken.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\naxiosWithoutToken.interceptors.response.use(\r\n  (response) => {\r\n    response.headers = {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    };\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}