{"ast":null,"code":"// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport * as variable from \"variables/Variables\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getToken } from \"redux/Selector/Selectors\"; // Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request-\n// config` for the full list of configs\n\nconst axiosClient = axios.create({\n  baseURL: variable.jsonplaceholerAPI,\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  //   ! Việc parse param của asiox có hơi\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  return config;\n}); // * mỗi reponse ta sẽ phải thực hiện lấy\n\naxiosClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  throw error;\n});\nexport const axiosTeamClient = axios.create({\n  baseURL: variable.teamBaseURL,\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // ! Xử lí phần authen token, mỗi api đề có cái này mới đc\n\naxiosTeamClient.interceptors.request.use(async config => {\n  //* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\n  const token = useSelector(state => getToken(state));\n  config.headers = {\n    Authorization: `Bearer ${token}`,\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  };\n  return config; // },\n  // (errorr) => {\n  //   Promise.reject(errorr);\n}); // * mỗi reponse ta sẽ phải thực hiện lấy\n\naxiosTeamClient.interceptors.response.use( //*reponse.data để lấy về json yêu cầu, ta thực hiện ở đây luôn cho lẹ\n// ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\nresponse => {\n  return response;\n}, error => {\n  // * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\n  // * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/api/axiosClient.js"],"names":["axios","queryString","variable","useDispatch","useSelector","getToken","axiosClient","create","baseURL","jsonplaceholerAPI","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","error","axiosTeamClient","teamBaseURL","token","state","Authorization","Accept"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,qBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,QAAR,QAAuB,0BAAvB,C,CACA;AAEA;AACA;;AAEA,MAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEN,QAAQ,CAACO,iBADa;AAE/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFsB;AAK/B;AACA;AAEA;AACA;AACAC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYX,WAAW,CAACY,SAAZ,CAAsBD,MAAtB;AAVC,CAAb,CAApB;AAYAN,WAAW,CAACQ,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACrD,SAAOA,MAAP;AACD,CAFD,E,CAIA;;AACAX,WAAW,CAACQ,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CACGE,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIGC,KAAD,IAAW;AACT,QAAMA,KAAN;AACD,CANH;AASA,OAAO,MAAMC,eAAe,GAAGpB,KAAK,CAACO,MAAN,CAAa;AAC1CC,EAAAA,OAAO,EAAEN,QAAQ,CAACmB,WADwB;AAE1CX,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFiC;AAK1CC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYX,WAAW,CAACY,SAAZ,CAAsBD,MAAtB;AALY,CAAb,CAAxB,C,CAQP;;AACAQ,eAAe,CAACN,YAAhB,CAA6BC,OAA7B,CAAqCC,GAArC,CAAyC,MAAOC,MAAP,IAAkB;AACzD;AACE,QAAMK,KAAK,GAAClB,WAAW,CAACmB,KAAK,IAAElB,QAAQ,CAACkB,KAAD,CAAhB,CAAvB;AACAN,EAAAA,MAAM,CAACP,OAAP,GAAiB;AACfc,IAAAA,aAAa,EAAG,UAASF,KAAM,EADhB;AAEfG,IAAAA,MAAM,EAAE,kBAFO;AAGf,oBAAgB;AAHD,GAAjB;AAKF,SAAOR,MAAP,CARyD,CASzD;AACA;AACA;AACD,CAZD,E,CAcA;;AACAG,eAAe,CAACN,YAAhB,CAA6BI,QAA7B,CAAsCF,GAAtC,EACE;AACA;AACCE,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CALH,EAMGC,KAAD,IAAW;AACT;AACA;AACA,QAAMA,KAAN;AACD,CAVH;AAaA,eAAeb,WAAf","sourcesContent":["// api/axiosClient.js\r\nimport axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport * as variable from \"variables/Variables\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {getToken} from \"redux/Selector/Selectors\"\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-\r\n// config` for the full list of configs\r\n\r\nconst axiosClient = axios.create({\r\n  baseURL: variable.jsonplaceholerAPI,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  //   ! Việc parse param của asiox có hơi\r\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\r\n\r\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\r\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const axiosTeamClient = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\n// ! Xử lí phần authen token, mỗi api đề có cái này mới đc\r\naxiosTeamClient.interceptors.request.use(async (config) => {\r\n  //* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\r\n    const token=useSelector(state=>getToken(state))\r\n    config.headers = {\r\n      Authorization: `Bearer ${token}`,\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n  return config;\r\n  // },\r\n  // (errorr) => {\r\n  //   Promise.reject(errorr);\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosTeamClient.interceptors.response.use(\r\n  //*reponse.data để lấy về json yêu cầu, ta thực hiện ở đây luôn cho lẹ\r\n  // ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\r\n    // * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}