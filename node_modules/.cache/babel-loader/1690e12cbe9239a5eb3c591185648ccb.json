{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nimport * as variable from \"variables/Variables\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getToken } from \"redux/Selector/Selectors\";\nimport { useState } from \"react\"; // import persitorStore from \"redux/store\"\n// const {store}=persitorStore()\n// console.log(\"store nè\",store.getState().post)\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request-\n// config` for the full list of configs\n// console.log(\"store= \",store.getState().post)\n\nexport const getTokenFromStore = () => {\n  const [token, setToken] = useState(useSelector(state => getToken(state)));\n  return token;\n};\nconst axiosClient = axios.create({\n  baseURL: variable.jsonplaceholerAPI,\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  //   ! Việc parse param của asiox có hơi\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  return config;\n}); // * mỗi reponse ta sẽ phải thực hiện lấy\n\naxiosClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  throw error;\n});\n/**\r\n * * axios dành cho những apii cần token\r\n */\n\nexport const axiosTeamClient = axios.create({\n  baseURL: variable.teamBaseURL,\n  headers: {\n    \"Content-type\": \"application/json\",\n    Authorization: `Bearer ${variable.token}`,\n    \"Access-Control-Allow-Headers\": \"*\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosTeamClient.interceptors.request.use(async config => {\n  //* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\n  // config.headers = {\n  //   Authorization: `Bearer ${variable.token}`,\n  // };\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // * mỗi reponse ta sẽ phải thực hiện lấy\n\naxiosTeamClient.interceptors.response.use( // ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\nresponse => {\n  return response;\n}, error => {\n  // * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\n  // * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\n  throw error;\n});\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\n\nexport const axiosWithoutToken = axios.create({\n  baseURL: variable.teamBaseURL,\n  headers: {\n    \"Content-type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // ! Xử lí phần authen token, mỗi api đề có cái này mới\n\naxiosWithoutToken.interceptors.request.use(async config => {\n  return config;\n});\naxiosWithoutToken.interceptors.response.use(response => {\n  response.headers = {\n    \"Access-Control-Allow-Origin\": \"*\"\n  };\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/api/axiosClient.js"],"names":["axios","queryString","variable","useDispatch","useSelector","getToken","useState","getTokenFromStore","token","setToken","state","axiosClient","create","baseURL","jsonplaceholerAPI","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","error","axiosTeamClient","teamBaseURL","Authorization","Promise","reject","axiosWithoutToken"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport * as variable from \"variables/Variables\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getToken } from \"redux/Selector/Selectors\";\r\nimport { useState } from \"react\";\r\n// import persitorStore from \"redux/store\"\r\n// const {store}=persitorStore()\r\n// console.log(\"store nè\",store.getState().post)\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-\r\n// config` for the full list of configs\r\n\r\n// console.log(\"store= \",store.getState().post)\r\nexport const getTokenFromStore=()=>{\r\n  const [token,setToken]=useState(useSelector(state=>getToken(state)))\r\n  return token\r\n}\r\nconst axiosClient = axios.create({\r\n  baseURL: variable.jsonplaceholerAPI,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  //   ! Việc parse param của asiox có hơi\r\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\r\n\r\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\r\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\n/**\r\n * * axios dành cho những apii cần token\r\n */\r\nexport const axiosTeamClient = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    Authorization: `Bearer ${variable.token}`,\r\n    \"Access-Control-Allow-Headers\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosTeamClient.interceptors.request.use(async (config) => {\r\n  //* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\r\n  // config.headers = {\r\n  //   Authorization: `Bearer ${variable.token}`,\r\n  // };\r\n  return config;\r\n},function (error){\r\n  return Promise.reject(error)\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosTeamClient.interceptors.response.use(\r\n  // ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\r\n    // * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\r\n    throw error;\r\n  }\r\n);\r\n\r\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\r\nexport const axiosWithoutToken = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n// ! Xử lí phần authen token, mỗi api đề có cái này mới\r\naxiosWithoutToken.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\naxiosWithoutToken.interceptors.response.use(\r\n  (response) => {\r\n    response.headers = {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    };\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}