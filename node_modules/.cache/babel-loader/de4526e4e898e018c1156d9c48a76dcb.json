{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { createPostData, convertDateToString, createAccountData, createHeader } from \"util/ContructorCreation\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n\n\nexport const getALL = createAsyncThunk(\"account/getFakeAPI\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.getAll(null);\n  return result;\n});\nexport const sharingDetail = createAsyncThunk(\"account/sharingDetail\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.shareDetail(params);\n  return result;\n});\n/**\r\n * * api trả về thông tin của cây dựa trên tên\r\n */\n\nexport const getPlantInfo = createAsyncThunk(\"account/getPlantInfo\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.getPlantInfo(params);\n  return result;\n});\nexport const login = createAsyncThunk(\"account/\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.getPlantInfo(params);\n  return result;\n});\nconst account = createSlice({\n  name: \"account\",\n  initialState: {\n    token: \"\",\n    accountData: [//  createAccountData(1,\"alive\",\"Khá bảnh\",\"samxxx@gmail.com\",\"08/17/1998\",\"Nam\",\"02/23/2021\",\"08081501\"),\n    //  createAccountData(2,\"dead\",\"Khong bảnh lắm\",\"samxxx@gmail.com\",\"02/17/1990\",\"Nam\",\"02/23/2021\",\"08081501\"),\n    //  createAccountData(3,\"alive\",\"Okiem \",\"samxxx@gmail.com\",\"01/17/1991\",\"Nữ\",\"02/23/2021\",\"08081501\"),\n    createAccountData(1, \"alive\", \"Khá bảnh\", \"02/23/2021\", 12), createAccountData(2, \"dead\", \"Khong bảnh lắm\", \"02/23/2021\", 23), createAccountData(3, \"alive\", \"Okiem \", \"02/23/2021\", 5)],\n    accountTableHeader: [createHeader(\"Người dùng\", false, true, variable.userName), createHeader(\"Ngày tạo\", false, true, variable.createDate), createHeader(\"Trạng thái\", false, true, variable.accoutStatus), // createHeader(\"ID\", true, false, variable.id),\n    createHeader(\"Số lượng report\", true, false, variable.numberOfReport) // {\n    //   id: \"email\",\n    //   numeric: true,\n    //   disablePadding: false,\n    //   label: [variable.email],\n    // },\n    // {\n    //   id: \"birthdate\",\n    //   numeric: true,\n    //   disablePadding: false,\n    //   label: [variable.birthDate],\n    // },\n    // {\n    //   id: \"sex\",\n    //   numeric: true,\n    //   disablePadding: false,\n    //   label: [variable.sex],\n    // },\n    // {\n    //   id: \"phone\",\n    //   numeric: true,\n    //   disablePadding: false,\n    //   label: [variable.phone],\n    // },\n    ],\n    current: {},\n    loading: false,\n    // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\n    success: false,\n    // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\n    fail: false,\n    //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\n    error: \"\",\n    signInForm: [{\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.username,\n            type: variable.text,\n            labeltext: \"User name\",\n            placeholder: \"Username\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }, {\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.password,\n            type: variable.password,\n            labeltext: \"\",\n            placeholder: \"Password\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }]\n  },\n  reducers: {\n    addContract: (state, action) => {\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\n      state.contracts.record.push(action.payload);\n    },\n    modifyContract: (state, action) => {\n      state.contracts.record = action.payload;\n    },\n    ModifyContractFomr: (state, action) => {\n      state.contractForm = action.payload;\n    }\n  },\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\n  extraReducers: {\n    [getALL.pending]: state => {\n      state.loading = true;\n      state.success = false;\n      state.fail = false;\n    },\n    [getALL.rejected]: (state, action) => {\n      // * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\n      state.error = action.error;\n      state.loading = false;\n      state.success = true;\n      state.fail = false;\n      state.current = action.payload;\n    },\n    [getALL.fulfilled]: (state, action) => {\n      // * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\n      state.loading = false;\n      state.success = true;\n      state.fail = false;\n      state.current = action.payload;\n    },\n    [getPlantInfo.pending]: state => {},\n    [getPlantInfo.rejected]: (state, action) => {},\n    [getPlantInfo.fulfilled]: (state, action) => {}\n  }\n});\nconst {\n  reducer: accountReducer,\n  actions\n} = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {\n  addContract,\n  modifyContract,\n  ModifyContractFomr\n} = actions;\nexport default accountReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Account/AccountSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","createSlice","createAsyncThunk","require","getALL","params","thunkAPI","result","getAll","sharingDetail","shareDetail","getPlantInfo","login","account","name","initialState","token","accountData","accountTableHeader","userName","createDate","accoutStatus","numberOfReport","current","loading","success","fail","error","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","addContract","state","action","contracts","record","push","payload","modifyContract","ModifyContractFomr","contractForm","extraReducers","pending","rejected","fulfilled","reducer","accountReducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const getALL = createAsyncThunk(\r\n  \"account/getFakeAPI\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getAll(null);\r\n    return result;\r\n  }\r\n);\r\n\r\nexport const sharingDetail = createAsyncThunk(\r\n  \"account/sharingDetail\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.shareDetail(params);\r\n    return result;\r\n  }\r\n);\r\n\r\n/**\r\n * * api trả về thông tin của cây dựa trên tên\r\n */\r\nexport const getPlantInfo = createAsyncThunk(\r\n  \"account/getPlantInfo\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getPlantInfo(params);\r\n    return result;\r\n  }\r\n);\r\nexport const login = createAsyncThunk(\r\n  \"account/\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getPlantInfo(params);\r\n    return result;\r\n  }\r\n);\r\n\r\n\r\nconst account = createSlice({\r\n  name: \"account\",\r\n  initialState: {\r\n    token:\"\",\r\n    accountData: [\r\n      //  createAccountData(1,\"alive\",\"Khá bảnh\",\"samxxx@gmail.com\",\"08/17/1998\",\"Nam\",\"02/23/2021\",\"08081501\"),\r\n      //  createAccountData(2,\"dead\",\"Khong bảnh lắm\",\"samxxx@gmail.com\",\"02/17/1990\",\"Nam\",\"02/23/2021\",\"08081501\"),\r\n      //  createAccountData(3,\"alive\",\"Okiem \",\"samxxx@gmail.com\",\"01/17/1991\",\"Nữ\",\"02/23/2021\",\"08081501\"),\r\n      createAccountData(1, \"alive\", \"Khá bảnh\", \"02/23/2021\",12),\r\n      createAccountData(2, \"dead\", \"Khong bảnh lắm\", \"02/23/2021\",23),\r\n      createAccountData(3, \"alive\", \"Okiem \", \"02/23/2021\",5),\r\n      \r\n    ],\r\n    accountTableHeader: [\r\n      createHeader(\"Người dùng\", false, true, variable.userName),\r\n      createHeader(\"Ngày tạo\", false, true, variable.createDate),\r\n      createHeader(\"Trạng thái\", false, true, variable.accoutStatus),\r\n      // createHeader(\"ID\", true, false, variable.id),\r\n      createHeader(\"Số lượng report\", true, false, variable.numberOfReport),\r\n      // {\r\n      //   id: \"email\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.email],\r\n      // },\r\n      // {\r\n      //   id: \"birthdate\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.birthDate],\r\n      // },\r\n      // {\r\n      //   id: \"sex\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.sex],\r\n      // },\r\n\r\n      // {\r\n      //   id: \"phone\",\r\n      //   numeric: true,\r\n      //   disablePadding: false,\r\n      //   label: [variable.phone],\r\n      // },\r\n    ],\r\n    current: {},\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    addContract: (state, action) => {\r\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\r\n      state.contracts.record.push(action.payload);\r\n    },\r\n    modifyContract: (state, action) => {\r\n      state.contracts.record = action.payload;\r\n    },\r\n    ModifyContractFomr: (state, action) => {\r\n      state.contractForm = action.payload;\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getALL.pending]: (state) => {\r\n      state.loading = true;\r\n      state.success = false;\r\n      state.fail = false;\r\n    },\r\n    [getALL.rejected]: (state, action) => {\r\n      // * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\r\n      state.error = action.error;\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.fail = false;\r\n      state.current = action.payload;\r\n    },\r\n    [getALL.fulfilled]: (state, action) => {\r\n      // * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\r\n      state.loading = false;\r\n      state.success = true;\r\n      state.fail = false;\r\n      state.current = action.payload;\r\n    },\r\n    [getPlantInfo.pending]: (state) => {},\r\n    [getPlantInfo.rejected]: (state, action) => {},\r\n    [getPlantInfo.fulfilled]: (state, action) => {},\r\n  },\r\n});\r\n\r\nconst { reducer: accountReducer, actions } = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addContract, modifyContract, ModifyContractFomr } = actions;\r\nexport default accountReducer;\r\n"]},"metadata":{},"sourceType":"module"}