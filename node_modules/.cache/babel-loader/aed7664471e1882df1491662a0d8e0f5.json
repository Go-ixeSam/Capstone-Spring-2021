{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { createPostData, convertDateToString, createAccountData, createHeader } from \"util/ContructorCreation\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n//* Hàm dùng để cập nhật ngưỡng báo cáo\n\n\nexport const updatePercentThreshold = createAsyncThunk(\"PrecentReport/put\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.login(params);\n  return result;\n}); //* Hàm dùng để load các ngưỡng báo cáo\n\nexport const getAllPercentReport = createAsyncThunk(\"PrecentReport/GetAll\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.login(null);\n  return result;\n});\nconst systemConfig = createSlice({\n  name: \"systemConfig\",\n  initialState: {\n    percentResult: [{\n      id: 1,\n      name: \"Phần trăm số lượng account\",\n      precent: 40\n    }, {\n      id: 2,\n      name: \"Phần trăm số lượng bài Post\",\n      precent: 30\n    }],\n    loading: false,\n    // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\n    success: false,\n    // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\n    fail: false,\n    //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\n    error: \"\",\n    selectedId: \"\",\n    percent: \"\",\n    systemConfigForm: [{\n      row: {\n        cols: [{\n          elementType: variable.select,\n          // Loại input\n          elementConfig: {\n            name: variable.percentName,\n            type: variable.select,\n            labeltext: \"Loại ngưỡng báo cáo\",\n            options: [],\n            value: \"\"\n          }\n        } // {\n        //   elementType: variable.input,\n        //   elementConfig: {\n        //     name: variable.percent,\n        //     type: variable.text,\n        //     labeltext: \"Phần trăm báo cáo\",\n        //     value: \"\",\n        //   },\n        // },\n        ]\n      }\n    }]\n  },\n  reducers: {\n    //   ! Hàm dùng để đưa các lựa chọn về loại percent vào form\n    addPercentReportName: (state, action) => {\n      //* Cái phần commend này là dùng để lấy từ API\n      //   state.systemConfigForm[0].row.cols[0].elementConfig.options =\n      //     action.payload;\n      let arra = [];\n      state.percentResult.map(percent => {\n        arra.push({\n          key: percent.name,\n          value: percent.id\n        });\n      });\n      state.systemConfigForm[0].row.cols[0].elementConfig.options = arra;\n    },\n    //* Hàm này dùng để lấy ra cái percent đúng với cái ID\n    getPercentById: (state, action) => {\n      state.percentResult.map(item => {\n        if (action.payload == item.id) {\n          state.percent = item.precent;\n        }\n      });\n    }\n  },\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\n  extraReducers: {\n    [getAllPercentReport.pending]: state => {\n      state.loading = true;\n    },\n    [getAllPercentReport.rejected]: (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    },\n    [getAllPercentReport.fulfilled]: (state, action) => {\n      state.percentResult = action.payload;\n      state.loading = false;\n    }\n  }\n});\nconst {\n  reducer: systemConfigReducer,\n  actions\n} = systemConfig; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {\n  addPercentReportName,\n  getPercentById\n} = actions;\nexport default systemConfigReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/SystemConfiguration/SystemConfigurationSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","createSlice","createAsyncThunk","require","updatePercentThreshold","params","thunkAPI","result","login","getAllPercentReport","systemConfig","name","initialState","percentResult","id","precent","loading","success","fail","error","selectedId","percent","systemConfigForm","row","cols","elementType","select","elementConfig","percentName","type","labeltext","options","value","reducers","addPercentReportName","state","action","arra","map","push","key","getPercentById","item","payload","extraReducers","pending","rejected","fulfilled","reducer","systemConfigReducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\n\r\n//* Hàm dùng để cập nhật ngưỡng báo cáo\r\nexport const updatePercentThreshold = createAsyncThunk(\r\n  \"PrecentReport/put\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.login(params);\r\n    return result;\r\n  }\r\n);\r\n\r\n//* Hàm dùng để load các ngưỡng báo cáo\r\nexport const getAllPercentReport = createAsyncThunk(\r\n  \"PrecentReport/GetAll\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.login(null);\r\n    return result;\r\n  }\r\n);\r\n\r\nconst systemConfig = createSlice({\r\n  name: \"systemConfig\",\r\n  initialState: {\r\n    percentResult: [\r\n      {\r\n        id: 1,\r\n        name: \"Phần trăm số lượng account\",\r\n        precent: 40,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Phần trăm số lượng bài Post\",\r\n        precent: 30,\r\n      },\r\n    ],\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    selectedId: \"\",\r\n    percent:\"\",\r\n    systemConfigForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.select, // Loại input\r\n              elementConfig: {\r\n                name: variable.percentName,\r\n                type: variable.select,\r\n                labeltext: \"Loại ngưỡng báo cáo\",\r\n                options: [],\r\n                value: \"\",\r\n              },\r\n            },\r\n            // {\r\n            //   elementType: variable.input,\r\n            //   elementConfig: {\r\n            //     name: variable.percent,\r\n            //     type: variable.text,\r\n            //     labeltext: \"Phần trăm báo cáo\",\r\n            //     value: \"\",\r\n            //   },\r\n            // },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    //   ! Hàm dùng để đưa các lựa chọn về loại percent vào form\r\n    addPercentReportName: (state, action) => {\r\n      //* Cái phần commend này là dùng để lấy từ API\r\n      //   state.systemConfigForm[0].row.cols[0].elementConfig.options =\r\n      //     action.payload;\r\n      let arra = [];\r\n      state.percentResult.map((percent) => {\r\n        arra.push({ key: percent.name, value: percent.id });\r\n      });\r\n      state.systemConfigForm[0].row.cols[0].elementConfig.options = arra;\r\n    },\r\n \r\n\r\n    //* Hàm này dùng để lấy ra cái percent đúng với cái ID\r\n    getPercentById: (state, action) => {\r\n        state.percentResult.map(item=>{\r\n            if(action.payload==item.id){\r\n                state.percent=item.precent\r\n            }\r\n        })\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getAllPercentReport.pending]: (state) => {\r\n      state.loading = true;\r\n    },\r\n    [getAllPercentReport.rejected]: (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    },\r\n    [getAllPercentReport.fulfilled]: (state, action) => {\r\n      state.percentResult = action.payload;\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: systemConfigReducer, actions } = systemConfig; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addPercentReportName,getPercentById } = actions;\r\nexport default systemConfigReducer;\r\n"]},"metadata":{},"sourceType":"module"}