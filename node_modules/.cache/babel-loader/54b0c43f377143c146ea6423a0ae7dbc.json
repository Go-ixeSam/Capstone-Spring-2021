{"ast":null,"code":"import _defineProperty from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var _extraReducers;// import ContractType from \"./contractType\";\nimport*as variable from\"../../variables/Variables\";import JSONPLACEHOLDERApi from\"api/JSONPLACEHOLDERApi\";var _require=require(\"@reduxjs/toolkit\"),createSlice=_require.createSlice,createAsyncThunk=_require.createAsyncThunk;/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */ /**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */export var getALL=createAsyncThunk(\"account/getFakeAPI\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,thunkAPI){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return JSONPLACEHOLDERApi.getAll(null);case 2:result=_context.sent;return _context.abrupt(\"return\",result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());var account=createSlice({name:\"account\",initialState:{current:{},loadingL:false,error:\"\",signInForm:[{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.username,type:variable.text,labeltext:\"User name\",placeholder:\"Username\",value:\"\"},validation:[],valid:{}}]}},{row:{cols:[{elementType:variable.input,elementConfig:{name:variable.password,type:variable.password,labeltext:\"\",placeholder:\"Password\",value:\"\"},validation:[],valid:{}}]}}]},reducers:{addContract:function addContract(state,action){/**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */state.contracts.record.push(action.payload);},modifyContract:function modifyContract(state,action){state.contracts.record=action.payload;},ModifyContractFomr:function ModifyContractFomr(state,action){state.contractForm=action.payload;}},// ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\nextraReducers:(_extraReducers={},_defineProperty(_extraReducers,getALL.pending,function(state){}),_defineProperty(_extraReducers,getALL.rejected,function(state,action){// * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\nstate.error=action.error;state.current=action.payload;}),_defineProperty(_extraReducers,getALL.fulfilled,function(state,action){// * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\nstate.current=action.payload;}),_extraReducers)});var accountReducer=account.reducer,actions=account.actions;//createSlice sẽ trả về cho ta 2 biến là reducer và action\nvar addContract=actions.addContract,modifyContract=actions.modifyContract,ModifyContractFomr=actions.ModifyContractFomr;export{addContract,modifyContract,ModifyContractFomr};export default accountReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Account/AccountSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","require","createSlice","createAsyncThunk","getALL","params","thunkAPI","getAll","result","account","name","initialState","current","loadingL","error","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","addContract","state","action","contracts","record","push","payload","modifyContract","ModifyContractFomr","contractForm","extraReducers","pending","rejected","fulfilled","accountReducer","reducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const getALL = createAsyncThunk(\r\n  \"account/getFakeAPI\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getAll(null);\r\n    return result;\r\n  }\r\n);\r\n\r\nconst account = createSlice({\r\n  name: \"account\",\r\n  initialState: {\r\n    current: {},\r\n    loadingL: false,\r\n    error: \"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    addContract: (state, action) => {\r\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\r\n      state.contracts.record.push(action.payload);\r\n    },\r\n    modifyContract: (state, action) => {\r\n      state.contracts.record = action.payload;\r\n    },\r\n    ModifyContractFomr: (state, action) => {\r\n      state.contractForm = action.payload;\r\n    },\r\n  },\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [getALL.pending]: (state) => {},\r\n    [getALL.rejected]: (state, action) => {\r\n      // * Thực hiện hành động gì đó ở store khi kết quả trả về không có dữ liệu như mong muốn\r\n      state.error = action.error;\r\n      state.current = action.payload;\r\n    },\r\n    [getALL.fulfilled]: (state, action) => {\r\n      // * Thực hiện hành động gì dó ở store khi kết quả có dữ liệu trả về thành công\r\n      state.current = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: accountReducer, actions } = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addContract, modifyContract, ModifyContractFomr } = actions;\r\nexport default accountReducer;\r\n"]},"metadata":{},"sourceType":"module"}