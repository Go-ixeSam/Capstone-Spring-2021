{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { createPostData, convertDateToString, createAccountData, createHeader } from \"util/ContructorCreation\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n\n\nexport const login = createAsyncThunk(\"login/\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.login(params);\n  return result;\n});\nconst account = createSlice({\n  name: \"login\",\n  initialState: {\n    token: \"\",\n    current: {},\n    loading: false,\n    // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\n    success: false,\n    // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\n    fail: false,\n    //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\n    error: \"\",\n    signInForm: [{\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.username,\n            type: variable.text,\n            labeltext: \"User name\",\n            placeholder: \"Username\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }, {\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.password,\n            type: variable.password,\n            labeltext: \"\",\n            placeholder: \"Password\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }]\n  },\n  reducers: {},\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\n  extraReducers: {\n    [login.pending]: state => {},\n    [login.rejected]: (state, action) => {\n      state.token = \"\";\n    },\n    [login.fulfilled]: (state, action) => {\n      console.log(\"actioon: \", action.payload);\n      state.token = action.payload;\n    }\n  }\n});\nconst {\n  reducer: loginReducer,\n  actions\n} = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {} = actions;\nexport default loginReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Login/LoginSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createPostData","convertDateToString","createAccountData","createHeader","createSlice","createAsyncThunk","require","login","params","thunkAPI","result","account","name","initialState","token","current","loading","success","fail","error","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","extraReducers","pending","state","rejected","action","fulfilled","console","log","payload","reducer","loginReducer","actions"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAZ,MAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,YAJF,QAKO,yBALP;;AAMA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;AAEA;;;;;;AAMA;;;;;;;AAKA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,CAAC,QAAD,EAAW,OAAOG,MAAP,EAAeC,QAAf,KAA4B;AAC1E,QAAMC,MAAM,GAAG,MAAMX,kBAAkB,CAACQ,KAAnB,CAAyBC,MAAzB,CAArB;AACA,SAAOE,MAAP;AACD,CAHoC,CAA9B;AAKP,MAAMC,OAAO,GAAGP,WAAW,CAAC;AAC1BQ,EAAAA,IAAI,EAAE,OADoB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,OAAO,EAAE,EAFG;AAGZC,IAAAA,OAAO,EAAE,KAHG;AAGI;AAChBC,IAAAA,OAAO,EAAE,KAJG;AAII;AAChBC,IAAAA,IAAI,EAAE,KALM;AAKC;AACbC,IAAAA,KAAK,EAAE,EANK;AAOZC,IAAAA,UAAU,EAAE,CACV;AACEC,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,WAAW,EAAEzB,QAAQ,CAAC0B,KADxB;AAEEC,UAAAA,aAAa,EAAE;AACbb,YAAAA,IAAI,EAAEd,QAAQ,CAAC4B,QADF;AAEbC,YAAAA,IAAI,EAAE7B,QAAQ,CAAC8B,IAFF;AAGbC,YAAAA,SAAS,EAAE,WAHE;AAIbC,YAAAA,WAAW,EAAE,UAJA;AAKbC,YAAAA,KAAK,EAAE;AALM,WAFjB;AASEC,UAAAA,UAAU,EAAE,EATd;AAUEC,UAAAA,KAAK,EAAE;AAVT,SADI;AADH;AADP,KADU,EAmBV;AACEZ,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,CACJ;AACEC,UAAAA,WAAW,EAAEzB,QAAQ,CAAC0B,KADxB;AAEEC,UAAAA,aAAa,EAAE;AACbb,YAAAA,IAAI,EAAEd,QAAQ,CAACoC,QADF;AAEbP,YAAAA,IAAI,EAAE7B,QAAQ,CAACoC,QAFF;AAGbL,YAAAA,SAAS,EAAE,EAHE;AAIbC,YAAAA,WAAW,EAAE,UAJA;AAKbC,YAAAA,KAAK,EAAE;AALM,WAFjB;AASEC,UAAAA,UAAU,EAAE,EATd;AAUEC,UAAAA,KAAK,EAAE;AAVT,SADI;AADH;AADP,KAnBU;AAPA,GAFY;AAgD1BE,EAAAA,QAAQ,EAAE,EAhDgB;AAkD1B;AACAC,EAAAA,aAAa,EAAE;AACb,KAAC7B,KAAK,CAAC8B,OAAP,GAAkBC,KAAD,IAAW,CAAE,CADjB;AAEb,KAAC/B,KAAK,CAACgC,QAAP,GAAkB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACnCF,MAAAA,KAAK,CAACxB,KAAN,GAAY,EAAZ;AACD,KAJY;AAKb,KAACP,KAAK,CAACkC,SAAP,GAAmB,CAACH,KAAD,EAAQE,MAAR,KAAmB;AACpCE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,MAAM,CAACI,OAA/B;AACAN,MAAAA,KAAK,CAACxB,KAAN,GAAY0B,MAAM,CAACI,OAAnB;AACD;AARY;AAnDW,CAAD,CAA3B;AA+DA,MAAM;AAAEC,EAAAA,OAAO,EAAEC,YAAX;AAAyBC,EAAAA;AAAzB,IAAqCpC,OAA3C,C,CAAoD;;AACpD,OAAO,MAAM,KAAKoC,OAAX;AACP,eAAeD,YAAf","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport {\r\n  createPostData,\r\n  convertDateToString,\r\n  createAccountData,\r\n  createHeader,\r\n} from \"util/ContructorCreation\";\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const login = createAsyncThunk(\"login/\", async (params, thunkAPI) => {\r\n  const result = await JSONPLACEHOLDERApi.login(params);\r\n  return result;\r\n});\r\n\r\nconst account = createSlice({\r\n  name: \"login\",\r\n  initialState: {\r\n    token: \"\",\r\n    current: {},\r\n    loading: false, // * trường này dùng để hiển thị pop up loading trong lúc dợi API trả về response\r\n    success: false, // * trường này dùng để hiển thị pop up success nếu như gọi API thành công\r\n    fail: false, //* trường này dùng để hiển thị pop up fail nếu như gọi API thất bại\r\n    error: \"\",\r\n    signInForm: [\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {},\r\n\r\n  // ! Với kết quả trả về đều sẽ có 3 trường là meta,data và error, ta viết ở dưới này để coi sẽ phải làm những gì cho từng loại kêt quả\r\n  extraReducers: {\r\n    [login.pending]: (state) => {},\r\n    [login.rejected]: (state, action) => {\r\n      state.token=\"\"\r\n    },\r\n    [login.fulfilled]: (state, action) => {\r\n      console.log(\"actioon: \",action.payload)\r\n      state.token=action.payload\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: loginReducer, actions } = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const {} = actions;\r\nexport default loginReducer;\r\n"]},"metadata":{},"sourceType":"module"}