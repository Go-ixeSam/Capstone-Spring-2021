{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"E:\\\\light-bootstrap-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";// api/axiosClient.js\nimport axios from\"axios\";import queryString from\"query-string\";import*as variable from\"variables/Variables\";import{useDispatch,useSelector}from\"react-redux\";import{getToken}from\"redux/Selector/Selectors\";// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request-\n// config` for the full list of configs\nvar axiosClient=axios.create({baseURL:variable.jsonplaceholerAPI,headers:{\"content-type\":\"application/json\"},//   ! Việc parse param của asiox có hơi\n// !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\n//? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\n//?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\nparamsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});axiosClient.interceptors.request.use(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",config);case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());// * mỗi reponse ta sẽ phải thực hiện lấy\naxiosClient.interceptors.response.use(function(response){return response;},function(error){throw error;});export var axiosTeamClient=axios.create({baseURL:variable.teamBaseURL,headers:{\"Content-type\":\"application/json\",Authorization:\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjAxMjM0NTY3ODkiLCJBY2NvdW50SWQiOiJjMjFmOGViYy1mMjNjLTQ2OTItOTI1My0yMWI5OGUwNzJjYWIiLCJuYmYiOjE2MTU5ODc3NzcsImV4cCI6MTYxNjI0Njk3NywiaWF0IjoxNjE1OTg3Nzc3fQ.G9H_djVdX-zXEQAYlMhH-oJZY1eB0A9PJdGADtV5bLs\"},paramsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */export var axiosWithoutToken=axios.create({baseURL:variable.teamBaseURL,headers:{\"Content-type\":\"application/json\"},paramsSerializer:function paramsSerializer(params){return queryString.stringify(params);}});// ! Xử lí phần authen token, mỗi api đề có cái này mới\naxiosWithoutToken.interceptors.request.use(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",config);case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());axiosWithoutToken.interceptors.response.use(function(response){return response;},function(error){throw error;});axiosTeamClient.interceptors.request.use(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(config){var token;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0://* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\ntoken=useSelector(function(state){return getToken(state);});config.headers={Authorization:\"Bearer \".concat(token)// Accept: \"application/json\",\n// \"Content-Type\": \"application/x-www-form-urlencoded\",\n};return _context3.abrupt(\"return\",config);case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}());// * mỗi reponse ta sẽ phải thực hiện lấy\naxiosTeamClient.interceptors.response.use(//*reponse.data để lấy về json yêu cầu, ta thực hiện ở đây luôn cho lẹ\n// ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\nfunction(response){return response;},function(error){// * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\n// * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\nthrow error;});export default axiosClient;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/api/axiosClient.js"],"names":["axios","queryString","variable","useDispatch","useSelector","getToken","axiosClient","create","baseURL","jsonplaceholerAPI","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","error","axiosTeamClient","teamBaseURL","Authorization","axiosWithoutToken","token","state"],"mappings":"yUAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,qBAA1B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,QAAT,KAAyB,0BAAzB,CACA;AAEA;AACA;AAEA,GAAMC,CAAAA,WAAW,CAAGN,KAAK,CAACO,MAAN,CAAa,CAC/BC,OAAO,CAAEN,QAAQ,CAACO,iBADa,CAE/BC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFsB,CAK/B;AACA;AAEA;AACA;AACAC,gBAAgB,CAAE,0BAACC,MAAD,QAAYX,CAAAA,WAAW,CAACY,SAAZ,CAAsBD,MAAtB,CAAZ,EAVa,CAAb,CAApB,CAYAN,WAAW,CAACQ,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,0FAAqC,iBAAOC,MAAP,kJAC5BA,MAD4B,wDAArC,gEAIA;AACAX,WAAW,CAACQ,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CACE,SAACE,QAAD,CAAc,CACZ,MAAOA,CAAAA,QAAP,CACD,CAHH,CAIE,SAACC,KAAD,CAAW,CACT,KAAMA,CAAAA,KAAN,CACD,CANH,EASA,MAAO,IAAMC,CAAAA,eAAe,CAAGpB,KAAK,CAACO,MAAN,CAAa,CAC1CC,OAAO,CAAEN,QAAQ,CAACmB,WADwB,CAE1CX,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPY,aAAa,CACX,wQAHK,CAFiC,CAO1CX,gBAAgB,CAAE,0BAACC,MAAD,QAAYX,CAAAA,WAAW,CAACY,SAAZ,CAAsBD,MAAtB,CAAZ,EAPwB,CAAb,CAAxB,CAUP;;GAGA,MAAO,IAAMW,CAAAA,iBAAiB,CAAGvB,KAAK,CAACO,MAAN,CAAa,CAC5CC,OAAO,CAAEN,QAAQ,CAACmB,WAD0B,CAE5CX,OAAO,CAAE,CACP,eAAgB,kBADT,CAFmC,CAK5CC,gBAAgB,CAAE,0BAACC,MAAD,QAAYX,CAAAA,WAAW,CAACY,SAAZ,CAAsBD,MAAtB,CAAZ,EAL0B,CAAb,CAA1B,CAQP;AACAW,iBAAiB,CAACT,YAAlB,CAA+BC,OAA/B,CAAuCC,GAAvC,2FAA2C,kBAAOC,MAAP,uJAClCA,MADkC,0DAA3C,kEAGAM,iBAAiB,CAACT,YAAlB,CAA+BI,QAA/B,CAAwCF,GAAxC,CACE,SAACE,QAAD,CAAc,CACZ,MAAOA,CAAAA,QAAP,CACD,CAHH,CAIE,SAACC,KAAD,CAAW,CACT,KAAMA,CAAAA,KAAN,CACD,CANH,EASAC,eAAe,CAACN,YAAhB,CAA6BC,OAA7B,CAAqCC,GAArC,2FAAyC,kBAAOC,MAAP,gIACvC;AACMO,KAFiC,CAEzBpB,WAAW,CAAC,SAACqB,KAAD,QAAWpB,CAAAA,QAAQ,CAACoB,KAAD,CAAnB,EAAD,CAFc,CAGvCR,MAAM,CAACP,OAAP,CAAiB,CACfY,aAAa,kBAAYE,KAAZ,CACb;AACA;AAHe,CAAjB,CAHuC,iCAQhCP,MARgC,0DAAzC,kEAcA;AACAG,eAAe,CAACN,YAAhB,CAA6BI,QAA7B,CAAsCF,GAAtC,CACE;AACA;AACA,SAACE,QAAD,CAAc,CACZ,MAAOA,CAAAA,QAAP,CACD,CALH,CAME,SAACC,KAAD,CAAW,CACT;AACA;AACA,KAAMA,CAAAA,KAAN,CACD,CAVH,EAaA,cAAeb,CAAAA,WAAf","sourcesContent":["// api/axiosClient.js\r\nimport axios from \"axios\";\r\nimport queryString from \"query-string\";\r\nimport * as variable from \"variables/Variables\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getToken } from \"redux/Selector/Selectors\";\r\n// Set up default config for http requests here\r\n\r\n// Please have a look at here `https://github.com/axios/axios#request-\r\n// config` for the full list of configs\r\n\r\nconst axiosClient = axios.create({\r\n  baseURL: variable.jsonplaceholerAPI,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  //   ! Việc parse param của asiox có hơi\r\n  // !vấn đề nên ta sẽ sử dụng query string để xủ lí việc này\r\n\r\n  //? Ví dụ như ta phải viét query stirng thế này : ?userid=\"\"&password=\"\". Khá là mệt,\r\n  //?dùng cái thư việ này ta chỉ cần bỏ param vào thôi, còn lại nó sẽ tự chuyển thành query trên\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport const axiosTeamClient = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    Authorization:\r\n      \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjAxMjM0NTY3ODkiLCJBY2NvdW50SWQiOiJjMjFmOGViYy1mMjNjLTQ2OTItOTI1My0yMWI5OGUwNzJjYWIiLCJuYmYiOjE2MTU5ODc3NzcsImV4cCI6MTYxNjI0Njk3NywiaWF0IjoxNjE1OTg3Nzc3fQ.G9H_djVdX-zXEQAYlMhH-oJZY1eB0A9PJdGADtV5bLs\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\n/**\r\n * * Axios dành riêng cho những api ko cần token\r\n */\r\nexport const axiosWithoutToken = axios.create({\r\n  baseURL: variable.teamBaseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\n// ! Xử lí phần authen token, mỗi api đề có cái này mới\r\naxiosWithoutToken.interceptors.request.use(async (config) => {\r\n  return config;\r\n});\r\naxiosWithoutToken.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    throw error;\r\n  }\r\n);\r\n\r\naxiosTeamClient.interceptors.request.use(async (config) => {\r\n  //* Phần token ta sẽ lấy ở store sau khi user đăng nhập thành công =)\r\n  const token = useSelector((state) => getToken(state));\r\n  config.headers = {\r\n    Authorization: `Bearer ${token}`,\r\n    // Accept: \"application/json\",\r\n    // \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  };\r\n  return config;\r\n  // },\r\n  // (errorr) => {\r\n  //   Promise.reject(errorr);\r\n});\r\n\r\n// * mỗi reponse ta sẽ phải thực hiện lấy\r\naxiosTeamClient.interceptors.response.use(\r\n  //*reponse.data để lấy về json yêu cầu, ta thực hiện ở đây luôn cho lẹ\r\n  // ! nghĩ lại thì ta cần nhiều thư hơn đơn thuần là data\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // * Nếu ta muốn xem cái này thì ở kết quả trả về ta .error thì ta sẽ thấy rõ\r\n    // * Và nếu muốn xem status code thì ở .request cũng sẽ có đủ\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}