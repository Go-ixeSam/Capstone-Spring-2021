{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\n\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\n\n\nexport const getALL = createAsyncThunk(\"account/getFakeAPI\", async (params, thunkAPI) => {\n  const result = await JSONPLACEHOLDERApi.getAll(null);\n  console.log(\"result= \", result);\n  return result;\n});\nconst account = createSlice({\n  name: \"account\",\n  initialState: {\n    current: {},\n    loadingL: false,\n    error: \"\",\n    signInForm: [{\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.username,\n            type: variable.text,\n            labeltext: \"User name\",\n            placeholder: \"Username\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }, {\n      row: {\n        cols: [{\n          elementType: variable.input,\n          elementConfig: {\n            name: variable.password,\n            type: variable.password,\n            labeltext: \"\",\n            placeholder: \"Password\",\n            value: \"\"\n          },\n          validation: [],\n          valid: {}\n        }]\n      }\n    }]\n  },\n  reducers: {\n    addContract: (state, action) => {\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\n      state.contracts.record.push(action.payload);\n    },\n    modifyContract: (state, action) => {\n      state.contracts.record = action.payload;\n    },\n    ModifyContractFomr: (state, action) => {\n      state.contractForm = action.payload;\n    }\n  },\n  extraReducers: {\n    [getALL.pending]: state => {},\n    [getALL.rejected]: (state, action) => {\n      state.error = action.error;\n    },\n    [getALL.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    }\n  }\n});\nconst {\n  reducer: accountReducer,\n  actions\n} = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {\n  addContract,\n  modifyContract,\n  ModifyContractFomr\n} = actions;\nexport default accountReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Account/AccountSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","createSlice","createAsyncThunk","require","getALL","params","thunkAPI","result","getAll","console","log","account","name","initialState","current","loadingL","error","signInForm","row","cols","elementType","input","elementConfig","username","type","text","labeltext","placeholder","value","validation","valid","password","reducers","addContract","state","action","contracts","record","push","payload","modifyContract","ModifyContractFomr","contractForm","extraReducers","pending","rejected","fulfilled","reducer","accountReducer","actions"],"mappings":"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","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n/**\r\n * * Có một chút khác biệt khi ta tạo async action,\r\n * * thay vì hồi trước slice mà ta tạo ra sẽ cho ta 2 biến là reducer và actions thì\r\n * * bây h ta ko để actions tổn ngổn vậy nữa mà sẽ export ra thằng cái async action nào cần luônluôn\r\n */\r\n\r\n/**\r\n * * tham số đầu sẽ là param mà ta muốn pass vào cái hàm này\r\n * * cái tiếp theo là một thứ mà hàm 'createAsyncThunk' cung cấp cho phép ta đc dispatch những\r\n * * action ở các nơi khác để dùng trong hàm này: thunkAPI.dispatch()\r\n */\r\nexport const getALL = createAsyncThunk(\r\n  \"account/getFakeAPI\",\r\n  async (params, thunkAPI) => {\r\n    const result = await JSONPLACEHOLDERApi.getAll(null);\r\n    console.log(\"result= \",result)\r\n    return result;\r\n  }\r\n);\r\n\r\nconst account = createSlice({\r\n  name: \"account\",\r\n  initialState: {\r\n    current: {},\r\n    loadingL: false,\r\n    error: \"\",\r\n    signInForm:[\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.username,\r\n                type: variable.text,\r\n                labeltext: \"User name\",\r\n                placeholder: \"Username\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        row: {\r\n          cols: [\r\n            {\r\n              elementType: variable.input,\r\n              elementConfig: {\r\n                name: variable.password,\r\n                type: variable.password,\r\n                labeltext: \"\",\r\n                placeholder: \"Password\",\r\n                value: \"\",\r\n              },\r\n              validation: [],\r\n              valid: {},\r\n            },\r\n          ],\r\n        },\r\n      }\r\n    ]\r\n  },\r\n  reducers: {\r\n    addContract: (state, action) => {\r\n      /**\r\n       * ! reduxtoolkit đã tích hợp sẵn bộ immer cho phép ta mutate state trực tiếp\r\n       * * Ở trước giao diện ta viết mutate trực tiếp nhưng thật ra behind the sence\r\n       * * immer vẫn sẽ clone ra một object mới và chỉnh sửa rồi return như ta hay làm\r\n       * *\r\n       */\r\n      state.contracts.record.push(action.payload);\r\n    },\r\n    modifyContract: (state, action) => {\r\n      state.contracts.record = action.payload;\r\n    },\r\n    ModifyContractFomr: (state, action) => {\r\n      state.contractForm = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getALL.pending]: (state) => {},\r\n    [getALL.rejected]: (state, action) => {\r\n      state.error = action.error;\r\n    },\r\n    [getALL.fulfilled]: (state, action) => {\r\n      state.current = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: accountReducer, actions } = account; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addContract, modifyContract, ModifyContractFomr } = actions;\r\nexport default accountReducer;\r\n"]},"metadata":{},"sourceType":"module"}