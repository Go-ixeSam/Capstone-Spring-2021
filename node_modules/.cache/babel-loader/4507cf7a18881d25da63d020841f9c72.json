{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\nvar util = require('./util');\n\nvar binarySearch = require('./binary-search');\n\nvar ArraySet = require('./array-set').ArraySet;\n\nvar base64VLQ = require('./base64-vlq');\n\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n};\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\n\n\nSourceMapConsumer.prototype._version = 3; // `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\n\n\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n/**\r\n * Iterate over each mapping between an original source/line/column and a\r\n * generated line/column in this source map.\r\n *\r\n * @param Function aCallback\r\n *        The function that is called with each mapping.\r\n * @param Object aContext\r\n *        Optional. If specified, this object will be the value of `this` every\r\n *        time that `aCallback` is called.\r\n * @param aOrder\r\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\r\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\r\n *        iterate over the mappings sorted by the generated file's line/column\r\n *        order or the original's source/line/column order, respectively. Defaults to\r\n *        `SourceMapConsumer.GENERATED_ORDER`.\r\n */\n\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n\n  var sourceRoot = this.sourceRoot;\n  mappings.map(function (mapping) {\n    var source = mapping.source === null ? null : this._sources.at(mapping.source);\n    source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n    return {\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : this._names.at(mapping.name)\n    };\n  }, this).forEach(aCallback, context);\n};\n/**\r\n * Returns all generated line and column information for the original source,\r\n * line, and column provided. If no column is provided, returns all mappings\r\n * corresponding to a either the line we are searching for or the next\r\n * closest line that has any mappings. Otherwise, returns all mappings\r\n * corresponding to the given line and either the column we are searching for\r\n * or the next closest column that has any offsets.\r\n *\r\n * The only argument is an object with the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number is 1-based.\r\n *   - column: Optional. the column number in the original source.\r\n *    The column number is 0-based.\r\n *\r\n * and an array of objects is returned, each with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *    line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *    The column number is 0-based.\r\n */\n\n\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line'); // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n  needle.source = this._findSourceIndex(needle.source);\n\n  if (needle.source < 0) {\n    return [];\n  }\n\n  var mappings = [];\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n\n  return mappings;\n};\n\nexports.SourceMapConsumer = SourceMapConsumer;\n/**\r\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\r\n * query for information about the original file positions by giving it a file\r\n * position in the generated source.\r\n *\r\n * The first parameter is the raw source map (either as a JSON string, or\r\n * already parsed to an object). According to the spec, source maps have the\r\n * following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - sources: An array of URLs to the original source files.\r\n *   - names: An array of identifiers which can be referrenced by individual mappings.\r\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n *   - sourcesContent: Optional. An array of contents of the original source files.\r\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *\r\n * Here is an example source map, taken from the source map spec[0]:\r\n *\r\n *     {\r\n *       version : 3,\r\n *       file: \"out.js\",\r\n *       sourceRoot : \"\",\r\n *       sources: [\"foo.js\", \"bar.js\"],\r\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *       mappings: \"AA,AB;;ABCDE;\"\r\n *     }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\r\n */\n\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources'); // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null); // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources.map(String) // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize) // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  }); // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n/**\r\n * Utility function to find the index of a source.  Returns -1 if not\r\n * found.\r\n */\n\nBasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {\n  var relativeSource = aSource;\n\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  } // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n\n\n  var i;\n\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\r\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\r\n *\r\n * @param SourceMapGenerator aSourceMap\r\n *        The source map that will be consumed.\r\n * @param String aSourceMapURL\r\n *        The URL at which the source map can be found (optional)\r\n * @returns BasicSourceMapConsumer\r\n */\n\n\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file;\n  smc._sourceMapURL = aSourceMapURL;\n  smc._absoluteSources = smc._sources.toArray().map(function (s) {\n    return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n  }); // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n\n      destOriginalMappings.push(destMapping);\n    }\n\n    destGeneratedMappings.push(destMapping);\n  }\n\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\n\n\nBasicSourceMapConsumer.prototype._version = 3;\n/**\r\n * The list of original sources.\r\n */\n\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n/**\r\n * Provide the JIT with a nice shape / hidden class.\r\n */\n\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\n\n\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine; // Because each offset is encoded relative to the previous one,\n      // many segments often have the same encoding. We can exploit this\n      // fact by caching the parsed variable length fields of each segment,\n      // allowing us to avoid a second parse if we encounter the same\n      // segment again.\n\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n\n      str = aStr.slice(index, end);\n      segment = cachedSegments[str];\n\n      if (segment) {\n        index += str.length;\n      } else {\n        segment = [];\n\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        cachedSegments[str] = segment;\n      } // Generated column.\n\n\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1]; // Original line.\n\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine; // Lines are stored 0-based\n\n        mapping.originalLine += 1; // Original column.\n\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n\n      generatedMappings.push(mapping);\n\n      if (typeof mapping.originalLine === 'number') {\n        originalMappings.push(mapping);\n      }\n    }\n  }\n\n  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n  this.__generatedMappings = generatedMappings;\n  quickSort(originalMappings, util.compareByOriginalPositions);\n  this.__originalMappings = originalMappings;\n};\n/**\r\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\r\n * we are searching for in the given \"haystack\" of mappings.\r\n */\n\n\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n/**\r\n * Compute the last column for each generated mapping. The last column is\r\n * inclusive.\r\n */\n\n\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index]; // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    } // The last mapping for each line spans the entire line.\n\n\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\n\n\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n\n      if (source !== null) {\n        source = this._sources.at(source);\n        source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n      }\n\n      var name = util.getArg(mapping, 'name', null);\n\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\n\n\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\n\n\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n\n  var index = this._findSourceIndex(aSource);\n\n  if (index >= 0) {\n    return this.sourcesContent[index];\n  }\n\n  var relativeSource = aSource;\n\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  var url;\n\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n    }\n  } // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n};\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\n\n\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n  source = this._findSourceIndex(source);\n\n  if (source < 0) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n/**\r\n * An IndexedSourceMapConsumer instance represents a parsed source map which\r\n * we can query for information. It differs from BasicSourceMapConsumer in\r\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\r\n * input.\r\n *\r\n * The first parameter is a raw source map (either as a JSON string, or already\r\n * parsed to an object). According to the spec for indexed source maps, they\r\n * have the following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *   - sections: A list of section definitions.\r\n *\r\n * Each value under the \"sections\" field has two fields:\r\n *   - offset: The offset into the original specified at which this section\r\n *       begins to apply, defined as an object with a \"line\" and \"column\"\r\n *       field.\r\n *   - map: A source map definition. This source map could also be indexed,\r\n *       but doesn't have to be.\r\n *\r\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\r\n * specifying a URL to retrieve a source map from, but that's currently\r\n * unsupported.\r\n *\r\n * Here's an example source map, taken from the source map spec[0], but\r\n * modified to omit a section which uses the \"url\" field.\r\n *\r\n *  {\r\n *    version : 3,\r\n *    file: \"app.js\",\r\n *    sections: [{\r\n *      offset: {line:100, column:10},\r\n *      map: {\r\n *        version : 3,\r\n *        file: \"section.js\",\r\n *        sources: [\"foo.js\", \"bar.js\"],\r\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *        mappings: \"AAAA,E;;ABCDE;\"\r\n *      }\r\n *    }],\r\n *  }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\r\n */\n\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    };\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\n\nIndexedSourceMapConsumer.prototype._version = 3;\n/**\r\n * The list of original sources.\r\n */\n\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n\n    return sources;\n  }\n});\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\n\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  }; // Find the section containing the generated position we're trying to map\n  // to an original position.\n\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n\n    if (cmp) {\n      return cmp;\n    }\n\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\n\n\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\n\n\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n\n    if (content) {\n      return content;\n    }\n  }\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based. \r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\n\n\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i]; // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n\n    if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n\n  return {\n    line: null,\n    column: null\n  };\n};\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\n\n\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n\n      var source = section.consumer._sources.at(mapping.source);\n\n      source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n\n      this._sources.add(source);\n\n      source = this._sources.indexOf(source);\n      var name = null;\n\n      if (mapping.name) {\n        name = section.consumer._names.at(mapping.name);\n\n        this._names.add(name);\n\n        name = this._names.indexOf(name);\n      } // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n\n\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n\n      this.__generatedMappings.push(adjustedMapping);\n\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/node_modules/source-map-support/node_modules/source-map/lib/source-map-consumer.js"],"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","aSourceMapURL","sourceMap","parseSourceMapInput","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","configurable","enumerable","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","computeSourceURL","_sourceMapURL","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","_findSourceIndex","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sources","names","sourcesContent","file","normalize","String","isAbsolute","relative","fromArray","_absoluteSources","toArray","s","create","consumer","aSource","relativeSource","has","indexOf","i","length","SourceMapConsumer_fromSourceMap","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","Mapping","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","nullOnMissing","url","urlParse","fileUriAbsPath","replace","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"mappings":"AAAA;;AACA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,QAAtC;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAP,CAAwBI,SAAxC;;AAEA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,aAAvC,EAAsD;AACpD,MAAIC,SAAS,GAAGF,UAAhB;;AACA,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCE,IAAAA,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;AACD;;AAED,SAAOE,SAAS,CAACE,QAAV,IAAsB,IAAtB,GACH,IAAIC,wBAAJ,CAA6BH,SAA7B,EAAwCD,aAAxC,CADG,GAEH,IAAIK,sBAAJ,CAA2BJ,SAA3B,EAAsCD,aAAtC,CAFJ;AAGD;;AAEDF,iBAAiB,CAACQ,aAAlB,GAAkC,UAASP,UAAT,EAAqBC,aAArB,EAAoC;AACpE,SAAOK,sBAAsB,CAACC,aAAvB,CAAqCP,UAArC,EAAiDC,aAAjD,CAAP;AACD,CAFD;AAIA;;;;;AAGAF,iBAAiB,CAACS,SAAlB,CAA4BC,QAA5B,GAAuC,CAAvC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,iBAAiB,CAACS,SAAlB,CAA4BE,mBAA5B,GAAkD,IAAlD;AACAC,MAAM,CAACC,cAAP,CAAsBb,iBAAiB,CAACS,SAAxC,EAAmD,oBAAnD,EAAyE;AACvEK,EAAAA,YAAY,EAAE,IADyD;AAEvEC,EAAAA,UAAU,EAAE,IAF2D;AAGvEC,EAAAA,GAAG,EAAE,YAAY;AACf,QAAI,CAAC,KAAKL,mBAAV,EAA+B;AAC7B,WAAKM,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,KAAKC,UAAzC;AACD;;AAED,WAAO,KAAKR,mBAAZ;AACD;AATsE,CAAzE;AAYAX,iBAAiB,CAACS,SAAlB,CAA4BW,kBAA5B,GAAiD,IAAjD;AACAR,MAAM,CAACC,cAAP,CAAsBb,iBAAiB,CAACS,SAAxC,EAAmD,mBAAnD,EAAwE;AACtEK,EAAAA,YAAY,EAAE,IADwD;AAEtEC,EAAAA,UAAU,EAAE,IAF0D;AAGtEC,EAAAA,GAAG,EAAE,YAAY;AACf,QAAI,CAAC,KAAKI,kBAAV,EAA8B;AAC5B,WAAKH,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,KAAKC,UAAzC;AACD;;AAED,WAAO,KAAKC,kBAAZ;AACD;AATqE,CAAxE;;AAYApB,iBAAiB,CAACS,SAAlB,CAA4BY,uBAA5B,GACE,SAASC,wCAAT,CAAkDC,IAAlD,EAAwDC,KAAxD,EAA+D;AAC7D,MAAIC,CAAC,GAAGF,IAAI,CAACG,MAAL,CAAYF,KAAZ,CAAR;AACA,SAAOC,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAA1B;AACD,CAJH;AAMA;;;;;;;AAKAzB,iBAAiB,CAACS,SAAlB,CAA4BQ,cAA5B,GACE,SAASU,+BAAT,CAAyCJ,IAAzC,EAA+CK,WAA/C,EAA4D;AAC1D,QAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD,CAHH;;AAKA7B,iBAAiB,CAAC8B,eAAlB,GAAoC,CAApC;AACA9B,iBAAiB,CAAC+B,cAAlB,GAAmC,CAAnC;AAEA/B,iBAAiB,CAACgC,oBAAlB,GAAyC,CAAzC;AACAhC,iBAAiB,CAACiC,iBAAlB,GAAsC,CAAtC;AAEA;;;;;;;;;;;;;;;;;AAgBAjC,iBAAiB,CAACS,SAAlB,CAA4ByB,WAA5B,GACE,SAASC,6BAAT,CAAuCC,SAAvC,EAAkDC,QAAlD,EAA4DC,MAA5D,EAAoE;AAClE,MAAIC,OAAO,GAAGF,QAAQ,IAAI,IAA1B;AACA,MAAIG,KAAK,GAAGF,MAAM,IAAItC,iBAAiB,CAAC8B,eAAxC;AAEA,MAAIW,QAAJ;;AACA,UAAQD,KAAR;AACA,SAAKxC,iBAAiB,CAAC8B,eAAvB;AACEW,MAAAA,QAAQ,GAAG,KAAKC,kBAAhB;AACA;;AACF,SAAK1C,iBAAiB,CAAC+B,cAAvB;AACEU,MAAAA,QAAQ,GAAG,KAAKE,iBAAhB;AACA;;AACF;AACE,YAAM,IAAId,KAAJ,CAAU,6BAAV,CAAN;AARF;;AAWA,MAAIV,UAAU,GAAG,KAAKA,UAAtB;AACAsB,EAAAA,QAAQ,CAACG,GAAT,CAAa,UAAUC,OAAV,EAAmB;AAC9B,QAAIC,MAAM,GAAGD,OAAO,CAACC,MAAR,KAAmB,IAAnB,GAA0B,IAA1B,GAAiC,KAAKC,QAAL,CAAcC,EAAd,CAAiBH,OAAO,CAACC,MAAzB,CAA9C;AACAA,IAAAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsB9B,UAAtB,EAAkC2B,MAAlC,EAA0C,KAAKI,aAA/C,CAAT;AACA,WAAO;AACLJ,MAAAA,MAAM,EAAEA,MADH;AAELK,MAAAA,aAAa,EAAEN,OAAO,CAACM,aAFlB;AAGLC,MAAAA,eAAe,EAAEP,OAAO,CAACO,eAHpB;AAILC,MAAAA,YAAY,EAAER,OAAO,CAACQ,YAJjB;AAKLC,MAAAA,cAAc,EAAET,OAAO,CAACS,cALnB;AAMLC,MAAAA,IAAI,EAAEV,OAAO,CAACU,IAAR,KAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAKC,MAAL,CAAYR,EAAZ,CAAeH,OAAO,CAACU,IAAvB;AANhC,KAAP;AAQD,GAXD,EAWG,IAXH,EAWSE,OAXT,CAWiBrB,SAXjB,EAW4BG,OAX5B;AAYD,CA9BH;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAvC,iBAAiB,CAACS,SAAlB,CAA4BiD,wBAA5B,GACE,SAASC,0CAAT,CAAoDC,KAApD,EAA2D;AACzD,MAAIC,IAAI,GAAGnE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CAAX,CADyD,CAGzD;AACA;AACA;AACA;;AACA,MAAIG,MAAM,GAAG;AACXjB,IAAAA,MAAM,EAAEpD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CADG;AAEXP,IAAAA,YAAY,EAAEQ,IAFH;AAGXP,IAAAA,cAAc,EAAE5D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,EAA6B,CAA7B;AAHL,GAAb;AAMAG,EAAAA,MAAM,CAACjB,MAAP,GAAgB,KAAKkB,gBAAL,CAAsBD,MAAM,CAACjB,MAA7B,CAAhB;;AACA,MAAIiB,MAAM,CAACjB,MAAP,GAAgB,CAApB,EAAuB;AACrB,WAAO,EAAP;AACD;;AAED,MAAIL,QAAQ,GAAG,EAAf;;AAEA,MAAIjB,KAAK,GAAG,KAAKyC,YAAL,CAAkBF,MAAlB,EACkB,KAAKpB,iBADvB,EAEkB,cAFlB,EAGkB,gBAHlB,EAIkBjD,IAAI,CAACwE,0BAJvB,EAKkBtE,YAAY,CAACqC,iBAL/B,CAAZ;;AAMA,MAAIT,KAAK,IAAI,CAAb,EAAgB;AACd,QAAIqB,OAAO,GAAG,KAAKF,iBAAL,CAAuBnB,KAAvB,CAAd;;AAEA,QAAIoC,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;AAC9B,UAAIf,YAAY,GAAGR,OAAO,CAACQ,YAA3B,CAD8B,CAG9B;AACA;AACA;AACA;;AACA,aAAOR,OAAO,IAAIA,OAAO,CAACQ,YAAR,KAAyBA,YAA3C,EAAyD;AACvDZ,QAAAA,QAAQ,CAAC4B,IAAT,CAAc;AACZR,UAAAA,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;AAEZsB,UAAAA,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;AAGZyB,UAAAA,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;AAHA,SAAd;AAMAA,QAAAA,OAAO,GAAG,KAAKF,iBAAL,CAAuB,EAAEnB,KAAzB,CAAV;AACD;AACF,KAhBD,MAgBO;AACL,UAAI8B,cAAc,GAAGT,OAAO,CAACS,cAA7B,CADK,CAGL;AACA;AACA;AACA;;AACA,aAAOT,OAAO,IACPA,OAAO,CAACQ,YAAR,KAAyBQ,IADzB,IAEAhB,OAAO,CAACS,cAAR,IAA0BA,cAFjC,EAEiD;AAC/Cb,QAAAA,QAAQ,CAAC4B,IAAT,CAAc;AACZR,UAAAA,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;AAEZsB,UAAAA,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;AAGZyB,UAAAA,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;AAHA,SAAd;AAMAA,QAAAA,OAAO,GAAG,KAAKF,iBAAL,CAAuB,EAAEnB,KAAzB,CAAV;AACD;AACF;AACF;;AAED,SAAOiB,QAAP;AACD,CApEH;;AAsEA8B,OAAO,CAACvE,iBAAR,GAA4BA,iBAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASO,sBAAT,CAAgCN,UAAhC,EAA4CC,aAA5C,EAA2D;AACzD,MAAIC,SAAS,GAAGF,UAAhB;;AACA,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCE,IAAAA,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;AACD;;AAED,MAAIuE,OAAO,GAAG9E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd;AACA,MAAIsE,OAAO,GAAG/E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd,CAPyD,CAQzD;AACA;;AACA,MAAIuE,KAAK,GAAGhF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,OAAvB,EAAgC,EAAhC,CAAZ;AACA,MAAIgB,UAAU,GAAGzB,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,YAAvB,EAAqC,IAArC,CAAjB;AACA,MAAIwE,cAAc,GAAGjF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,gBAAvB,EAAyC,IAAzC,CAArB;AACA,MAAIsC,QAAQ,GAAG/C,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,UAAvB,CAAf;AACA,MAAIyE,IAAI,GAAGlF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,MAAvB,EAA+B,IAA/B,CAAX,CAdyD,CAgBzD;AACA;;AACA,MAAIqE,OAAO,IAAI,KAAK9D,QAApB,EAA8B;AAC5B,UAAM,IAAImB,KAAJ,CAAU,0BAA0B2C,OAApC,CAAN;AACD;;AAED,MAAIrD,UAAJ,EAAgB;AACdA,IAAAA,UAAU,GAAGzB,IAAI,CAACmF,SAAL,CAAe1D,UAAf,CAAb;AACD;;AAEDsD,EAAAA,OAAO,GAAGA,OAAO,CACd7B,GADO,CACHkC,MADG,EAER;AACA;AACA;AAJQ,GAKPlC,GALO,CAKHlD,IAAI,CAACmF,SALF,EAMR;AACA;AACA;AACA;AATQ,GAUPjC,GAVO,CAUH,UAAUE,MAAV,EAAkB;AACrB,WAAO3B,UAAU,IAAIzB,IAAI,CAACqF,UAAL,CAAgB5D,UAAhB,CAAd,IAA6CzB,IAAI,CAACqF,UAAL,CAAgBjC,MAAhB,CAA7C,GACHpD,IAAI,CAACsF,QAAL,CAAc7D,UAAd,EAA0B2B,MAA1B,CADG,GAEHA,MAFJ;AAGD,GAdO,CAAV,CA1ByD,CA0CzD;AACA;AACA;AACA;;AACA,OAAKU,MAAL,GAAc3D,QAAQ,CAACoF,SAAT,CAAmBP,KAAK,CAAC9B,GAAN,CAAUkC,MAAV,CAAnB,EAAsC,IAAtC,CAAd;AACA,OAAK/B,QAAL,GAAgBlD,QAAQ,CAACoF,SAAT,CAAmBR,OAAnB,EAA4B,IAA5B,CAAhB;AAEA,OAAKS,gBAAL,GAAwB,KAAKnC,QAAL,CAAcoC,OAAd,GAAwBvC,GAAxB,CAA4B,UAAUwC,CAAV,EAAa;AAC/D,WAAO1F,IAAI,CAACuD,gBAAL,CAAsB9B,UAAtB,EAAkCiE,CAAlC,EAAqClF,aAArC,CAAP;AACD,GAFuB,CAAxB;AAIA,OAAKiB,UAAL,GAAkBA,UAAlB;AACA,OAAKwD,cAAL,GAAsBA,cAAtB;AACA,OAAKzD,SAAL,GAAiBuB,QAAjB;AACA,OAAKS,aAAL,GAAqBhD,aAArB;AACA,OAAK0E,IAAL,GAAYA,IAAZ;AACD;;AAEDrE,sBAAsB,CAACE,SAAvB,GAAmCG,MAAM,CAACyE,MAAP,CAAcrF,iBAAiB,CAACS,SAAhC,CAAnC;AACAF,sBAAsB,CAACE,SAAvB,CAAiC6E,QAAjC,GAA4CtF,iBAA5C;AAEA;;;;;AAIAO,sBAAsB,CAACE,SAAvB,CAAiCuD,gBAAjC,GAAoD,UAASuB,OAAT,EAAkB;AACpE,MAAIC,cAAc,GAAGD,OAArB;;AACA,MAAI,KAAKpE,UAAL,IAAmB,IAAvB,EAA6B;AAC3BqE,IAAAA,cAAc,GAAG9F,IAAI,CAACsF,QAAL,CAAc,KAAK7D,UAAnB,EAA+BqE,cAA/B,CAAjB;AACD;;AAED,MAAI,KAAKzC,QAAL,CAAc0C,GAAd,CAAkBD,cAAlB,CAAJ,EAAuC;AACrC,WAAO,KAAKzC,QAAL,CAAc2C,OAAd,CAAsBF,cAAtB,CAAP;AACD,GARmE,CAUpE;AACA;;;AACA,MAAIG,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKT,gBAAL,CAAsBU,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AACjD,QAAI,KAAKT,gBAAL,CAAsBS,CAAtB,KAA4BJ,OAAhC,EAAyC;AACvC,aAAOI,CAAP;AACD;AACF;;AAED,SAAO,CAAC,CAAR;AACD,CApBD;AAsBA;;;;;;;;;;;AASApF,sBAAsB,CAACC,aAAvB,GACE,SAASqF,+BAAT,CAAyC5F,UAAzC,EAAqDC,aAArD,EAAoE;AAClE,MAAI4F,GAAG,GAAGlF,MAAM,CAACyE,MAAP,CAAc9E,sBAAsB,CAACE,SAArC,CAAV;AAEA,MAAIiE,KAAK,GAAGoB,GAAG,CAACtC,MAAJ,GAAa3D,QAAQ,CAACoF,SAAT,CAAmBhF,UAAU,CAACuD,MAAX,CAAkB2B,OAAlB,EAAnB,EAAgD,IAAhD,CAAzB;AACA,MAAIV,OAAO,GAAGqB,GAAG,CAAC/C,QAAJ,GAAelD,QAAQ,CAACoF,SAAT,CAAmBhF,UAAU,CAAC8C,QAAX,CAAoBoC,OAApB,EAAnB,EAAkD,IAAlD,CAA7B;AACAW,EAAAA,GAAG,CAAC3E,UAAJ,GAAiBlB,UAAU,CAAC8F,WAA5B;AACAD,EAAAA,GAAG,CAACnB,cAAJ,GAAqB1E,UAAU,CAAC+F,uBAAX,CAAmCF,GAAG,CAAC/C,QAAJ,CAAaoC,OAAb,EAAnC,EACmCW,GAAG,CAAC3E,UADvC,CAArB;AAEA2E,EAAAA,GAAG,CAAClB,IAAJ,GAAW3E,UAAU,CAACgG,KAAtB;AACAH,EAAAA,GAAG,CAAC5C,aAAJ,GAAoBhD,aAApB;AACA4F,EAAAA,GAAG,CAACZ,gBAAJ,GAAuBY,GAAG,CAAC/C,QAAJ,CAAaoC,OAAb,GAAuBvC,GAAvB,CAA2B,UAAUwC,CAAV,EAAa;AAC7D,WAAO1F,IAAI,CAACuD,gBAAL,CAAsB6C,GAAG,CAAC3E,UAA1B,EAAsCiE,CAAtC,EAAyClF,aAAzC,CAAP;AACD,GAFsB,CAAvB,CAVkE,CAclE;AACA;AACA;AACA;;AAEA,MAAIgG,iBAAiB,GAAGjG,UAAU,CAACiB,SAAX,CAAqBiE,OAArB,GAA+BgB,KAA/B,EAAxB;;AACA,MAAIC,qBAAqB,GAAGN,GAAG,CAACnF,mBAAJ,GAA0B,EAAtD;AACA,MAAI0F,oBAAoB,GAAGP,GAAG,CAAC1E,kBAAJ,GAAyB,EAApD;;AAEA,OAAK,IAAIuE,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGM,iBAAiB,CAACN,MAA3C,EAAmDD,CAAC,GAAGC,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,QAAIW,UAAU,GAAGJ,iBAAiB,CAACP,CAAD,CAAlC;AACA,QAAIY,WAAW,GAAG,IAAIC,OAAJ,EAAlB;AACAD,IAAAA,WAAW,CAACpD,aAAZ,GAA4BmD,UAAU,CAACnD,aAAvC;AACAoD,IAAAA,WAAW,CAACnD,eAAZ,GAA8BkD,UAAU,CAAClD,eAAzC;;AAEA,QAAIkD,UAAU,CAACxD,MAAf,EAAuB;AACrByD,MAAAA,WAAW,CAACzD,MAAZ,GAAqB2B,OAAO,CAACiB,OAAR,CAAgBY,UAAU,CAACxD,MAA3B,CAArB;AACAyD,MAAAA,WAAW,CAAClD,YAAZ,GAA2BiD,UAAU,CAACjD,YAAtC;AACAkD,MAAAA,WAAW,CAACjD,cAAZ,GAA6BgD,UAAU,CAAChD,cAAxC;;AAEA,UAAIgD,UAAU,CAAC/C,IAAf,EAAqB;AACnBgD,QAAAA,WAAW,CAAChD,IAAZ,GAAmBmB,KAAK,CAACgB,OAAN,CAAcY,UAAU,CAAC/C,IAAzB,CAAnB;AACD;;AAED8C,MAAAA,oBAAoB,CAAChC,IAArB,CAA0BkC,WAA1B;AACD;;AAEDH,IAAAA,qBAAqB,CAAC/B,IAAtB,CAA2BkC,WAA3B;AACD;;AAEDxG,EAAAA,SAAS,CAAC+F,GAAG,CAAC1E,kBAAL,EAAyB1B,IAAI,CAACwE,0BAA9B,CAAT;AAEA,SAAO4B,GAAP;AACD,CAhDH;AAkDA;;;;;AAGAvF,sBAAsB,CAACE,SAAvB,CAAiCC,QAAjC,GAA4C,CAA5C;AAEA;;;;AAGAE,MAAM,CAACC,cAAP,CAAsBN,sBAAsB,CAACE,SAA7C,EAAwD,SAAxD,EAAmE;AACjEO,EAAAA,GAAG,EAAE,YAAY;AACf,WAAO,KAAKkE,gBAAL,CAAsBiB,KAAtB,EAAP;AACD;AAHgE,CAAnE;AAMA;;;;AAGA,SAASK,OAAT,GAAmB;AACjB,OAAKrD,aAAL,GAAqB,CAArB;AACA,OAAKC,eAAL,GAAuB,CAAvB;AACA,OAAKN,MAAL,GAAc,IAAd;AACA,OAAKO,YAAL,GAAoB,IAApB;AACA,OAAKC,cAAL,GAAsB,IAAtB;AACA,OAAKC,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;AAKAhD,sBAAsB,CAACE,SAAvB,CAAiCQ,cAAjC,GACE,SAASU,+BAAT,CAAyCJ,IAAzC,EAA+CK,WAA/C,EAA4D;AAC1D,MAAIuB,aAAa,GAAG,CAApB;AACA,MAAIsD,uBAAuB,GAAG,CAA9B;AACA,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAIC,sBAAsB,GAAG,CAA7B;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIjB,MAAM,GAAGrE,IAAI,CAACqE,MAAlB;AACA,MAAIpE,KAAK,GAAG,CAAZ;AACA,MAAIsF,cAAc,GAAG,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAId,iBAAiB,GAAG,EAAxB;AACA,MAAIrD,OAAJ,EAAaoE,GAAb,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,KAAhC;;AAEA,SAAO5F,KAAK,GAAGoE,MAAf,EAAuB;AACrB,QAAIrE,IAAI,CAACG,MAAL,CAAYF,KAAZ,MAAuB,GAA3B,EAAgC;AAC9B2B,MAAAA,aAAa;AACb3B,MAAAA,KAAK;AACLiF,MAAAA,uBAAuB,GAAG,CAA1B;AACD,KAJD,MAKK,IAAIlF,IAAI,CAACG,MAAL,CAAYF,KAAZ,MAAuB,GAA3B,EAAgC;AACnCA,MAAAA,KAAK;AACN,KAFI,MAGA;AACHqB,MAAAA,OAAO,GAAG,IAAI2D,OAAJ,EAAV;AACA3D,MAAAA,OAAO,CAACM,aAAR,GAAwBA,aAAxB,CAFG,CAIH;AACA;AACA;AACA;AACA;;AACA,WAAKgE,GAAG,GAAG3F,KAAX,EAAkB2F,GAAG,GAAGvB,MAAxB,EAAgCuB,GAAG,EAAnC,EAAuC;AACrC,YAAI,KAAK9F,uBAAL,CAA6BE,IAA7B,EAAmC4F,GAAnC,CAAJ,EAA6C;AAC3C;AACD;AACF;;AACDF,MAAAA,GAAG,GAAG1F,IAAI,CAAC4E,KAAL,CAAW3E,KAAX,EAAkB2F,GAAlB,CAAN;AAEAD,MAAAA,OAAO,GAAGJ,cAAc,CAACG,GAAD,CAAxB;;AACA,UAAIC,OAAJ,EAAa;AACX1F,QAAAA,KAAK,IAAIyF,GAAG,CAACrB,MAAb;AACD,OAFD,MAEO;AACLsB,QAAAA,OAAO,GAAG,EAAV;;AACA,eAAO1F,KAAK,GAAG2F,GAAf,EAAoB;AAClBrH,UAAAA,SAAS,CAACuH,MAAV,CAAiB9F,IAAjB,EAAuBC,KAAvB,EAA8BuF,IAA9B;AACAK,UAAAA,KAAK,GAAGL,IAAI,CAACK,KAAb;AACA5F,UAAAA,KAAK,GAAGuF,IAAI,CAACO,IAAb;AACAJ,UAAAA,OAAO,CAAC7C,IAAR,CAAa+C,KAAb;AACD;;AAED,YAAIF,OAAO,CAACtB,MAAR,KAAmB,CAAvB,EAA0B;AACxB,gBAAM,IAAI/D,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,YAAIqF,OAAO,CAACtB,MAAR,KAAmB,CAAvB,EAA0B;AACxB,gBAAM,IAAI/D,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAEDiF,QAAAA,cAAc,CAACG,GAAD,CAAd,GAAsBC,OAAtB;AACD,OArCE,CAuCH;;;AACArE,MAAAA,OAAO,CAACO,eAAR,GAA0BqD,uBAAuB,GAAGS,OAAO,CAAC,CAAD,CAA3D;AACAT,MAAAA,uBAAuB,GAAG5D,OAAO,CAACO,eAAlC;;AAEA,UAAI8D,OAAO,CAACtB,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACA/C,QAAAA,OAAO,CAACC,MAAR,GAAiB8D,cAAc,GAAGM,OAAO,CAAC,CAAD,CAAzC;AACAN,QAAAA,cAAc,IAAIM,OAAO,CAAC,CAAD,CAAzB,CAHsB,CAKtB;;AACArE,QAAAA,OAAO,CAACQ,YAAR,GAAuBqD,oBAAoB,GAAGQ,OAAO,CAAC,CAAD,CAArD;AACAR,QAAAA,oBAAoB,GAAG7D,OAAO,CAACQ,YAA/B,CAPsB,CAQtB;;AACAR,QAAAA,OAAO,CAACQ,YAAR,IAAwB,CAAxB,CATsB,CAWtB;;AACAR,QAAAA,OAAO,CAACS,cAAR,GAAyBqD,sBAAsB,GAAGO,OAAO,CAAC,CAAD,CAAzD;AACAP,QAAAA,sBAAsB,GAAG9D,OAAO,CAACS,cAAjC;;AAEA,YAAI4D,OAAO,CAACtB,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACA/C,UAAAA,OAAO,CAACU,IAAR,GAAesD,YAAY,GAAGK,OAAO,CAAC,CAAD,CAArC;AACAL,UAAAA,YAAY,IAAIK,OAAO,CAAC,CAAD,CAAvB;AACD;AACF;;AAEDhB,MAAAA,iBAAiB,CAAC7B,IAAlB,CAAuBxB,OAAvB;;AACA,UAAI,OAAOA,OAAO,CAACQ,YAAf,KAAgC,QAApC,EAA8C;AAC5C2D,QAAAA,gBAAgB,CAAC3C,IAAjB,CAAsBxB,OAAtB;AACD;AACF;AACF;;AAED9C,EAAAA,SAAS,CAACmG,iBAAD,EAAoBxG,IAAI,CAAC6H,mCAAzB,CAAT;AACA,OAAK5G,mBAAL,GAA2BuF,iBAA3B;AAEAnG,EAAAA,SAAS,CAACiH,gBAAD,EAAmBtH,IAAI,CAACwE,0BAAxB,CAAT;AACA,OAAK9C,kBAAL,GAA0B4F,gBAA1B;AACD,CAtGH;AAwGA;;;;;;AAIAzG,sBAAsB,CAACE,SAAvB,CAAiCwD,YAAjC,GACE,SAASuD,6BAAT,CAAuCC,OAAvC,EAAgDC,SAAhD,EAA2DC,SAA3D,EACuCC,WADvC,EACoDC,WADpD,EACiEC,KADjE,EACwE;AACtE;AACA;AACA;AACA;AAEA,MAAIL,OAAO,CAACE,SAAD,CAAP,IAAsB,CAA1B,EAA6B;AAC3B,UAAM,IAAII,SAAJ,CAAc,kDACEN,OAAO,CAACE,SAAD,CADvB,CAAN;AAED;;AACD,MAAIF,OAAO,CAACG,WAAD,CAAP,GAAuB,CAA3B,EAA8B;AAC5B,UAAM,IAAIG,SAAJ,CAAc,oDACEN,OAAO,CAACG,WAAD,CADvB,CAAN;AAED;;AAED,SAAOhI,YAAY,CAACoI,MAAb,CAAoBP,OAApB,EAA6BC,SAA7B,EAAwCG,WAAxC,EAAqDC,KAArD,CAAP;AACD,CAlBH;AAoBA;;;;;;AAIAvH,sBAAsB,CAACE,SAAvB,CAAiCwH,kBAAjC,GACE,SAASC,oCAAT,GAAgD;AAC9C,OAAK,IAAI1G,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKkB,kBAAL,CAAwBkD,MAApD,EAA4D,EAAEpE,KAA9D,EAAqE;AACnE,QAAIqB,OAAO,GAAG,KAAKH,kBAAL,CAAwBlB,KAAxB,CAAd,CADmE,CAGnE;AACA;AACA;AACA;;AACA,QAAIA,KAAK,GAAG,CAAR,GAAY,KAAKkB,kBAAL,CAAwBkD,MAAxC,EAAgD;AAC9C,UAAIuC,WAAW,GAAG,KAAKzF,kBAAL,CAAwBlB,KAAK,GAAG,CAAhC,CAAlB;;AAEA,UAAIqB,OAAO,CAACM,aAAR,KAA0BgF,WAAW,CAAChF,aAA1C,EAAyD;AACvDN,QAAAA,OAAO,CAACuF,mBAAR,GAA8BD,WAAW,CAAC/E,eAAZ,GAA8B,CAA5D;AACA;AACD;AACF,KAdkE,CAgBnE;;;AACAP,IAAAA,OAAO,CAACuF,mBAAR,GAA8BC,QAA9B;AACD;AACF,CArBH;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA9H,sBAAsB,CAACE,SAAvB,CAAiC6H,mBAAjC,GACE,SAASC,qCAAT,CAA+C3E,KAA/C,EAAsD;AACpD,MAAIG,MAAM,GAAG;AACXZ,IAAAA,aAAa,EAAEzD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CADJ;AAEXR,IAAAA,eAAe,EAAE1D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;AAFN,GAAb;;AAKA,MAAIpC,KAAK,GAAG,KAAKyC,YAAL,CACVF,MADU,EAEV,KAAKrB,kBAFK,EAGV,eAHU,EAIV,iBAJU,EAKVhD,IAAI,CAAC6H,mCALK,EAMV7H,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,EAA2B5D,iBAAiB,CAACgC,oBAA7C,CANU,CAAZ;;AASA,MAAIR,KAAK,IAAI,CAAb,EAAgB;AACd,QAAIqB,OAAO,GAAG,KAAKH,kBAAL,CAAwBlB,KAAxB,CAAd;;AAEA,QAAIqB,OAAO,CAACM,aAAR,KAA0BY,MAAM,CAACZ,aAArC,EAAoD;AAClD,UAAIL,MAAM,GAAGpD,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,QAArB,EAA+B,IAA/B,CAAb;;AACA,UAAIC,MAAM,KAAK,IAAf,EAAqB;AACnBA,QAAAA,MAAM,GAAG,KAAKC,QAAL,CAAcC,EAAd,CAAiBF,MAAjB,CAAT;AACAA,QAAAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsB,KAAK9B,UAA3B,EAAuC2B,MAAvC,EAA+C,KAAKI,aAApD,CAAT;AACD;;AACD,UAAIK,IAAI,GAAG7D,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,MAArB,EAA6B,IAA7B,CAAX;;AACA,UAAIU,IAAI,KAAK,IAAb,EAAmB;AACjBA,QAAAA,IAAI,GAAG,KAAKC,MAAL,CAAYR,EAAZ,CAAeO,IAAf,CAAP;AACD;;AACD,aAAO;AACLT,QAAAA,MAAM,EAAEA,MADH;AAELe,QAAAA,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,cAArB,EAAqC,IAArC,CAFD;AAGLsB,QAAAA,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,gBAArB,EAAuC,IAAvC,CAHH;AAILU,QAAAA,IAAI,EAAEA;AAJD,OAAP;AAMD;AACF;;AAED,SAAO;AACLT,IAAAA,MAAM,EAAE,IADH;AAELe,IAAAA,IAAI,EAAE,IAFD;AAGLM,IAAAA,MAAM,EAAE,IAHH;AAILZ,IAAAA,IAAI,EAAE;AAJD,GAAP;AAMD,CA5CH;AA8CA;;;;;;AAIAhD,sBAAsB,CAACE,SAAvB,CAAiC+H,uBAAjC,GACE,SAASC,8CAAT,GAA0D;AACxD,MAAI,CAAC,KAAK9D,cAAV,EAA0B;AACxB,WAAO,KAAP;AACD;;AACD,SAAO,KAAKA,cAAL,CAAoBiB,MAApB,IAA8B,KAAK7C,QAAL,CAAc2F,IAAd,EAA9B,IACL,CAAC,KAAK/D,cAAL,CAAoBgE,IAApB,CAAyB,UAAUC,EAAV,EAAc;AAAE,WAAOA,EAAE,IAAI,IAAb;AAAoB,GAA7D,CADH;AAED,CAPH;AASA;;;;;;;AAKArI,sBAAsB,CAACE,SAAvB,CAAiCoI,gBAAjC,GACE,SAASC,kCAAT,CAA4CvD,OAA5C,EAAqDwD,aAArD,EAAoE;AAClE,MAAI,CAAC,KAAKpE,cAAV,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,MAAInD,KAAK,GAAG,KAAKwC,gBAAL,CAAsBuB,OAAtB,CAAZ;;AACA,MAAI/D,KAAK,IAAI,CAAb,EAAgB;AACd,WAAO,KAAKmD,cAAL,CAAoBnD,KAApB,CAAP;AACD;;AAED,MAAIgE,cAAc,GAAGD,OAArB;;AACA,MAAI,KAAKpE,UAAL,IAAmB,IAAvB,EAA6B;AAC3BqE,IAAAA,cAAc,GAAG9F,IAAI,CAACsF,QAAL,CAAc,KAAK7D,UAAnB,EAA+BqE,cAA/B,CAAjB;AACD;;AAED,MAAIwD,GAAJ;;AACA,MAAI,KAAK7H,UAAL,IAAmB,IAAnB,KACI6H,GAAG,GAAGtJ,IAAI,CAACuJ,QAAL,CAAc,KAAK9H,UAAnB,CADV,CAAJ,EAC+C;AAC7C;AACA;AACA;AACA;AACA,QAAI+H,cAAc,GAAG1D,cAAc,CAAC2D,OAAf,CAAuB,YAAvB,EAAqC,EAArC,CAArB;;AACA,QAAIH,GAAG,CAACI,MAAJ,IAAc,MAAd,IACG,KAAKrG,QAAL,CAAc0C,GAAd,CAAkByD,cAAlB,CADP,EAC0C;AACxC,aAAO,KAAKvE,cAAL,CAAoB,KAAK5B,QAAL,CAAc2C,OAAd,CAAsBwD,cAAtB,CAApB,CAAP;AACD;;AAED,QAAI,CAAC,CAACF,GAAG,CAACK,IAAL,IAAaL,GAAG,CAACK,IAAJ,IAAY,GAA1B,KACG,KAAKtG,QAAL,CAAc0C,GAAd,CAAkB,MAAMD,cAAxB,CADP,EACgD;AAC9C,aAAO,KAAKb,cAAL,CAAoB,KAAK5B,QAAL,CAAc2C,OAAd,CAAsB,MAAMF,cAA5B,CAApB,CAAP;AACD;AACF,GAhCiE,CAkClE;AACA;AACA;AACA;;;AACA,MAAIuD,aAAJ,EAAmB;AACjB,WAAO,IAAP;AACD,GAFD,MAGK;AACH,UAAM,IAAIlH,KAAJ,CAAU,MAAM2D,cAAN,GAAuB,4BAAjC,CAAN;AACD;AACF,CA7CH;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAjF,sBAAsB,CAACE,SAAvB,CAAiC6I,oBAAjC,GACE,SAASC,sCAAT,CAAgD3F,KAAhD,EAAuD;AACrD,MAAId,MAAM,GAAGpD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CAAb;AACAd,EAAAA,MAAM,GAAG,KAAKkB,gBAAL,CAAsBlB,MAAtB,CAAT;;AACA,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,WAAO;AACLe,MAAAA,IAAI,EAAE,IADD;AAELM,MAAAA,MAAM,EAAE,IAFH;AAGLG,MAAAA,UAAU,EAAE;AAHP,KAAP;AAKD;;AAED,MAAIP,MAAM,GAAG;AACXjB,IAAAA,MAAM,EAAEA,MADG;AAEXO,IAAAA,YAAY,EAAE3D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CAFH;AAGXN,IAAAA,cAAc,EAAE5D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;AAHL,GAAb;;AAMA,MAAIpC,KAAK,GAAG,KAAKyC,YAAL,CACVF,MADU,EAEV,KAAKpB,iBAFK,EAGV,cAHU,EAIV,gBAJU,EAKVjD,IAAI,CAACwE,0BALK,EAMVxE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,EAA2B5D,iBAAiB,CAACgC,oBAA7C,CANU,CAAZ;;AASA,MAAIR,KAAK,IAAI,CAAb,EAAgB;AACd,QAAIqB,OAAO,GAAG,KAAKF,iBAAL,CAAuBnB,KAAvB,CAAd;;AAEA,QAAIqB,OAAO,CAACC,MAAR,KAAmBiB,MAAM,CAACjB,MAA9B,EAAsC;AACpC,aAAO;AACLe,QAAAA,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADD;AAELsB,QAAAA,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFH;AAGLyB,QAAAA,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;AAHP,OAAP;AAKD;AACF;;AAED,SAAO;AACLgB,IAAAA,IAAI,EAAE,IADD;AAELM,IAAAA,MAAM,EAAE,IAFH;AAGLG,IAAAA,UAAU,EAAE;AAHP,GAAP;AAKD,CA5CH;;AA8CAC,OAAO,CAAChE,sBAAR,GAAiCA,sBAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,SAASD,wBAAT,CAAkCL,UAAlC,EAA8CC,aAA9C,EAA6D;AAC3D,MAAIC,SAAS,GAAGF,UAAhB;;AACA,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCE,IAAAA,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;AACD;;AAED,MAAIuE,OAAO,GAAG9E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd;AACA,MAAIE,QAAQ,GAAGX,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,UAAvB,CAAf;;AAEA,MAAIqE,OAAO,IAAI,KAAK9D,QAApB,EAA8B;AAC5B,UAAM,IAAImB,KAAJ,CAAU,0BAA0B2C,OAApC,CAAN;AACD;;AAED,OAAKzB,QAAL,GAAgB,IAAIlD,QAAJ,EAAhB;AACA,OAAK2D,MAAL,GAAc,IAAI3D,QAAJ,EAAd;AAEA,MAAI2J,UAAU,GAAG;AACf3F,IAAAA,IAAI,EAAE,CAAC,CADQ;AAEfM,IAAAA,MAAM,EAAE;AAFO,GAAjB;AAIA,OAAKsF,SAAL,GAAiBpJ,QAAQ,CAACuC,GAAT,CAAa,UAAUwC,CAAV,EAAa;AACzC,QAAIA,CAAC,CAAC4D,GAAN,EAAW;AACT;AACA;AACA,YAAM,IAAInH,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,QAAI6H,MAAM,GAAGhK,IAAI,CAACoE,MAAL,CAAYsB,CAAZ,EAAe,QAAf,CAAb;AACA,QAAIuE,UAAU,GAAGjK,IAAI,CAACoE,MAAL,CAAY4F,MAAZ,EAAoB,MAApB,CAAjB;AACA,QAAIE,YAAY,GAAGlK,IAAI,CAACoE,MAAL,CAAY4F,MAAZ,EAAoB,QAApB,CAAnB;;AAEA,QAAIC,UAAU,GAAGH,UAAU,CAAC3F,IAAxB,IACC8F,UAAU,KAAKH,UAAU,CAAC3F,IAA1B,IAAkC+F,YAAY,GAAGJ,UAAU,CAACrF,MADjE,EAC0E;AACxE,YAAM,IAAItC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD2H,IAAAA,UAAU,GAAGE,MAAb;AAEA,WAAO;AACLG,MAAAA,eAAe,EAAE;AACf;AACA;AACA1G,QAAAA,aAAa,EAAEwG,UAAU,GAAG,CAHb;AAIfvG,QAAAA,eAAe,EAAEwG,YAAY,GAAG;AAJjB,OADZ;AAOLtE,MAAAA,QAAQ,EAAE,IAAItF,iBAAJ,CAAsBN,IAAI,CAACoE,MAAL,CAAYsB,CAAZ,EAAe,KAAf,CAAtB,EAA6ClF,aAA7C;AAPL,KAAP;AASD,GAzBgB,CAAjB;AA0BD;;AAEDI,wBAAwB,CAACG,SAAzB,GAAqCG,MAAM,CAACyE,MAAP,CAAcrF,iBAAiB,CAACS,SAAhC,CAArC;AACAH,wBAAwB,CAACG,SAAzB,CAAmCqJ,WAAnC,GAAiD9J,iBAAjD;AAEA;;;;AAGAM,wBAAwB,CAACG,SAAzB,CAAmCC,QAAnC,GAA8C,CAA9C;AAEA;;;;AAGAE,MAAM,CAACC,cAAP,CAAsBP,wBAAwB,CAACG,SAA/C,EAA0D,SAA1D,EAAqE;AACnEO,EAAAA,GAAG,EAAE,YAAY;AACf,QAAIyD,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,WAAK,IAAIoE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,SAAL,CAAe9D,CAAf,EAAkBL,QAAlB,CAA2Bb,OAA3B,CAAmCmB,MAAvD,EAA+DmE,CAAC,EAAhE,EAAoE;AAClEtF,QAAAA,OAAO,CAACJ,IAAR,CAAa,KAAKoF,SAAL,CAAe9D,CAAf,EAAkBL,QAAlB,CAA2Bb,OAA3B,CAAmCsF,CAAnC,CAAb;AACD;AACF;;AACD,WAAOtF,OAAP;AACD;AATkE,CAArE;AAYA;;;;;;;;;;;;;;;;;;;;AAmBAnE,wBAAwB,CAACG,SAAzB,CAAmC6H,mBAAnC,GACE,SAAS0B,4CAAT,CAAsDpG,KAAtD,EAA6D;AAC3D,MAAIG,MAAM,GAAG;AACXZ,IAAAA,aAAa,EAAEzD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CADJ;AAEXR,IAAAA,eAAe,EAAE1D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;AAFN,GAAb,CAD2D,CAM3D;AACA;;AACA,MAAIqG,YAAY,GAAGrK,YAAY,CAACoI,MAAb,CAAoBjE,MAApB,EAA4B,KAAK0F,SAAjC,EACjB,UAAS1F,MAAT,EAAiBmG,OAAjB,EAA0B;AACxB,QAAIC,GAAG,GAAGpG,MAAM,CAACZ,aAAP,GAAuB+G,OAAO,CAACL,eAAR,CAAwB1G,aAAzD;;AACA,QAAIgH,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAED,WAAQpG,MAAM,CAACX,eAAP,GACA8G,OAAO,CAACL,eAAR,CAAwBzG,eADhC;AAED,GATgB,CAAnB;AAUA,MAAI8G,OAAO,GAAG,KAAKT,SAAL,CAAeQ,YAAf,CAAd;;AAEA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO;AACLpH,MAAAA,MAAM,EAAE,IADH;AAELe,MAAAA,IAAI,EAAE,IAFD;AAGLM,MAAAA,MAAM,EAAE,IAHH;AAILZ,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;;AAED,SAAO2G,OAAO,CAAC5E,QAAR,CAAiBgD,mBAAjB,CAAqC;AAC1CzE,IAAAA,IAAI,EAAEE,MAAM,CAACZ,aAAP,IACH+G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CADrC,CADoC;AAG1CgB,IAAAA,MAAM,EAAEJ,MAAM,CAACX,eAAP,IACL8G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CY,MAAM,CAACZ,aAAjD,GACE+G,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD5C,GAEE,CAHG,CAHkC;AAO1CgH,IAAAA,IAAI,EAAExG,KAAK,CAACwG;AAP8B,GAArC,CAAP;AASD,CAvCH;AAyCA;;;;;;AAIA9J,wBAAwB,CAACG,SAAzB,CAAmC+H,uBAAnC,GACE,SAAS6B,gDAAT,GAA4D;AAC1D,SAAO,KAAKZ,SAAL,CAAea,KAAf,CAAqB,UAAUlF,CAAV,EAAa;AACvC,WAAOA,CAAC,CAACE,QAAF,CAAWkD,uBAAX,EAAP;AACD,GAFM,CAAP;AAGD,CALH;AAOA;;;;;;;AAKAlI,wBAAwB,CAACG,SAAzB,CAAmCoI,gBAAnC,GACE,SAAS0B,yCAAT,CAAmDhF,OAAnD,EAA4DwD,aAA5D,EAA2E;AACzE,OAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,QAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd;AAEA,QAAI6E,OAAO,GAAGN,OAAO,CAAC5E,QAAR,CAAiBuD,gBAAjB,CAAkCtD,OAAlC,EAA2C,IAA3C,CAAd;;AACA,QAAIiF,OAAJ,EAAa;AACX,aAAOA,OAAP;AACD;AACF;;AACD,MAAIzB,aAAJ,EAAmB;AACjB,WAAO,IAAP;AACD,GAFD,MAGK;AACH,UAAM,IAAIlH,KAAJ,CAAU,MAAM0D,OAAN,GAAgB,4BAA1B,CAAN;AACD;AACF,CAhBH;AAkBA;;;;;;;;;;;;;;;;;;;;AAkBAjF,wBAAwB,CAACG,SAAzB,CAAmC6I,oBAAnC,GACE,SAASmB,6CAAT,CAAuD7G,KAAvD,EAA8D;AAC5D,OAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,QAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd,CAD8C,CAG9C;AACA;;AACA,QAAIuE,OAAO,CAAC5E,QAAR,CAAiBtB,gBAAjB,CAAkCtE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CAAlC,MAAoE,CAAC,CAAzE,EAA4E;AAC1E;AACD;;AACD,QAAI8G,iBAAiB,GAAGR,OAAO,CAAC5E,QAAR,CAAiBgE,oBAAjB,CAAsC1F,KAAtC,CAAxB;;AACA,QAAI8G,iBAAJ,EAAuB;AACrB,UAAIC,GAAG,GAAG;AACR9G,QAAAA,IAAI,EAAE6G,iBAAiB,CAAC7G,IAAlB,IACHqG,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CADrC,CADE;AAGRgB,QAAAA,MAAM,EAAEuG,iBAAiB,CAACvG,MAAlB,IACL+F,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CuH,iBAAiB,CAAC7G,IAA5D,GACEqG,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD5C,GAEE,CAHG;AAHA,OAAV;AAQA,aAAOuH,GAAP;AACD;AACF;;AAED,SAAO;AACL9G,IAAAA,IAAI,EAAE,IADD;AAELM,IAAAA,MAAM,EAAE;AAFH,GAAP;AAID,CA5BH;AA8BA;;;;;;;AAKA7D,wBAAwB,CAACG,SAAzB,CAAmCQ,cAAnC,GACE,SAAS2J,sCAAT,CAAgDrJ,IAAhD,EAAsDK,WAAtD,EAAmE;AACjE,OAAKjB,mBAAL,GAA2B,EAA3B;AACA,OAAKS,kBAAL,GAA0B,EAA1B;;AACA,OAAK,IAAIuE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,QAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd;AACA,QAAIkF,eAAe,GAAGX,OAAO,CAAC5E,QAAR,CAAiB5C,kBAAvC;;AACA,SAAK,IAAIqH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,eAAe,CAACjF,MAApC,EAA4CmE,CAAC,EAA7C,EAAiD;AAC/C,UAAIlH,OAAO,GAAGgI,eAAe,CAACd,CAAD,CAA7B;;AAEA,UAAIjH,MAAM,GAAGoH,OAAO,CAAC5E,QAAR,CAAiBvC,QAAjB,CAA0BC,EAA1B,CAA6BH,OAAO,CAACC,MAArC,CAAb;;AACAA,MAAAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsBiH,OAAO,CAAC5E,QAAR,CAAiBnE,UAAvC,EAAmD2B,MAAnD,EAA2D,KAAKI,aAAhE,CAAT;;AACA,WAAKH,QAAL,CAAc+H,GAAd,CAAkBhI,MAAlB;;AACAA,MAAAA,MAAM,GAAG,KAAKC,QAAL,CAAc2C,OAAd,CAAsB5C,MAAtB,CAAT;AAEA,UAAIS,IAAI,GAAG,IAAX;;AACA,UAAIV,OAAO,CAACU,IAAZ,EAAkB;AAChBA,QAAAA,IAAI,GAAG2G,OAAO,CAAC5E,QAAR,CAAiB9B,MAAjB,CAAwBR,EAAxB,CAA2BH,OAAO,CAACU,IAAnC,CAAP;;AACA,aAAKC,MAAL,CAAYsH,GAAZ,CAAgBvH,IAAhB;;AACAA,QAAAA,IAAI,GAAG,KAAKC,MAAL,CAAYkC,OAAZ,CAAoBnC,IAApB,CAAP;AACD,OAb8C,CAe/C;AACA;AACA;AACA;;;AACA,UAAIwH,eAAe,GAAG;AACpBjI,QAAAA,MAAM,EAAEA,MADY;AAEpBK,QAAAA,aAAa,EAAEN,OAAO,CAACM,aAAR,IACZ+G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CAD5B,CAFK;AAIpBC,QAAAA,eAAe,EAAEP,OAAO,CAACO,eAAR,IACd8G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CN,OAAO,CAACM,aAAlD,GACC+G,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD3C,GAEC,CAHa,CAJG;AAQpBC,QAAAA,YAAY,EAAER,OAAO,CAACQ,YARF;AASpBC,QAAAA,cAAc,EAAET,OAAO,CAACS,cATJ;AAUpBC,QAAAA,IAAI,EAAEA;AAVc,OAAtB;;AAaA,WAAK5C,mBAAL,CAAyB0D,IAAzB,CAA8B0G,eAA9B;;AACA,UAAI,OAAOA,eAAe,CAAC1H,YAAvB,KAAwC,QAA5C,EAAsD;AACpD,aAAKjC,kBAAL,CAAwBiD,IAAxB,CAA6B0G,eAA7B;AACD;AACF;AACF;;AAEDhL,EAAAA,SAAS,CAAC,KAAKY,mBAAN,EAA2BjB,IAAI,CAAC6H,mCAAhC,CAAT;AACAxH,EAAAA,SAAS,CAAC,KAAKqB,kBAAN,EAA0B1B,IAAI,CAACwE,0BAA/B,CAAT;AACD,CAhDH;;AAkDAK,OAAO,CAACjE,wBAAR,GAAmCA,wBAAnC","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\n\r\nvar util = require('./util');\r\nvar binarySearch = require('./binary-search');\r\nvar ArraySet = require('./array-set').ArraySet;\r\nvar base64VLQ = require('./base64-vlq');\r\nvar quickSort = require('./quick-sort').quickSort;\r\n\r\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  return sourceMap.sections != null\r\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\r\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\r\n}\r\n\r\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\r\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\r\n}\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nSourceMapConsumer.prototype._version = 3;\r\n\r\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\r\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\r\n// are lazily instantiated, accessed via the `_generatedMappings` and\r\n// `_originalMappings` getters respectively, and we only parse the mappings\r\n// and create these arrays once queried for a source location. We jump through\r\n// these hoops because there can be many thousands of mappings, and parsing\r\n// them is expensive, so we only want to do it if we must.\r\n//\r\n// Each object in the arrays is of the form:\r\n//\r\n//     {\r\n//       generatedLine: The line number in the generated code,\r\n//       generatedColumn: The column number in the generated code,\r\n//       source: The path to the original source file that generated this\r\n//               chunk of code,\r\n//       originalLine: The line number in the original source that\r\n//                     corresponds to this chunk of generated code,\r\n//       originalColumn: The column number in the original source that\r\n//                       corresponds to this chunk of generated code,\r\n//       name: The name of the original symbol which generated this chunk of\r\n//             code.\r\n//     }\r\n//\r\n// All properties except for `generatedLine` and `generatedColumn` can be\r\n// `null`.\r\n//\r\n// `_generatedMappings` is ordered by the generated positions.\r\n//\r\n// `_originalMappings` is ordered by the original positions.\r\n\r\nSourceMapConsumer.prototype.__generatedMappings = null;\r\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!this.__generatedMappings) {\r\n      this._parseMappings(this._mappings, this.sourceRoot);\r\n    }\r\n\r\n    return this.__generatedMappings;\r\n  }\r\n});\r\n\r\nSourceMapConsumer.prototype.__originalMappings = null;\r\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!this.__originalMappings) {\r\n      this._parseMappings(this._mappings, this.sourceRoot);\r\n    }\r\n\r\n    return this.__originalMappings;\r\n  }\r\n});\r\n\r\nSourceMapConsumer.prototype._charIsMappingSeparator =\r\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\r\n    var c = aStr.charAt(index);\r\n    return c === \";\" || c === \",\";\r\n  };\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nSourceMapConsumer.prototype._parseMappings =\r\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    throw new Error(\"Subclasses must implement _parseMappings\");\r\n  };\r\n\r\nSourceMapConsumer.GENERATED_ORDER = 1;\r\nSourceMapConsumer.ORIGINAL_ORDER = 2;\r\n\r\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\r\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\r\n\r\n/**\r\n * Iterate over each mapping between an original source/line/column and a\r\n * generated line/column in this source map.\r\n *\r\n * @param Function aCallback\r\n *        The function that is called with each mapping.\r\n * @param Object aContext\r\n *        Optional. If specified, this object will be the value of `this` every\r\n *        time that `aCallback` is called.\r\n * @param aOrder\r\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\r\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\r\n *        iterate over the mappings sorted by the generated file's line/column\r\n *        order or the original's source/line/column order, respectively. Defaults to\r\n *        `SourceMapConsumer.GENERATED_ORDER`.\r\n */\r\nSourceMapConsumer.prototype.eachMapping =\r\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\r\n    var context = aContext || null;\r\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\r\n\r\n    var mappings;\r\n    switch (order) {\r\n    case SourceMapConsumer.GENERATED_ORDER:\r\n      mappings = this._generatedMappings;\r\n      break;\r\n    case SourceMapConsumer.ORIGINAL_ORDER:\r\n      mappings = this._originalMappings;\r\n      break;\r\n    default:\r\n      throw new Error(\"Unknown order of iteration.\");\r\n    }\r\n\r\n    var sourceRoot = this.sourceRoot;\r\n    mappings.map(function (mapping) {\r\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\r\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\r\n      return {\r\n        source: source,\r\n        generatedLine: mapping.generatedLine,\r\n        generatedColumn: mapping.generatedColumn,\r\n        originalLine: mapping.originalLine,\r\n        originalColumn: mapping.originalColumn,\r\n        name: mapping.name === null ? null : this._names.at(mapping.name)\r\n      };\r\n    }, this).forEach(aCallback, context);\r\n  };\r\n\r\n/**\r\n * Returns all generated line and column information for the original source,\r\n * line, and column provided. If no column is provided, returns all mappings\r\n * corresponding to a either the line we are searching for or the next\r\n * closest line that has any mappings. Otherwise, returns all mappings\r\n * corresponding to the given line and either the column we are searching for\r\n * or the next closest column that has any offsets.\r\n *\r\n * The only argument is an object with the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number is 1-based.\r\n *   - column: Optional. the column number in the original source.\r\n *    The column number is 0-based.\r\n *\r\n * and an array of objects is returned, each with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *    line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *    The column number is 0-based.\r\n */\r\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\r\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\r\n    var line = util.getArg(aArgs, 'line');\r\n\r\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\r\n    // returns the index of the closest mapping less than the needle. By\r\n    // setting needle.originalColumn to 0, we thus find the last mapping for\r\n    // the given line, provided such a mapping exists.\r\n    var needle = {\r\n      source: util.getArg(aArgs, 'source'),\r\n      originalLine: line,\r\n      originalColumn: util.getArg(aArgs, 'column', 0)\r\n    };\r\n\r\n    needle.source = this._findSourceIndex(needle.source);\r\n    if (needle.source < 0) {\r\n      return [];\r\n    }\r\n\r\n    var mappings = [];\r\n\r\n    var index = this._findMapping(needle,\r\n                                  this._originalMappings,\r\n                                  \"originalLine\",\r\n                                  \"originalColumn\",\r\n                                  util.compareByOriginalPositions,\r\n                                  binarySearch.LEAST_UPPER_BOUND);\r\n    if (index >= 0) {\r\n      var mapping = this._originalMappings[index];\r\n\r\n      if (aArgs.column === undefined) {\r\n        var originalLine = mapping.originalLine;\r\n\r\n        // Iterate until either we run out of mappings, or we run into\r\n        // a mapping for a different line than the one we found. Since\r\n        // mappings are sorted, this is guaranteed to find all mappings for\r\n        // the line we found.\r\n        while (mapping && mapping.originalLine === originalLine) {\r\n          mappings.push({\r\n            line: util.getArg(mapping, 'generatedLine', null),\r\n            column: util.getArg(mapping, 'generatedColumn', null),\r\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n          });\r\n\r\n          mapping = this._originalMappings[++index];\r\n        }\r\n      } else {\r\n        var originalColumn = mapping.originalColumn;\r\n\r\n        // Iterate until either we run out of mappings, or we run into\r\n        // a mapping for a different line than the one we were searching for.\r\n        // Since mappings are sorted, this is guaranteed to find all mappings for\r\n        // the line we are searching for.\r\n        while (mapping &&\r\n               mapping.originalLine === line &&\r\n               mapping.originalColumn == originalColumn) {\r\n          mappings.push({\r\n            line: util.getArg(mapping, 'generatedLine', null),\r\n            column: util.getArg(mapping, 'generatedColumn', null),\r\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n          });\r\n\r\n          mapping = this._originalMappings[++index];\r\n        }\r\n      }\r\n    }\r\n\r\n    return mappings;\r\n  };\r\n\r\nexports.SourceMapConsumer = SourceMapConsumer;\r\n\r\n/**\r\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\r\n * query for information about the original file positions by giving it a file\r\n * position in the generated source.\r\n *\r\n * The first parameter is the raw source map (either as a JSON string, or\r\n * already parsed to an object). According to the spec, source maps have the\r\n * following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - sources: An array of URLs to the original source files.\r\n *   - names: An array of identifiers which can be referrenced by individual mappings.\r\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n *   - sourcesContent: Optional. An array of contents of the original source files.\r\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *\r\n * Here is an example source map, taken from the source map spec[0]:\r\n *\r\n *     {\r\n *       version : 3,\r\n *       file: \"out.js\",\r\n *       sourceRoot : \"\",\r\n *       sources: [\"foo.js\", \"bar.js\"],\r\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *       mappings: \"AA,AB;;ABCDE;\"\r\n *     }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\r\n */\r\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  var version = util.getArg(sourceMap, 'version');\r\n  var sources = util.getArg(sourceMap, 'sources');\r\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\r\n  // requires the array) to play nice here.\r\n  var names = util.getArg(sourceMap, 'names', []);\r\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\r\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\r\n  var mappings = util.getArg(sourceMap, 'mappings');\r\n  var file = util.getArg(sourceMap, 'file', null);\r\n\r\n  // Once again, Sass deviates from the spec and supplies the version as a\r\n  // string rather than a number, so we use loose equality checking here.\r\n  if (version != this._version) {\r\n    throw new Error('Unsupported version: ' + version);\r\n  }\r\n\r\n  if (sourceRoot) {\r\n    sourceRoot = util.normalize(sourceRoot);\r\n  }\r\n\r\n  sources = sources\r\n    .map(String)\r\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\r\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\r\n    // See bugzil.la/1090768.\r\n    .map(util.normalize)\r\n    // Always ensure that absolute sources are internally stored relative to\r\n    // the source root, if the source root is absolute. Not doing this would\r\n    // be particularly problematic when the source root is a prefix of the\r\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\r\n    .map(function (source) {\r\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\r\n        ? util.relative(sourceRoot, source)\r\n        : source;\r\n    });\r\n\r\n  // Pass `true` below to allow duplicate names and sources. While source maps\r\n  // are intended to be compressed and deduplicated, the TypeScript compiler\r\n  // sometimes generates source maps with duplicates in them. See Github issue\r\n  // #72 and bugzil.la/889492.\r\n  this._names = ArraySet.fromArray(names.map(String), true);\r\n  this._sources = ArraySet.fromArray(sources, true);\r\n\r\n  this._absoluteSources = this._sources.toArray().map(function (s) {\r\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\r\n  });\r\n\r\n  this.sourceRoot = sourceRoot;\r\n  this.sourcesContent = sourcesContent;\r\n  this._mappings = mappings;\r\n  this._sourceMapURL = aSourceMapURL;\r\n  this.file = file;\r\n}\r\n\r\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\r\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\r\n\r\n/**\r\n * Utility function to find the index of a source.  Returns -1 if not\r\n * found.\r\n */\r\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\r\n  var relativeSource = aSource;\r\n  if (this.sourceRoot != null) {\r\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\r\n  }\r\n\r\n  if (this._sources.has(relativeSource)) {\r\n    return this._sources.indexOf(relativeSource);\r\n  }\r\n\r\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\r\n  // this case we can't simply undo the transform.\r\n  var i;\r\n  for (i = 0; i < this._absoluteSources.length; ++i) {\r\n    if (this._absoluteSources[i] == aSource) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n\r\n/**\r\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\r\n *\r\n * @param SourceMapGenerator aSourceMap\r\n *        The source map that will be consumed.\r\n * @param String aSourceMapURL\r\n *        The URL at which the source map can be found (optional)\r\n * @returns BasicSourceMapConsumer\r\n */\r\nBasicSourceMapConsumer.fromSourceMap =\r\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\r\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\r\n\r\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\r\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\r\n    smc.sourceRoot = aSourceMap._sourceRoot;\r\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\r\n                                                            smc.sourceRoot);\r\n    smc.file = aSourceMap._file;\r\n    smc._sourceMapURL = aSourceMapURL;\r\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\r\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\r\n    });\r\n\r\n    // Because we are modifying the entries (by converting string sources and\r\n    // names to indices into the sources and names ArraySets), we have to make\r\n    // a copy of the entry or else bad things happen. Shared mutable state\r\n    // strikes again! See github issue #191.\r\n\r\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\r\n    var destGeneratedMappings = smc.__generatedMappings = [];\r\n    var destOriginalMappings = smc.__originalMappings = [];\r\n\r\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\r\n      var srcMapping = generatedMappings[i];\r\n      var destMapping = new Mapping;\r\n      destMapping.generatedLine = srcMapping.generatedLine;\r\n      destMapping.generatedColumn = srcMapping.generatedColumn;\r\n\r\n      if (srcMapping.source) {\r\n        destMapping.source = sources.indexOf(srcMapping.source);\r\n        destMapping.originalLine = srcMapping.originalLine;\r\n        destMapping.originalColumn = srcMapping.originalColumn;\r\n\r\n        if (srcMapping.name) {\r\n          destMapping.name = names.indexOf(srcMapping.name);\r\n        }\r\n\r\n        destOriginalMappings.push(destMapping);\r\n      }\r\n\r\n      destGeneratedMappings.push(destMapping);\r\n    }\r\n\r\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\r\n\r\n    return smc;\r\n  };\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nBasicSourceMapConsumer.prototype._version = 3;\r\n\r\n/**\r\n * The list of original sources.\r\n */\r\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\r\n  get: function () {\r\n    return this._absoluteSources.slice();\r\n  }\r\n});\r\n\r\n/**\r\n * Provide the JIT with a nice shape / hidden class.\r\n */\r\nfunction Mapping() {\r\n  this.generatedLine = 0;\r\n  this.generatedColumn = 0;\r\n  this.source = null;\r\n  this.originalLine = null;\r\n  this.originalColumn = null;\r\n  this.name = null;\r\n}\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nBasicSourceMapConsumer.prototype._parseMappings =\r\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    var generatedLine = 1;\r\n    var previousGeneratedColumn = 0;\r\n    var previousOriginalLine = 0;\r\n    var previousOriginalColumn = 0;\r\n    var previousSource = 0;\r\n    var previousName = 0;\r\n    var length = aStr.length;\r\n    var index = 0;\r\n    var cachedSegments = {};\r\n    var temp = {};\r\n    var originalMappings = [];\r\n    var generatedMappings = [];\r\n    var mapping, str, segment, end, value;\r\n\r\n    while (index < length) {\r\n      if (aStr.charAt(index) === ';') {\r\n        generatedLine++;\r\n        index++;\r\n        previousGeneratedColumn = 0;\r\n      }\r\n      else if (aStr.charAt(index) === ',') {\r\n        index++;\r\n      }\r\n      else {\r\n        mapping = new Mapping();\r\n        mapping.generatedLine = generatedLine;\r\n\r\n        // Because each offset is encoded relative to the previous one,\r\n        // many segments often have the same encoding. We can exploit this\r\n        // fact by caching the parsed variable length fields of each segment,\r\n        // allowing us to avoid a second parse if we encounter the same\r\n        // segment again.\r\n        for (end = index; end < length; end++) {\r\n          if (this._charIsMappingSeparator(aStr, end)) {\r\n            break;\r\n          }\r\n        }\r\n        str = aStr.slice(index, end);\r\n\r\n        segment = cachedSegments[str];\r\n        if (segment) {\r\n          index += str.length;\r\n        } else {\r\n          segment = [];\r\n          while (index < end) {\r\n            base64VLQ.decode(aStr, index, temp);\r\n            value = temp.value;\r\n            index = temp.rest;\r\n            segment.push(value);\r\n          }\r\n\r\n          if (segment.length === 2) {\r\n            throw new Error('Found a source, but no line and column');\r\n          }\r\n\r\n          if (segment.length === 3) {\r\n            throw new Error('Found a source and line, but no column');\r\n          }\r\n\r\n          cachedSegments[str] = segment;\r\n        }\r\n\r\n        // Generated column.\r\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\r\n        previousGeneratedColumn = mapping.generatedColumn;\r\n\r\n        if (segment.length > 1) {\r\n          // Original source.\r\n          mapping.source = previousSource + segment[1];\r\n          previousSource += segment[1];\r\n\r\n          // Original line.\r\n          mapping.originalLine = previousOriginalLine + segment[2];\r\n          previousOriginalLine = mapping.originalLine;\r\n          // Lines are stored 0-based\r\n          mapping.originalLine += 1;\r\n\r\n          // Original column.\r\n          mapping.originalColumn = previousOriginalColumn + segment[3];\r\n          previousOriginalColumn = mapping.originalColumn;\r\n\r\n          if (segment.length > 4) {\r\n            // Original name.\r\n            mapping.name = previousName + segment[4];\r\n            previousName += segment[4];\r\n          }\r\n        }\r\n\r\n        generatedMappings.push(mapping);\r\n        if (typeof mapping.originalLine === 'number') {\r\n          originalMappings.push(mapping);\r\n        }\r\n      }\r\n    }\r\n\r\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\r\n    this.__generatedMappings = generatedMappings;\r\n\r\n    quickSort(originalMappings, util.compareByOriginalPositions);\r\n    this.__originalMappings = originalMappings;\r\n  };\r\n\r\n/**\r\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\r\n * we are searching for in the given \"haystack\" of mappings.\r\n */\r\nBasicSourceMapConsumer.prototype._findMapping =\r\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\r\n                                         aColumnName, aComparator, aBias) {\r\n    // To return the position we are searching for, we must first find the\r\n    // mapping for the given position and then return the opposite position it\r\n    // points to. Because the mappings are sorted, we can use binary search to\r\n    // find the best mapping.\r\n\r\n    if (aNeedle[aLineName] <= 0) {\r\n      throw new TypeError('Line must be greater than or equal to 1, got '\r\n                          + aNeedle[aLineName]);\r\n    }\r\n    if (aNeedle[aColumnName] < 0) {\r\n      throw new TypeError('Column must be greater than or equal to 0, got '\r\n                          + aNeedle[aColumnName]);\r\n    }\r\n\r\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\r\n  };\r\n\r\n/**\r\n * Compute the last column for each generated mapping. The last column is\r\n * inclusive.\r\n */\r\nBasicSourceMapConsumer.prototype.computeColumnSpans =\r\n  function SourceMapConsumer_computeColumnSpans() {\r\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\r\n      var mapping = this._generatedMappings[index];\r\n\r\n      // Mappings do not contain a field for the last generated columnt. We\r\n      // can come up with an optimistic estimate, however, by assuming that\r\n      // mappings are contiguous (i.e. given two consecutive mappings, the\r\n      // first mapping ends where the second one starts).\r\n      if (index + 1 < this._generatedMappings.length) {\r\n        var nextMapping = this._generatedMappings[index + 1];\r\n\r\n        if (mapping.generatedLine === nextMapping.generatedLine) {\r\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // The last mapping for each line spans the entire line.\r\n      mapping.lastGeneratedColumn = Infinity;\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\r\nBasicSourceMapConsumer.prototype.originalPositionFor =\r\n  function SourceMapConsumer_originalPositionFor(aArgs) {\r\n    var needle = {\r\n      generatedLine: util.getArg(aArgs, 'line'),\r\n      generatedColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    var index = this._findMapping(\r\n      needle,\r\n      this._generatedMappings,\r\n      \"generatedLine\",\r\n      \"generatedColumn\",\r\n      util.compareByGeneratedPositionsDeflated,\r\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\r\n    );\r\n\r\n    if (index >= 0) {\r\n      var mapping = this._generatedMappings[index];\r\n\r\n      if (mapping.generatedLine === needle.generatedLine) {\r\n        var source = util.getArg(mapping, 'source', null);\r\n        if (source !== null) {\r\n          source = this._sources.at(source);\r\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\r\n        }\r\n        var name = util.getArg(mapping, 'name', null);\r\n        if (name !== null) {\r\n          name = this._names.at(name);\r\n        }\r\n        return {\r\n          source: source,\r\n          line: util.getArg(mapping, 'originalLine', null),\r\n          column: util.getArg(mapping, 'originalColumn', null),\r\n          name: name\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      source: null,\r\n      line: null,\r\n      column: null,\r\n      name: null\r\n    };\r\n  };\r\n\r\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\r\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\r\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\r\n    if (!this.sourcesContent) {\r\n      return false;\r\n    }\r\n    return this.sourcesContent.length >= this._sources.size() &&\r\n      !this.sourcesContent.some(function (sc) { return sc == null; });\r\n  };\r\n\r\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\r\nBasicSourceMapConsumer.prototype.sourceContentFor =\r\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\r\n    if (!this.sourcesContent) {\r\n      return null;\r\n    }\r\n\r\n    var index = this._findSourceIndex(aSource);\r\n    if (index >= 0) {\r\n      return this.sourcesContent[index];\r\n    }\r\n\r\n    var relativeSource = aSource;\r\n    if (this.sourceRoot != null) {\r\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\r\n    }\r\n\r\n    var url;\r\n    if (this.sourceRoot != null\r\n        && (url = util.urlParse(this.sourceRoot))) {\r\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\r\n      // many users. We can help them out when they expect file:// URIs to\r\n      // behave like it would if they were running a local HTTP server. See\r\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\r\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\r\n      if (url.scheme == \"file\"\r\n          && this._sources.has(fileUriAbsPath)) {\r\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\r\n      }\r\n\r\n      if ((!url.path || url.path == \"/\")\r\n          && this._sources.has(\"/\" + relativeSource)) {\r\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\r\n      }\r\n    }\r\n\r\n    // This function is used recursively from\r\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\r\n    // don't want to throw if we can't find the source - we just want to\r\n    // return null, so we provide a flag to exit gracefully.\r\n    if (nullOnMissing) {\r\n      return null;\r\n    }\r\n    else {\r\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\r\nBasicSourceMapConsumer.prototype.generatedPositionFor =\r\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\r\n    var source = util.getArg(aArgs, 'source');\r\n    source = this._findSourceIndex(source);\r\n    if (source < 0) {\r\n      return {\r\n        line: null,\r\n        column: null,\r\n        lastColumn: null\r\n      };\r\n    }\r\n\r\n    var needle = {\r\n      source: source,\r\n      originalLine: util.getArg(aArgs, 'line'),\r\n      originalColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    var index = this._findMapping(\r\n      needle,\r\n      this._originalMappings,\r\n      \"originalLine\",\r\n      \"originalColumn\",\r\n      util.compareByOriginalPositions,\r\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\r\n    );\r\n\r\n    if (index >= 0) {\r\n      var mapping = this._originalMappings[index];\r\n\r\n      if (mapping.source === needle.source) {\r\n        return {\r\n          line: util.getArg(mapping, 'generatedLine', null),\r\n          column: util.getArg(mapping, 'generatedColumn', null),\r\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      line: null,\r\n      column: null,\r\n      lastColumn: null\r\n    };\r\n  };\r\n\r\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\r\n\r\n/**\r\n * An IndexedSourceMapConsumer instance represents a parsed source map which\r\n * we can query for information. It differs from BasicSourceMapConsumer in\r\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\r\n * input.\r\n *\r\n * The first parameter is a raw source map (either as a JSON string, or already\r\n * parsed to an object). According to the spec for indexed source maps, they\r\n * have the following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *   - sections: A list of section definitions.\r\n *\r\n * Each value under the \"sections\" field has two fields:\r\n *   - offset: The offset into the original specified at which this section\r\n *       begins to apply, defined as an object with a \"line\" and \"column\"\r\n *       field.\r\n *   - map: A source map definition. This source map could also be indexed,\r\n *       but doesn't have to be.\r\n *\r\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\r\n * specifying a URL to retrieve a source map from, but that's currently\r\n * unsupported.\r\n *\r\n * Here's an example source map, taken from the source map spec[0], but\r\n * modified to omit a section which uses the \"url\" field.\r\n *\r\n *  {\r\n *    version : 3,\r\n *    file: \"app.js\",\r\n *    sections: [{\r\n *      offset: {line:100, column:10},\r\n *      map: {\r\n *        version : 3,\r\n *        file: \"section.js\",\r\n *        sources: [\"foo.js\", \"bar.js\"],\r\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *        mappings: \"AAAA,E;;ABCDE;\"\r\n *      }\r\n *    }],\r\n *  }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\r\n */\r\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  var version = util.getArg(sourceMap, 'version');\r\n  var sections = util.getArg(sourceMap, 'sections');\r\n\r\n  if (version != this._version) {\r\n    throw new Error('Unsupported version: ' + version);\r\n  }\r\n\r\n  this._sources = new ArraySet();\r\n  this._names = new ArraySet();\r\n\r\n  var lastOffset = {\r\n    line: -1,\r\n    column: 0\r\n  };\r\n  this._sections = sections.map(function (s) {\r\n    if (s.url) {\r\n      // The url field will require support for asynchronicity.\r\n      // See https://github.com/mozilla/source-map/issues/16\r\n      throw new Error('Support for url field in sections not implemented.');\r\n    }\r\n    var offset = util.getArg(s, 'offset');\r\n    var offsetLine = util.getArg(offset, 'line');\r\n    var offsetColumn = util.getArg(offset, 'column');\r\n\r\n    if (offsetLine < lastOffset.line ||\r\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\r\n      throw new Error('Section offsets must be ordered and non-overlapping.');\r\n    }\r\n    lastOffset = offset;\r\n\r\n    return {\r\n      generatedOffset: {\r\n        // The offset fields are 0-based, but we use 1-based indices when\r\n        // encoding/decoding from VLQ.\r\n        generatedLine: offsetLine + 1,\r\n        generatedColumn: offsetColumn + 1\r\n      },\r\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\r\n    }\r\n  });\r\n}\r\n\r\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\r\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nIndexedSourceMapConsumer.prototype._version = 3;\r\n\r\n/**\r\n * The list of original sources.\r\n */\r\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\r\n  get: function () {\r\n    var sources = [];\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\r\n        sources.push(this._sections[i].consumer.sources[j]);\r\n      }\r\n    }\r\n    return sources;\r\n  }\r\n});\r\n\r\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\r\nIndexedSourceMapConsumer.prototype.originalPositionFor =\r\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\r\n    var needle = {\r\n      generatedLine: util.getArg(aArgs, 'line'),\r\n      generatedColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    // Find the section containing the generated position we're trying to map\r\n    // to an original position.\r\n    var sectionIndex = binarySearch.search(needle, this._sections,\r\n      function(needle, section) {\r\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\r\n        if (cmp) {\r\n          return cmp;\r\n        }\r\n\r\n        return (needle.generatedColumn -\r\n                section.generatedOffset.generatedColumn);\r\n      });\r\n    var section = this._sections[sectionIndex];\r\n\r\n    if (!section) {\r\n      return {\r\n        source: null,\r\n        line: null,\r\n        column: null,\r\n        name: null\r\n      };\r\n    }\r\n\r\n    return section.consumer.originalPositionFor({\r\n      line: needle.generatedLine -\r\n        (section.generatedOffset.generatedLine - 1),\r\n      column: needle.generatedColumn -\r\n        (section.generatedOffset.generatedLine === needle.generatedLine\r\n         ? section.generatedOffset.generatedColumn - 1\r\n         : 0),\r\n      bias: aArgs.bias\r\n    });\r\n  };\r\n\r\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\r\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\r\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\r\n    return this._sections.every(function (s) {\r\n      return s.consumer.hasContentsOfAllSources();\r\n    });\r\n  };\r\n\r\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\r\nIndexedSourceMapConsumer.prototype.sourceContentFor =\r\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n\r\n      var content = section.consumer.sourceContentFor(aSource, true);\r\n      if (content) {\r\n        return content;\r\n      }\r\n    }\r\n    if (nullOnMissing) {\r\n      return null;\r\n    }\r\n    else {\r\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based. \r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\r\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\r\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n\r\n      // Only consider this section if the requested source is in the list of\r\n      // sources of the consumer.\r\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\r\n        continue;\r\n      }\r\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\r\n      if (generatedPosition) {\r\n        var ret = {\r\n          line: generatedPosition.line +\r\n            (section.generatedOffset.generatedLine - 1),\r\n          column: generatedPosition.column +\r\n            (section.generatedOffset.generatedLine === generatedPosition.line\r\n             ? section.generatedOffset.generatedColumn - 1\r\n             : 0)\r\n        };\r\n        return ret;\r\n      }\r\n    }\r\n\r\n    return {\r\n      line: null,\r\n      column: null\r\n    };\r\n  };\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nIndexedSourceMapConsumer.prototype._parseMappings =\r\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    this.__generatedMappings = [];\r\n    this.__originalMappings = [];\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n      var sectionMappings = section.consumer._generatedMappings;\r\n      for (var j = 0; j < sectionMappings.length; j++) {\r\n        var mapping = sectionMappings[j];\r\n\r\n        var source = section.consumer._sources.at(mapping.source);\r\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\r\n        this._sources.add(source);\r\n        source = this._sources.indexOf(source);\r\n\r\n        var name = null;\r\n        if (mapping.name) {\r\n          name = section.consumer._names.at(mapping.name);\r\n          this._names.add(name);\r\n          name = this._names.indexOf(name);\r\n        }\r\n\r\n        // The mappings coming from the consumer for the section have\r\n        // generated positions relative to the start of the section, so we\r\n        // need to offset them to be relative to the start of the concatenated\r\n        // generated file.\r\n        var adjustedMapping = {\r\n          source: source,\r\n          generatedLine: mapping.generatedLine +\r\n            (section.generatedOffset.generatedLine - 1),\r\n          generatedColumn: mapping.generatedColumn +\r\n            (section.generatedOffset.generatedLine === mapping.generatedLine\r\n            ? section.generatedOffset.generatedColumn - 1\r\n            : 0),\r\n          originalLine: mapping.originalLine,\r\n          originalColumn: mapping.originalColumn,\r\n          name: name\r\n        };\r\n\r\n        this.__generatedMappings.push(adjustedMapping);\r\n        if (typeof adjustedMapping.originalLine === 'number') {\r\n          this.__originalMappings.push(adjustedMapping);\r\n        }\r\n      }\r\n    }\r\n\r\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\r\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\r\n  };\r\n\r\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\r\n"]},"metadata":{},"sourceType":"script"}