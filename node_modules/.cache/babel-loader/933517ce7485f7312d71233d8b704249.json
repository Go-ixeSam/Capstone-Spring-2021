{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{CardNoFooter}from\"../components/Card/Card\";import{Col,Grid,Row}from\"react-bootstrap\";import{FormControll}from\"../components/Formik/FormikControl\";import{useDispatch,useSelector}from\"react-redux\";import{getPercentReport,getPercent,getPercentName,getPercentResult,getSystemConfigLoading}from\"../redux/Selector/Selectors\";import{Formik,Field,Form,useField,useFormikContext}from\"formik\";import{ShowPopUp,SuccessPopUp,LoadingPopUp,FailPopUp}from\"components/Modal/Modal\";import*as variable from\"../variables/Variables\";import{addPercentReportName,getPercentById,getAllPercentReport,updatePercentThreshold}from\"../redux/index\";import{MaterialButton}from\"../components/CustomButton/MaterialButton\";function SystemConfiguration(){var _initialValue;var dispatch=useDispatch();var loading=useSelector(function(state){return getSystemConfigLoading(state);});var percent=useSelector(function(state){return getPercent(state);});var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),successVisible=_React$useState2[0],setSuccessVisible=_React$useState2[1];// dùng để hiện succes popup\nvar _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),failVisible=_React$useState4[0],setFailVisible=_React$useState4[1];var percentNames={elementConfig:{options:useSelector(function(state){return getPercentName(state);})}};// tư động đóng popup lại sau 2s\nfunction autoCloseSuccessModal(){setSuccessVisible(true);setTimeout(function(){setSuccessVisible(false);},2000);}function autoCloseFailModal(){setFailVisible(true);setTimeout(function(){setFailVisible(false);},2000);}React.useEffect(function(){// * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\nvar loadPercentName=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dispatch(getAllPercentReport());case 2:res=_context.sent;result=dispatch(addPercentReportName(res.payload.data));console.log(\"result nè= \",result);//* lấy giá trị mặc đinh cho field hiện percent mỗi khi load trang\ndispatch(getPercentById(result.payload[0].id));case 6:case\"end\":return _context.stop();}}},_callee);}));return function loadPercentName(){return _ref.apply(this,arguments);};}();try{loadPercentName();}catch(error){console.log(\"Lỗi try system configuaration khi useEffect= \",error);}},[]);var initialValue=(_initialValue={},_defineProperty(_initialValue,variable.percentName,\"\"),_defineProperty(_initialValue,variable.percent,percent),_initialValue);var MyField=function MyField(props){var name=props.name;var _useFormikContext=useFormikContext(),percentName=_useFormikContext.values.percentName,setFieldValue=_useFormikContext.setFieldValue;var _useField=useField(props),_useField2=_slicedToArray(_useField,2),field=_useField2[0],meta=_useField2[1];React.useEffect(function(){var set=function set(){//! lấy số phần trăm dựa trên loại phần trăm, ta lấy kết quả bằng useSelector ở trên\ndispatch(getPercentById(percentName));setFieldValue(name,percent);// * name ở đây là tên của cái field\n};set();},[percentName,percent]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(FormControll,Object.assign({},props,field)));};var onSubmit=function onSubmit(value,onSubmitProps){console.log(\"value, \",value);var submitChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var res,updateData,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return dispatch(updatePercentThreshold({id:value[variable.percentName],name:\"\",precent:value[variable.percent]}));case 2:res=_context2.sent;_context2.next=5;return dispatch(getAllPercentReport());case 5:updateData=_context2.sent;result=dispatch(addPercentReportName(updateData.payload.data));console.log(\"submit= \",res);//! sau khi việc update thành công thì hiện cái popup success\nif(result.payload){if(result.payload.length>0){autoCloseSuccessModal();}}onSubmitProps.setSubmitting(false);case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function submitChange(){return _ref2.apply(this,arguments);};}();try{submitChange();}catch(error){autoCloseFailModal();console.log(\"Lỗi ở system configuaration khi submit= \",error);}};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(SuccessPopUp,{visible:successVisible,length:\"200px\"}),/*#__PURE__*/React.createElement(FailPopUp,{visible:failVisible,length:\"200px\"}),/*#__PURE__*/React.createElement(LoadingPopUp,{visible:loading,length:\"200px\"}),/*#__PURE__*/React.createElement(Grid,{fluid:true,style:{margin:0,padding:0}},/*#__PURE__*/React.createElement(CardNoFooter,{title:\"\",content:/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{style:{width:\"30%\"}},/*#__PURE__*/React.createElement(Formik,{initialValues:initialValue//   validationSchema={validationSchema}\n,onSubmit:onSubmit},function(formik){return/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormControll,Object.assign({elementType:\"select\",label:\"Loại ngưỡng báo cáo\",name:variable.percentName},percentNames)),/*#__PURE__*/React.createElement(MyField,{elementType:\"input\",type:\"number\",label:\"Phần trăm ngưỡng\",name:variable.percent,value:\"40\"}),/*#__PURE__*/React.createElement(MaterialButton,{variant:\"contained\",color:\"success\",type:\"submit\",size:\"large\",disabled:formik.isSubmitting||!formik.touched[variable.percent],style:{marginRight:5,marginTop:10}},\"C\\u1EADp nh\\u1EADt\"));})))})));}export default SystemConfiguration;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/views/SystemConfiguration.jsx"],"names":["React","useState","CardNoFooter","Col","Grid","Row","FormControll","useDispatch","useSelector","getPercentReport","getPercent","getPercentName","getPercentResult","getSystemConfigLoading","Formik","Field","Form","useField","useFormikContext","ShowPopUp","SuccessPopUp","LoadingPopUp","FailPopUp","variable","addPercentReportName","getPercentById","getAllPercentReport","updatePercentThreshold","MaterialButton","SystemConfiguration","dispatch","loading","state","percent","successVisible","setSuccessVisible","failVisible","setFailVisible","percentNames","elementConfig","options","autoCloseSuccessModal","setTimeout","autoCloseFailModal","useEffect","loadPercentName","res","result","payload","data","console","log","id","error","initialValue","percentName","MyField","props","name","values","setFieldValue","field","meta","set","onSubmit","value","onSubmitProps","submitChange","precent","updateData","length","setSubmitting","margin","padding","width","formik","isSubmitting","touched","marginRight","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport { FormControll } from \"../components/Formik/FormikControl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPercentReport,\r\n  getPercent,\r\n  getPercentName,\r\n  getPercentResult,\r\n  getSystemConfigLoading,\r\n} from \"../redux/Selector/Selectors\";\r\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\r\nimport {\r\n  ShowPopUp,\r\n  SuccessPopUp,\r\n  LoadingPopUp,\r\n  FailPopUp,\r\n} from \"components/Modal/Modal\";\r\n\r\nimport * as variable from \"../variables/Variables\";\r\nimport {\r\n  addPercentReportName,\r\n  getPercentById,\r\n  getAllPercentReport,\r\n  updatePercentThreshold,\r\n} from \"../redux/index\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\n\r\nfunction SystemConfiguration() {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => getSystemConfigLoading(state));\r\n  const percent = useSelector((state) => getPercent(state));\r\n  let [successVisible, setSuccessVisible] = React.useState(false); // dùng để hiện succes popup\r\n  let [failVisible, setFailVisible] = React.useState(false);\r\n  const percentNames = {\r\n    elementConfig: {\r\n      options: useSelector((state) => getPercentName(state)),\r\n    },\r\n  };\r\n\r\n  // tư động đóng popup lại sau 2s\r\n  function autoCloseSuccessModal() {\r\n    setSuccessVisible(true);\r\n    setTimeout(function () {\r\n      setSuccessVisible(false);\r\n    }, 2000);\r\n  }\r\n\r\n  function autoCloseFailModal() {\r\n    setFailVisible(true);\r\n    setTimeout(function () {\r\n      setFailVisible(false);\r\n    }, 2000);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\r\n    const loadPercentName = async () => {\r\n      const res = await dispatch(getAllPercentReport());\r\n      const result = dispatch(addPercentReportName(res.payload.data));\r\n      console.log(\"result nè= \",result)\r\n\r\n      //* lấy giá trị mặc đinh cho field hiện percent mỗi khi load trang\r\n      dispatch(getPercentById(result.payload[0].id));\r\n    };\r\n\r\n    try {\r\n      loadPercentName();\r\n    } catch (error) {\r\n      console.log(\"Lỗi try system configuaration khi useEffect= \", error);\r\n    }\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    [variable.percentName]: \"\",\r\n    [variable.percent]: percent,\r\n  };\r\n\r\n  const MyField = (props) => {\r\n    const { name } = props;\r\n    const {\r\n      values: { percentName }, // value mặc định\r\n      setFieldValue,\r\n    } = useFormikContext();\r\n    const [field, meta] = useField(props);\r\n\r\n    React.useEffect(() => {\r\n      const set = () => {\r\n        //! lấy số phần trăm dựa trên loại phần trăm, ta lấy kết quả bằng useSelector ở trên\r\n        dispatch(getPercentById(percentName));\r\n        setFieldValue(name, percent); // * name ở đây là tên của cái field\r\n      };\r\n      set();\r\n    }, [percentName, percent]);\r\n\r\n    return (\r\n      <>\r\n        <FormControll {...props} {...field} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onSubmit = (value, onSubmitProps) => {\r\n    console.log(\"value, \", value);\r\n    const submitChange = async () => {\r\n      const res = await dispatch(\r\n        updatePercentThreshold({\r\n          id: value[variable.percentName],\r\n          name: \"\",\r\n          precent: value[variable.percent],\r\n        })\r\n      );\r\n\r\n      //* Update lai du lieu sau khi submit xong\r\n      const updateData = await dispatch(getAllPercentReport());\r\n      const result = dispatch(addPercentReportName(updateData.payload.data));\r\n      console.log(\"submit= \", res);\r\n\r\n      //! sau khi việc update thành công thì hiện cái popup success\r\n      if (result.payload) {\r\n        if (result.payload.length > 0) {\r\n          autoCloseSuccessModal();\r\n        }\r\n      }\r\n      onSubmitProps.setSubmitting(false);\r\n    };\r\n    try {\r\n      submitChange();\r\n    } catch (error) {\r\n      autoCloseFailModal();\r\n      console.log(\"Lỗi ở system configuaration khi submit= \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SuccessPopUp visible={successVisible} length=\"200px\" />\r\n      <FailPopUp visible={failVisible} length=\"200px\" />\r\n      <LoadingPopUp visible={loading} length=\"200px\" />\r\n      <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n        <CardNoFooter\r\n          title=\"\"\r\n          content={\r\n            <React.Fragment>\r\n              <div style={{ width: \"30%\" }}>\r\n                <Formik\r\n                  initialValues={initialValue}\r\n                  //   validationSchema={validationSchema}\r\n                  onSubmit={onSubmit}\r\n                >\r\n                  {(formik) => {\r\n                    return (\r\n                      <Form>\r\n                        <FormControll\r\n                          elementType=\"select\"\r\n                          label={\"Loại ngưỡng báo cáo\"}\r\n                          name={variable.percentName}\r\n                          {...percentNames}\r\n                        />\r\n                        <MyField\r\n                          elementType=\"input\"\r\n                          type=\"number\"\r\n                          label={\"Phần trăm ngưỡng\"}\r\n                          name={variable.percent}\r\n                          value=\"40\"\r\n                        />\r\n\r\n                        <MaterialButton\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          type=\"submit\"\r\n                          size=\"large\"\r\n                          disabled={\r\n                            formik.isSubmitting ||\r\n                            !formik.touched[variable.percent]\r\n                          }\r\n                          style={{ marginRight: 5, marginTop: 10 }}\r\n                        >\r\n                          Cập nhật\r\n                        </MaterialButton>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </div>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SystemConfiguration;\r\n"]},"metadata":{},"sourceType":"module"}