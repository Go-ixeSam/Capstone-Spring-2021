{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\SystemConfiguration.jsx\";\nimport React, { useState } from \"react\";\nimport { CardNoFooter } from \"../components/Card/Card\";\nimport { Col, Grid, Row } from \"react-bootstrap\";\nimport { FormControll } from \"../components/Formik/FormikControl\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPercentReport, getPercent, getPercentName, getPercentResult } from \"../redux/Selector/Selectors\";\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\nimport * as variable from \"../variables/Variables\";\nimport { addPercentReportName, getPercentById } from \"../redux/index\";\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\n\nfunction SystemConfiguration() {\n  const dispatch = useDispatch();\n  const [percentDefault, setPercentDefault] = useState(\"\");\n  const systemConfigForm = useSelector(state => getPercentReport(state));\n  const defaultData = useSelector(state => getPercentResult(state));\n  const percentNames = {\n    elementConfig: {\n      options: useSelector(state => getPercentName(state))\n    }\n  };\n  React.useEffect(() => {\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\n    //! tạm dùng local để test trước\n    const stepByStep = () => {\n      dispatch(addPercentReportName()); //! phan set default nay se dc chay trong async khi chuyen qua goi API\n\n      setPercentDefault(defaultData[0].precent);\n    };\n\n    stepByStep();\n  }, []);\n  const initialValue = {\n    [variable.percentName]: \"\",\n    [variable.percent]: percentDefault\n  };\n\n  const MyField = props => {\n    const percent = useSelector(state => getPercent(state));\n    const {\n      values: {\n        percentName\n      },\n      setFieldValue\n    } = useFormikContext();\n    const [field, meta] = useField(props);\n    React.useEffect(() => {\n      const set = () => {\n        dispatch(getPercentById(percentName));\n        setFieldValue(props.name, percent);\n      };\n\n      set();\n    }, [percentName, percent]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControll, Object.assign({}, props, field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    title: \"\",\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: initialValue //   validationSchema={validationSchema}\n      // onSubmit={onSubmit}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, formik => {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormControll, Object.assign({\n        elementType: \"select\",\n        label: \"Loại ngưỡng báo cáo\",\n        name: variable.percentName\n      }, percentNames, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(MyField, {\n        elementType: \"input\",\n        type: \"text\",\n        label: \"Phần trăm ngưỡng\",\n        name: variable.percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(MaterialButton, {\n        variant: \"contained\",\n        color: \"success\",\n        size: \"large\",\n        style: {\n          marginRight: 5,\n          marginTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }\n      }, \"Duy\\u1EC7t rau\"));\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default SystemConfiguration;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/SystemConfiguration.jsx"],"names":["React","useState","CardNoFooter","Col","Grid","Row","FormControll","useDispatch","useSelector","getPercentReport","getPercent","getPercentName","getPercentResult","Formik","Field","Form","useField","useFormikContext","variable","addPercentReportName","getPercentById","MaterialButton","SystemConfiguration","dispatch","percentDefault","setPercentDefault","systemConfigForm","state","defaultData","percentNames","elementConfig","options","useEffect","stepByStep","precent","initialValue","percentName","percent","MyField","props","values","setFieldValue","field","meta","set","name","margin","padding","width","formik","marginRight","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport { FormControll } from \"../components/Formik/FormikControl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPercentReport,\r\n  getPercent,\r\n  getPercentName,\r\n  getPercentResult,\r\n} from \"../redux/Selector/Selectors\";\r\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\r\n\r\nimport * as variable from \"../variables/Variables\";\r\nimport { addPercentReportName, getPercentById } from \"../redux/index\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\n\r\nfunction SystemConfiguration() {\r\n  const dispatch = useDispatch();\r\n  const [percentDefault, setPercentDefault] = useState(\"\");\r\n  const systemConfigForm = useSelector((state) => getPercentReport(state));\r\n  const defaultData = useSelector((state) => getPercentResult(state));\r\n  const percentNames = {\r\n    elementConfig: {\r\n      options: useSelector((state) => getPercentName(state)),\r\n    },\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\r\n\r\n    //! tạm dùng local để test trước\r\n    const stepByStep = () => {\r\n      dispatch(addPercentReportName());\r\n\r\n      //! phan set default nay se dc chay trong async khi chuyen qua goi API\r\n      setPercentDefault(defaultData[0].precent);\r\n    };\r\n    stepByStep()\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    [variable.percentName]: \"\",\r\n    [variable.percent]: percentDefault,\r\n  };\r\n\r\n  const MyField = (props) => {\r\n    const percent = useSelector((state) => getPercent(state));\r\n    const {\r\n      values: { percentName },\r\n      setFieldValue,\r\n    } = useFormikContext();\r\n    const [field, meta] = useField(props);\r\n\r\n    React.useEffect(() => {\r\n      const set = () => {\r\n        dispatch(getPercentById(percentName));\r\n        setFieldValue(props.name, percent);\r\n      };\r\n      set();\r\n    }, [percentName, percent]);\r\n\r\n    return (\r\n      <>\r\n        <FormControll {...props} {...field} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n      <CardNoFooter\r\n        title=\"\"\r\n        content={\r\n          <React.Fragment>\r\n            <div style={{ width: \"30%\" }}>\r\n              <Formik\r\n                initialValues={initialValue}\r\n                //   validationSchema={validationSchema}\r\n                // onSubmit={onSubmit}\r\n              >\r\n                {(formik) => {\r\n                  return (\r\n                    <Form>\r\n                      <FormControll\r\n                        elementType=\"select\"\r\n                        label={\"Loại ngưỡng báo cáo\"}\r\n                        name={variable.percentName}\r\n                        {...percentNames}\r\n                      />\r\n                      <MyField\r\n                        elementType=\"input\"\r\n                        type=\"text\"\r\n                        label={\"Phần trăm ngưỡng\"}\r\n                        name={variable.percent}\r\n                      />\r\n\r\n                      <MaterialButton\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        size=\"large\"\r\n                        style={{ marginRight: 5, marginTop: 10 }}\r\n                      >\r\n                        Duyệt rau\r\n                      </MaterialButton>\r\n                    </Form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </div>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default SystemConfiguration;\r\n"]},"metadata":{},"sourceType":"module"}