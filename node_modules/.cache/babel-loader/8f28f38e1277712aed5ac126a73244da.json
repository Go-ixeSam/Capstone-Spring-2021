{"ast":null,"code":"import * as variable from \"variables/Variables\";\nimport { getDates, removeDuplicateDate } from \"util/Helper\";\nexport function getList(state) {\n  return state.contract.listTestSelectorstSelector;\n}\nexport function getTrip(state) {\n  return state.trip.tripData;\n}\nexport function getVegetableAPIloadingTime(state) {\n  return state.post.loading;\n}\nexport function getAdvanceData(state) {\n  return state.account.accountData;\n}\nexport function getAdvanceSelectedData(state) {\n  return state.trip.advanceTableDataSelected;\n}\nexport function getAdvanceDataByNameSearch(advanceTableData, searchValue) {\n  return advanceTableData.filter(record => record.Dessert.includes(searchValue));\n}\nexport function getUserRole(state) {\n  return state.user.roles.text;\n}\nexport function getModalVisible(state) {\n  return state.post.userPostVisible;\n}\nexport function getToken(state) {\n  return state.login.token;\n}\n/**\r\n * * Hàm sẽ trả về 1 mảng chứa những ngày tạo bài đã loại bỏ trùng nhau từ account id\r\n */\n\nexport function getDateListByAccountId(state) {\n  let object = {\n    accountID: \"\",\n    posts: []\n  };\n  state.post.reportedPosts.map(obj => {\n    if (obj.accountID == state.post.selectedAccountId) {\n      object = { ...obj,\n        accountID: obj.accountID,\n        posts: obj.posts\n      };\n    }\n  });\n  return removeDuplicateDate(getDates(object.posts));\n}\n/**\r\n * * Hàm sẽ trả về cái object mà có account id giống với selected ID\r\n */\n\nexport function getReportedListByAccountId(state) {\n  let object = {\n    accountID: \"\",\n    posts: []\n  };\n  state.post.reportedPosts.map(obj => {\n    if (obj.accountID == state.post.selectedAccountId) {\n      object = obj;\n      console.log(\"obj \", object);\n    }\n  });\n  return object;\n}\nexport function getMaterialHeader(state) {\n  return state.account.accountTableHeader;\n}\nexport function getReportedPost(state) {\n  return state.post.reportedPosts;\n}\nexport function getSignInForm(state) {\n  return state.login.signInForm;\n}\nexport function getDashboardUpdate(state) {\n  return state.dashboard.updateDashboard;\n}\nexport function getFirebase(state) {\n  return state.firebase;\n}\nexport function getPostTableHeader(state) {\n  return state.post.tableHeader;\n}\nexport function getPostTableBodyData(state) {\n  return state.post.advanceTableData;\n}\nexport function getLoadingStatus(state) {\n  return state.account.loading;\n}\nexport function getSuccessStatus(state) {\n  return state.account.success;\n}\nexport function getFailStatus(state) {\n  return state.account.fail;\n}\n/**\r\n * ! Tìm kiến trip dựa trên ID\r\n * @param {*} state\r\n * @param {*} id\r\n */\n\nexport function getTripDetailById(state) {\n  const id = state.trip.tripSelectedID;\n  return state.trip.tripData.tableBody.record.find(obj => obj.contractCode == id);\n}\nexport function removeAdvanceRecord(state, selectedRecord) {\n  let newArray = [];\n  selectedRecord.map(selected => {\n    newArray = state.trip.advanceTableData.filter(record => record.name != selected);\n  });\n  return newArray;\n}","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Selector/Selectors.js"],"names":["variable","getDates","removeDuplicateDate","getList","state","contract","listTestSelectorstSelector","getTrip","trip","tripData","getVegetableAPIloadingTime","post","loading","getAdvanceData","account","accountData","getAdvanceSelectedData","advanceTableDataSelected","getAdvanceDataByNameSearch","advanceTableData","searchValue","filter","record","Dessert","includes","getUserRole","user","roles","text","getModalVisible","userPostVisible","getToken","login","token","getDateListByAccountId","object","accountID","posts","reportedPosts","map","obj","selectedAccountId","getReportedListByAccountId","console","log","getMaterialHeader","accountTableHeader","getReportedPost","getSignInForm","signInForm","getDashboardUpdate","dashboard","updateDashboard","getFirebase","firebase","getPostTableHeader","tableHeader","getPostTableBodyData","getLoadingStatus","getSuccessStatus","success","getFailStatus","fail","getTripDetailById","id","tripSelectedID","tableBody","find","contractCode","removeAdvanceRecord","selectedRecord","newArray","selected","name"],"mappings":"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","sourcesContent":["import * as variable from \"variables/Variables\";\r\nimport { getDates, removeDuplicateDate } from \"util/Helper\";\r\n\r\nexport function getList(state) {\r\n  return state.contract.listTestSelectorstSelector;\r\n}\r\n\r\nexport function getTrip(state) {\r\n  return state.trip.tripData;\r\n}\r\nexport function getVegetableAPIloadingTime(state){\r\n  return state.post.loading\r\n}\r\n\r\nexport function getAdvanceData(state) {\r\n  return state.account.accountData;\r\n}\r\n\r\nexport function getAdvanceSelectedData(state) {\r\n  return state.trip.advanceTableDataSelected;\r\n}\r\n\r\nexport function getAdvanceDataByNameSearch(advanceTableData, searchValue) {\r\n  return advanceTableData.filter((record) =>\r\n    record.Dessert.includes(searchValue)\r\n  );\r\n}\r\n\r\nexport function getUserRole(state) {\r\n  return state.user.roles.text;\r\n}\r\nexport function getModalVisible(state) {\r\n  return state.post.userPostVisible;\r\n}\r\nexport function getToken(state) {\r\n  return state.login.token;\r\n}\r\n/**\r\n * * Hàm sẽ trả về 1 mảng chứa những ngày tạo bài đã loại bỏ trùng nhau từ account id\r\n */\r\nexport function getDateListByAccountId(state) {\r\n  let object = { accountID: \"\", posts: [] };\r\n  state.post.reportedPosts.map((obj) => {\r\n    if (obj.accountID == state.post.selectedAccountId) {\r\n      object = { ...obj, accountID: obj.accountID, posts: obj.posts };\r\n    }\r\n  });\r\n  return removeDuplicateDate(getDates(object.posts));\r\n}\r\n/**\r\n * * Hàm sẽ trả về cái object mà có account id giống với selected ID\r\n */\r\nexport function getReportedListByAccountId(state) {\r\n  let object = { accountID: \"\", posts: [] };\r\n  state.post.reportedPosts.map((obj) => {\r\n    if (obj.accountID == state.post.selectedAccountId) {\r\n      object = obj;\r\n      console.log(\"obj \", object);\r\n    }\r\n  });\r\n  return object;\r\n}\r\nexport function getMaterialHeader(state) {\r\n  return state.account.accountTableHeader;\r\n}\r\nexport function getReportedPost(state) {\r\n  return state.post.reportedPosts;\r\n}\r\n\r\nexport function getSignInForm(state) {\r\n  return state.login.signInForm;\r\n}\r\n\r\nexport function getDashboardUpdate(state){\r\n  return state.dashboard.updateDashboard\r\n}\r\n\r\nexport function getFirebase(state) {\r\n  return state.firebase;\r\n}\r\n\r\nexport function getPostTableHeader(state) {\r\n  return state.post.tableHeader;\r\n}\r\n\r\nexport function getPostTableBodyData(state) {\r\n  return state.post.advanceTableData;\r\n}\r\nexport function getLoadingStatus(state) {\r\n  return state.account.loading;\r\n}\r\nexport function getSuccessStatus(state) {\r\n  return state.account.success;\r\n}\r\nexport function getFailStatus(state) {\r\n  return state.account.fail;\r\n}\r\n/**\r\n * ! Tìm kiến trip dựa trên ID\r\n * @param {*} state\r\n * @param {*} id\r\n */\r\nexport function getTripDetailById(state) {\r\n  const id = state.trip.tripSelectedID;\r\n  return state.trip.tripData.tableBody.record.find(\r\n    (obj) => obj.contractCode == id\r\n  );\r\n}\r\nexport function removeAdvanceRecord(state, selectedRecord) {\r\n  let newArray = [];\r\n  selectedRecord.map((selected) => {\r\n    newArray = state.trip.advanceTableData.filter(\r\n      (record) => record.name != selected\r\n    );\r\n  });\r\n  return newArray;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}