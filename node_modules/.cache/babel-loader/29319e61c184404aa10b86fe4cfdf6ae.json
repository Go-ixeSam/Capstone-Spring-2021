{"ast":null,"code":"// import ContractType from \"./contractType\";\nimport * as variable from \"../../variables/Variables\";\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\nimport { boolean } from \"yup\";\nimport { FALSE, TRUE } from \"node-sass\";\n\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\n\nconst post = createSlice({\n  name: \"firebase\",\n  initialState: {\n    firebaseData: [{\n      fistname: \"nguyen\",\n      lastname: \"3213\",\n      userId: \"JfApZ4s\"\n    }]\n  },\n  reducers: {\n    addObject: (state, action) => {\n      let found = {};\n      let flag = FALSE;\n      action.payload.forEach(element => {\n        found = state.firebaseData.find(obj => obj.userId == element.userId);\n\n        if (found) {\n          flag = TRUE;\n        }\n      }); // console.log(\"Hình dáng \", actio);\n\n      console.log(\"có hay ko\", flag);\n    }\n  } //   extraReducers: {\n  //     [getALL.pending]: (state) => {},\n  //     [getALL.rejected]: (state, action) => {\n  //       state.error = action.error;\n  //     },\n  //     [getALL.fulfilled]: (state, action) => {\n  //       state.current = action.payload;\n  //     },\n  //   },\n\n});\nconst {\n  reducer: firebaseReducer,\n  actions\n} = post; //createSlice sẽ trả về cho ta 2 biến là reducer và action\n\nexport const {\n  addObject\n} = actions;\nexport default firebaseReducer;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/redux/Firebase/FirebaseSlice.jsx"],"names":["variable","JSONPLACEHOLDERApi","boolean","FALSE","TRUE","createSlice","createAsyncThunk","require","post","name","initialState","firebaseData","fistname","lastname","userId","reducers","addObject","state","action","found","flag","payload","forEach","element","find","obj","console","log","reducer","firebaseReducer","actions"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAZ,MAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,KAAxB;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,WAA5B;;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAoCC,OAAO,CAAC,kBAAD,CAAjD;;AAEA,MAAMC,IAAI,GAAGH,WAAW,CAAC;AACvBI,EAAAA,IAAI,EAAE,UADiB;AAEvBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,YAAY,EAAE,CACZ;AACEC,MAAAA,QAAQ,EAAE,QADZ;AAEEC,MAAAA,QAAQ,EAAE,MAFZ;AAGEC,MAAAA,MAAM,EAAE;AAHV,KADY;AADF,GAFS;AAWvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,IAAI,GAAGjB,KAAX;AACAe,MAAAA,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAwBC,OAAD,IAAa;AAClCJ,QAAAA,KAAK,GAAGF,KAAK,CAACN,YAAN,CAAmBa,IAAnB,CAAyBC,GAAD,IAASA,GAAG,CAACX,MAAJ,IAAcS,OAAO,CAACT,MAAvD,CAAR;;AACA,YAAIK,KAAJ,EAAW;AACTC,UAAAA,IAAI,GAAGhB,IAAP;AACD;AACF,OALD,EAH4B,CAS5B;;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,IAAzB;AACD;AAZO,GAXa,CAyBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjCuB,CAAD,CAAxB;AAoCA,MAAM;AAAEQ,EAAAA,OAAO,EAAEC,eAAX;AAA4BC,EAAAA;AAA5B,IAAwCtB,IAA9C,C,CAAoD;;AACpD,OAAO,MAAM;AAAEQ,EAAAA;AAAF,IAAgBc,OAAtB;AACP,eAAeD,eAAf","sourcesContent":["// import ContractType from \"./contractType\";\r\nimport * as variable from \"../../variables/Variables\";\r\nimport JSONPLACEHOLDERApi from \"api/JSONPLACEHOLDERApi\";\r\nimport { boolean } from \"yup\";\r\nimport { FALSE, TRUE } from \"node-sass\";\r\n\r\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\r\n\r\nconst post = createSlice({\r\n  name: \"firebase\",\r\n  initialState: {\r\n    firebaseData: [\r\n      {\r\n        fistname: \"nguyen\",\r\n        lastname: \"3213\",\r\n        userId: \"JfApZ4s\",\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    addObject: (state, action) => {\r\n      let found = {};\r\n      let flag = FALSE;\r\n      action.payload.forEach((element) => {\r\n        found = state.firebaseData.find((obj) => obj.userId == element.userId);\r\n        if (found) {\r\n          flag = TRUE;\r\n        }\r\n      });\r\n      // console.log(\"Hình dáng \", actio);\r\n      console.log(\"có hay ko\", flag);\r\n    },\r\n  },\r\n  //   extraReducers: {\r\n  //     [getALL.pending]: (state) => {},\r\n  //     [getALL.rejected]: (state, action) => {\r\n  //       state.error = action.error;\r\n  //     },\r\n  //     [getALL.fulfilled]: (state, action) => {\r\n  //       state.current = action.payload;\r\n  //     },\r\n  //   },\r\n});\r\n\r\nconst { reducer: firebaseReducer, actions } = post; //createSlice sẽ trả về cho ta 2 biến là reducer và action\r\nexport const { addObject } = actions;\r\nexport default firebaseReducer;\r\n"]},"metadata":{},"sourceType":"module"}