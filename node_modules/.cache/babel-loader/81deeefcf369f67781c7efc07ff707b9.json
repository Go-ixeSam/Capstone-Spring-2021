{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\src\\\\views\\\\Wikipedia.jsx\";\nimport React from \"react\";\nimport { isTemplateMiddleOrTemplateTail } from \"typescript\";\nimport useForceUpdate from \"use-force-update\";\nimport \"./Wiki.css\";\nimport { wikiVegetableSearch } from \"redux/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction Wikipedia() {\n  const [wikiSearchReturnValues, setWikiSearchReturnValues] = React.useState([]);\n  const [wikiSearchTerms, setWikiSearchTerms] = React.useState(\"\");\n  const forceUpdate = useForceUpdate();\n  const dispatch = useDispatch();\n\n  const useWikiSearchEngine = e => {\n    e.preventDefault();\n    setWikiSearchReturnValues([]);\n\n    const search = async () => {\n      const result = await dispatch(wikiVegetableSearch(wikiSearchTerms));\n      console.log(\"leak wiki= \", result);\n      const tmp = []; //   for (var key in ) {\n      //     tmp.push({\n      //       queryResultPageFullURL: \"no link\",\n      //       queryResultPageID: response.query.search[key].pageid,\n      //       queryResultPageTitle: response.query.search[key].title,\n      //       queryResultPageSnippet: response.query.search[key].snippet,\n      //     });\n      //   }\n      //   setWikiSearchReturnValues(tmp)\n      // }\n      // fetch(url)\n      //   .then(function (response) {\n      //     return response.json();\n      //   })\n      //   .then(function (response) {\n      //     // console.log(response);\n      //   })\n      //   .then(function (response) {\n      //     for (var key2 in wikiSearchReturnValues) {\n      //       console.log(\"array\",wikiSearchReturnValues);\n      //       console.log(\"key 2, \",key2)\n      //       // let page = pointerToThis.state.wikiSearchReturnValues[key2];\n      //       setWikiSearchReturnValues(wikiSearchReturnValues[key2])\n      //       let page = wikiSearchReturnValues;\n      //       let pageID = page.queryResultPageID;\n      //       let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\n      //       fetch(urlForRetrievingPageURLByPageID)\n      //         .then(function (response) {\n      //           return response.json();\n      //         })\n      //         .then(function (response) {\n      //           page.queryResultPageFullURL =\n      //             response.query.pages[pageID].fullurl;\n      //           //   pointerToThis.forceUpdate();\n      //           forceUpdate();\n      //         });\n      //     }\n      //   });\n    };\n\n    search();\n  };\n\n  const changeWikiSearchTerms = e => {\n    setWikiSearchTerms(e.target.value);\n  };\n\n  let wikiSearchResults = []; // console.log(this.state.wikiSearchReturnValues);\n\n  for (var key3 in wikiSearchReturnValues) {\n    wikiSearchResults.push( /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchResultDiv\",\n      key: key3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: wikiSearchReturnValues[key3].queryResultPageFullURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, wikiSearchReturnValues[key3].queryResultPageTitle)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"description\",\n      dangerouslySetInnerHTML: {\n        __html: wikiSearchReturnValues[key3].queryResultPageSnippet\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    })));\n  }\n\n  console.log(wikiSearchResults);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Wikipedia Search Engine\"), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: wikiSearchTerms || \"\",\n    onChange: changeWikiSearchTerms,\n    placeholder: \"Search Wikipedia Articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: useWikiSearchEngine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Search\")), wikiSearchResults);\n}\n\nexport default Wikipedia;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/views/Wikipedia.jsx"],"names":["React","isTemplateMiddleOrTemplateTail","useForceUpdate","wikiVegetableSearch","useDispatch","useSelector","Wikipedia","wikiSearchReturnValues","setWikiSearchReturnValues","useState","wikiSearchTerms","setWikiSearchTerms","forceUpdate","dispatch","useWikiSearchEngine","e","preventDefault","search","result","console","log","tmp","changeWikiSearchTerms","target","value","wikiSearchResults","key3","push","queryResultPageFullURL","queryResultPageTitle","__html","queryResultPageSnippet"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { isTemplateMiddleOrTemplateTail } from \"typescript\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport \"./Wiki.css\";\r\nimport { wikiVegetableSearch } from \"redux/index\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction Wikipedia() {\r\n  const [wikiSearchReturnValues, setWikiSearchReturnValues] = React.useState(\r\n    []\r\n  );\r\n  const [wikiSearchTerms, setWikiSearchTerms] = React.useState(\"\");\r\n  const forceUpdate = useForceUpdate();\r\n  const dispatch=useDispatch()\r\n\r\n\r\n  const useWikiSearchEngine = (e) => {\r\n    e.preventDefault();\r\n    setWikiSearchReturnValues([]);\r\n    const search = async () => {\r\n      const result = await dispatch(\r\n        wikiVegetableSearch(wikiSearchTerms)\r\n      );\r\n      console.log(\"leak wiki= \",result)\r\n      const tmp = [];\r\n      //   for (var key in ) {\r\n      //     tmp.push({\r\n      //       queryResultPageFullURL: \"no link\",\r\n      //       queryResultPageID: response.query.search[key].pageid,\r\n      //       queryResultPageTitle: response.query.search[key].title,\r\n      //       queryResultPageSnippet: response.query.search[key].snippet,\r\n      //     });\r\n      //   }\r\n      //   setWikiSearchReturnValues(tmp)\r\n      // }\r\n      // fetch(url)\r\n      //   .then(function (response) {\r\n      //     return response.json();\r\n      //   })\r\n      //   .then(function (response) {\r\n      //     // console.log(response);\r\n\r\n      //   })\r\n      //   .then(function (response) {\r\n      //     for (var key2 in wikiSearchReturnValues) {\r\n      //       console.log(\"array\",wikiSearchReturnValues);\r\n      //       console.log(\"key 2, \",key2)\r\n      //       // let page = pointerToThis.state.wikiSearchReturnValues[key2];\r\n      //       setWikiSearchReturnValues(wikiSearchReturnValues[key2])\r\n      //       let page = wikiSearchReturnValues;\r\n      //       let pageID = page.queryResultPageID;\r\n      //       let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\r\n\r\n      //       fetch(urlForRetrievingPageURLByPageID)\r\n      //         .then(function (response) {\r\n      //           return response.json();\r\n      //         })\r\n      //         .then(function (response) {\r\n      //           page.queryResultPageFullURL =\r\n      //             response.query.pages[pageID].fullurl;\r\n\r\n      //           //   pointerToThis.forceUpdate();\r\n      //           forceUpdate();\r\n      //         });\r\n      //     }\r\n      //   });\r\n    };\r\n    search()\r\n  };\r\n  const changeWikiSearchTerms = (e) => {\r\n    setWikiSearchTerms(e.target.value);\r\n  };\r\n\r\n  let wikiSearchResults = [];\r\n  // console.log(this.state.wikiSearchReturnValues);\r\n\r\n  for (var key3 in wikiSearchReturnValues) {\r\n    wikiSearchResults.push(\r\n      <div className=\"searchResultDiv\" key={key3}>\r\n        <h3>\r\n          <a href={wikiSearchReturnValues[key3].queryResultPageFullURL}>\r\n            {wikiSearchReturnValues[key3].queryResultPageTitle}\r\n          </a>\r\n        </h3>\r\n        <p\r\n          className=\"description\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: wikiSearchReturnValues[key3].queryResultPageSnippet,\r\n          }}\r\n        ></p>\r\n      </div>\r\n    );\r\n  }\r\n  console.log(wikiSearchResults);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Wikipedia Search Engine</h1>\r\n      <form action=\"\">\r\n        <input\r\n          type=\"text\"\r\n          value={wikiSearchTerms || \"\"}\r\n          onChange={changeWikiSearchTerms}\r\n          placeholder=\"Search Wikipedia Articles\"\r\n        />\r\n        <button type=\"submit\" onClick={useWikiSearchEngine}>\r\n          Search\r\n        </button>\r\n      </form>\r\n      {wikiSearchResults}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wikipedia;\r\n"]},"metadata":{},"sourceType":"module"}