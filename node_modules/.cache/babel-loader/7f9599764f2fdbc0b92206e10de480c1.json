{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\Signin.jsx\";\nimport { Box } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport { FormControll } from \"components/Formik/FormikControl\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getSignInForm, getToken } from \"redux/Selector/Selectors\";\nimport * as variable from \"variables/Variables\";\nimport * as Yup from \"yup\";\nimport \"../components/SignIn/style.scss\";\nlet width = 240;\nlet marginBottom = 5;\nlet headeFontSize = 20;\nlet choseSignInTypeHeight = 30;\nlet choseSignInTypeWidth = \"80%\";\nlet startIcon = 15;\nlet chooseSignInPadding = 20;\nlet attensionPadding = 10; // * Style cho may cai nut chon loai dang nhap\n\nlet choseStyle = {\n  height: choseSignInTypeHeight,\n  padding: 0,\n  marginBottom: 10,\n  width: choseSignInTypeWidth,\n  fontSize: 12\n};\nconst initialValue = {\n  [variable.username]: \"\",\n  [variable.password]: \"\"\n};\n\nconst onSubmit = (value, onSubmitProps) => {\n  console.log(\"submit value: \", value); //* giá trị của submiting thì formik sẽ tự động set khi ta dùng đén fieldError, bỏi vì nó làm thay đổi đến object error nên submiting sẽ ko\n  //* chuyển thành true\n\n  if (value.password !== \"sam\") {\n    onSubmitProps.setFieldError([variable.password], \"Mật khẩu không đúng\");\n  } else {\n    alert(\"Ok rồi nha\");\n  }\n\n  console.log(\"on Submit props: \", onSubmitProps, \"và\");\n};\n/**\r\n * * hàm test dùng để tạo ra 1 validation custom\r\n * * với tham số 1 là tên của cái validation này\r\n * * tham số 2 là message error\r\n * * tham số 3 là 1 function với value chính là cái data đc input\r\n */\n\n\nconst validationSchema = Yup.object({\n  [variable.password]: Yup.string().required([variable.require]),\n  // .when([variable.password], {\n  //   is: (val) => (val == \"sam\" > 0 ? true : false),\n  //   then: Yup.string().oneOf(\n  //     [Yup.ref(variable.password)],\n  //     \"Both password need to be the same\"\n  //   ),\n  // }),\n  // .test(\n  //   \"checkpassword\",\n  //   \"Wrong password\",\n  //   (value, context) =>\n  //     {}\n  //     // ? context chính là cái object Yup\n  //     value == \"sam\"\n  //   console.log(\"value nay\", value, \" context= \", context);\n  // ),\n  [variable.username]: Yup.string().required([variable.require]),\n  checkpassword: Yup.string().when([variable.password], {\n    is: val => val == \"sam\" > 0 ? true : false,\n    then: Yup.string().oneOf([Yup.ref(variable.password)], \"Your password is wrong\")\n  })\n});\n\nfunction handleSubmit() {}\n\nfunction Signin() {\n  const token = useSelector(state => getToken(state));\n  const signInForm = useSelector(state => getSignInForm(state));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValue,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, formik => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        paddingLeft: 15,\n        fontFamily: \"Roboto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"#9e9e9e\",\n        fontSize: headeFontSize\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, \"\\u0110\\u0103ng nh\\u1EADp\"), /*#__PURE__*/React.createElement(Box, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: headeFontSize\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }\n    }, \"Web Admin\")), signInForm.map(rows => {\n      const columns = rows.row.cols;\n      return columns.map(column => {\n        const controlType = column.elementType;\n        const {\n          name,\n          type,\n          placeholder,\n          labeltext\n        } = column.elementConfig;\n        return /*#__PURE__*/React.createElement(FormControll, Object.assign({\n          elementType: \"input\",\n          type: type,\n          name: name,\n          placeholder: placeholder\n        }, column, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }\n        }));\n      });\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attensin\",\n      style: {\n        visibility: \"hidden\",\n        textAlign: \"right\",\n        paddingRight: attensionPadding,\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: 12,\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    }, \"Qu\\xEAn m\\u1EADt kh\\u1EA9u?\")), console.log(\"formik valid value\", formik), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 19\n      }\n    }, \"\\u0110\\u0103ng nh\\u1EADp\"));\n  }))));\n}\n\nexport default Signin;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/Signin.jsx"],"names":["Box","grey","FormControll","Form","Formik","React","useSelector","getSignInForm","getToken","variable","Yup","width","marginBottom","headeFontSize","choseSignInTypeHeight","choseSignInTypeWidth","startIcon","chooseSignInPadding","attensionPadding","choseStyle","height","padding","fontSize","initialValue","username","password","onSubmit","value","onSubmitProps","console","log","setFieldError","alert","validationSchema","object","string","required","require","checkpassword","when","is","val","then","oneOf","ref","handleSubmit","Signin","token","state","signInForm","display","flexDirection","alignItems","formik","paddingLeft","fontFamily","color","fontWeight","map","rows","columns","row","cols","column","controlType","elementType","name","type","placeholder","labeltext","elementConfig","visibility","textAlign","paddingRight","marginTop"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { FormControll } from \"components/Formik/FormikControl\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSignInForm,getToken } from \"redux/Selector/Selectors\";\r\nimport * as variable from \"variables/Variables\";\r\nimport * as Yup from \"yup\";\r\nimport \"../components/SignIn/style.scss\";\r\n\r\nlet width = 240;\r\nlet marginBottom = 5;\r\nlet headeFontSize = 20;\r\nlet choseSignInTypeHeight = 30;\r\nlet choseSignInTypeWidth = \"80%\";\r\nlet startIcon = 15;\r\nlet chooseSignInPadding = 20;\r\nlet attensionPadding = 10;\r\n// * Style cho may cai nut chon loai dang nhap\r\nlet choseStyle = {\r\n  height: choseSignInTypeHeight,\r\n  padding: 0,\r\n  marginBottom: 10,\r\n  width: choseSignInTypeWidth,\r\n  fontSize: 12,\r\n};\r\n\r\nconst initialValue = {\r\n  [variable.username]: \"\",\r\n  [variable.password]: \"\",\r\n};\r\nconst onSubmit = (value, onSubmitProps) => {\r\n  console.log(\"submit value: \", value);\r\n  //* giá trị của submiting thì formik sẽ tự động set khi ta dùng đén fieldError, bỏi vì nó làm thay đổi đến object error nên submiting sẽ ko\r\n  //* chuyển thành true\r\n\r\n  if (value.password !== \"sam\") {\r\n    onSubmitProps.setFieldError([variable.password], \"Mật khẩu không đúng\");\r\n  } else {\r\n    alert(\"Ok rồi nha\")\r\n  }\r\n  console.log(\"on Submit props: \", onSubmitProps, \"và\");\r\n};\r\n\r\n/**\r\n * * hàm test dùng để tạo ra 1 validation custom\r\n * * với tham số 1 là tên của cái validation này\r\n * * tham số 2 là message error\r\n * * tham số 3 là 1 function với value chính là cái data đc input\r\n */\r\n\r\nconst validationSchema = Yup.object({\r\n  [variable.password]: Yup.string().required([variable.require]),\r\n  // .when([variable.password], {\r\n  //   is: (val) => (val == \"sam\" > 0 ? true : false),\r\n  //   then: Yup.string().oneOf(\r\n  //     [Yup.ref(variable.password)],\r\n  //     \"Both password need to be the same\"\r\n  //   ),\r\n  // }),\r\n  // .test(\r\n  //   \"checkpassword\",\r\n  //   \"Wrong password\",\r\n  //   (value, context) =>\r\n  //     {}\r\n  //     // ? context chính là cái object Yup\r\n  //     value == \"sam\"\r\n  //   console.log(\"value nay\", value, \" context= \", context);\r\n  // ),\r\n  [variable.username]: Yup.string().required([variable.require]),\r\n  checkpassword: Yup.string().when([variable.password], {\r\n    is: (val) => (val == \"sam\" > 0 ? true : false),\r\n    then: Yup.string().oneOf(\r\n      [Yup.ref(variable.password)],\r\n      \"Your password is wrong\"\r\n    ),\r\n  }),\r\n});\r\nfunction handleSubmit() {}\r\n\r\nfunction Signin() {\r\n  const token=useSelector(state=>getToken(state))\r\n  const signInForm = useSelector((state) => getSignInForm(state));\r\n  return (\r\n    <div\r\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\r\n    >\r\n      {/* <div className=\"login-page\">\r\n        <div className=\"form\">\r\n          <Button\r\n            style={{\r\n              height: choseSignInTypeHeight,\r\n              padding: chooseSignInPadding,\r\n              marginBottom: 10,\r\n              width: choseSignInTypeWidth,\r\n              fontSize: 12,\r\n            }}\r\n            type=\"submit\"\r\n            startIcon={\r\n              <FontAwesomeIcon\r\n                icon={faUser}\r\n                width={startIcon}\r\n                height={startIcon}\r\n              />\r\n            }\r\n          >\r\n            Tên và mật khẩu\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            style={{\r\n              height: choseSignInTypeHeight,\r\n              padding: chooseSignInPadding,\r\n              marginBottom: 10,\r\n              width: choseSignInTypeWidth,\r\n              fontSize: 12,\r\n              backgroundColor: \"#e82e1e\",\r\n            }}\r\n            startIcon={\r\n              <FontAwesomeIcon\r\n                icon={faGoogle}\r\n                width={startIcon}\r\n                height={startIcon}\r\n              />\r\n            }\r\n          >\r\n            Google\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            style={{\r\n              height: choseSignInTypeHeight,\r\n              padding: chooseSignInPadding,\r\n              marginBottom: 10,\r\n              width: choseSignInTypeWidth,\r\n              fontSize: 12,\r\n              backgroundColor: \"#c57a09\",\r\n            }}\r\n            startIcon={\r\n              <FontAwesomeIcon\r\n                icon={faPhoneAlt}\r\n                width={startIcon}\r\n                height={startIcon}\r\n              />\r\n            }\r\n          >\r\n            Số điện thoại\r\n          </Button>\r\n        </div>\r\n      </div> */}\r\n      {/* <div style={{ fontSize: 25 }}>- -</div> */}\r\n\r\n      {/* ! Phần div dùng để thay đổi mật khẩu */}\r\n\r\n      {/* <div className=\"login-page\">\r\n        <div className=\"form\">\r\n          <form className=\"login-form\" onSubmit={(e) => handleSubmit(e)}>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                paddingLeft: 15,\r\n                fontFamily: \"Roboto\",\r\n              }}\r\n            >\r\n              <p style={{ color: \"grey\", fontSize: headeFontSize }}>\r\n                Thay đổi mật khẩu\r\n              </p>\r\n            </div>\r\n            <TextField\r\n              style={{ width: width, marginBottom: marginBottom }}\r\n              type=\"text\"\r\n              variant=\"standard\"\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              // onChange={(event) => this.handleChange(event)}\r\n            />\r\n            <div\r\n              className=\"attensin\"\r\n              style={{ textAlign: \"left\", paddingLeft: attensionPadding }}\r\n            >\r\n              <p style={{ fontSize: 12, fontWeight: \"bold\" }}>\r\n                Lưu ý: Mail sẽ đến trong vòng 5 phút\r\n              </p>\r\n            </div>\r\n            <button type=\"submit\" className=\"button\">\r\n              <p>\r\n                <a href=\"#resend\">Gửi yêu cầu</a>\r\n              </p>\r\n            </button>{\" \"}\r\n            <div\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"#bb8322\",\r\n                paddingLeft: 10,\r\n                margin: \"5px 5px 15px 0\",\r\n              }}\r\n            >\r\n              <p id=\"resend\">Gửi lại yêu cầu trong {chooseSignInPadding}s</p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"login-page\">\r\n        <div className=\"form\">\r\n          <form className=\"login-form\" onSubmit={(e) => handleSubmit(e)}>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                paddingLeft: 15,\r\n                fontFamily: \"Roboto\",\r\n              }}\r\n            >\r\n              <p style={{ color: \"grey\", fontSize: headeFontSize }}>\r\n                Mật khẩu mới\r\n              </p>\r\n            </div>\r\n            <TextField\r\n              size=\"medium\"\r\n              style={{ marginBottom: marginBottom }}\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              // onChange={(event) => this.handleChange(event)}\r\n            />\r\n            <div\r\n              className=\"attensin\"\r\n              style={{ textAlign: \"left\", paddingLeft: attensionPadding }}\r\n            >\r\n              <p style={{ fontSize: 12, fontWeight: \"bold\" }}>\r\n                Lưu ý: Mail sẽ đến trong vòng 5 phút\r\n              </p>\r\n            </div>\r\n            <button type=\"submit\" className=\"button\">\r\n              <p>\r\n                <a href=\"#resend\">Gửi yêu cầu</a>\r\n              </p>\r\n            </button>{\" \"}\r\n            <div\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"#bb8322\",\r\n                paddingLeft: 10,\r\n                margin: \"5px 5px 15px 0\",\r\n              }}\r\n            >\r\n              <p id=\"resend\">Gửi lại yêu cầu trong {chooseSignInPadding}s</p>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"login-page\">\r\n        <div className=\"form\">\r\n          <Formik\r\n            initialValues={initialValue}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n          >\r\n            {(formik) => {\r\n              return (\r\n                <Form>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      paddingLeft: 15,\r\n                      fontFamily: \"Roboto\",\r\n                    }}\r\n                  >\r\n                    <p style={{ color: \"#9e9e9e\", fontSize: headeFontSize }}>\r\n                      Đăng nhập\r\n                    </p>\r\n                    <Box width={5} />\r\n                    <p style={{ fontWeight: \"bold\", fontSize: headeFontSize }}>\r\n                      Web Admin\r\n                    </p>\r\n                  </div>\r\n                  {signInForm.map((rows) => {\r\n                    const columns = rows.row.cols;\r\n                    return columns.map((column) => {\r\n                      const controlType = column.elementType;\r\n                      const {\r\n                        name,\r\n                        type,\r\n                        placeholder,\r\n                        labeltext,\r\n                      } = column.elementConfig;\r\n                      return (\r\n                        <FormControll\r\n                          elementType=\"input\"\r\n                          type={type}\r\n                          name={name}\r\n                          placeholder={placeholder}\r\n                          {...column}\r\n                        />\r\n                      );\r\n                    });\r\n                  })}\r\n                  <div\r\n                    className=\"attensin\"\r\n                    style={{\r\n                      visibility: \"hidden\",\r\n                      textAlign: \"right\",\r\n                      paddingRight: attensionPadding,\r\n                      marginTop: 5,\r\n                    }}\r\n                  >\r\n                    <p style={{ fontSize: 12, fontWeight: \"bold\" }}>\r\n                      Quên mật khẩu?\r\n                    </p>\r\n                  </div>\r\n                  {console.log(\"formik valid value\", formik)}\r\n                  <button type=\"submit\">Đăng nhập</button>\r\n                </Form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signin;\r\n"]},"metadata":{},"sourceType":"module"}