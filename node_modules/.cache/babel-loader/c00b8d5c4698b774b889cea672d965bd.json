{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\SystemConfiguration.jsx\";\nimport React, { useState } from \"react\";\nimport { CardNoFooter } from \"../components/Card/Card\";\nimport { Col, Grid, Row } from \"react-bootstrap\";\nimport { FormControll } from \"../components/Formik/FormikControl\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPercentReport, getPercent, getPercentName, getPercentResult, getSystemConfigLoading } from \"../redux/Selector/Selectors\";\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\nimport * as variable from \"../variables/Variables\";\nimport { addPercentReportName, getPercentById, getAllPercentReport, updatePercentThreshold } from \"../redux/index\";\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\n\nfunction SystemConfiguration() {\n  const dispatch = useDispatch();\n  const loading = useSelector(state => getSystemConfigLoading(state));\n  let [successVisible, setSuccessVisible] = React.useState(false); // dùng để hiện succes popup\n\n  const percentNames = {\n    elementConfig: {\n      options: useSelector(state => getPercentName(state))\n    }\n  }; // tư động đóng popup lại sau 2s\n\n  function autoCloseSuccessModal() {\n    setSuccessVisible(true);\n    setTimeout(function () {\n      setSuccessVisible(false);\n    }, 2000);\n  }\n\n  React.useEffect(() => {\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\n    const loadPercentName = async () => {\n      const res = await dispatch(getAllPercentReport());\n      dispatch(addPercentReportName(res.payload.data)).then(rs => {\n        console.log(\"Kết quả rs= \", rs); //! nếu có kết quả và status code là 200\n\n        if (rs) {\n          if (rs.type.requestStatus == \"200\") {\n            autoCloseSuccessModal();\n          }\n        }\n      });\n    };\n\n    try {\n      loadPercentName();\n    } catch (error) {\n      console.log(\"Lỗi try catch rùi= \", error);\n    }\n  }, []);\n  const initialValue = {\n    [variable.percentName]: \"\",\n    [variable.percent]: \"\"\n  };\n\n  const MyField = props => {\n    const percent = useSelector(state => getPercent(state));\n    const {\n      values: {\n        percentName\n      },\n      setFieldValue\n    } = useFormikContext();\n    const [field, meta] = useField(props);\n    React.useEffect(() => {\n      const set = () => {\n        dispatch(getPercentById(percentName));\n        setFieldValue(props.name, percent);\n      };\n\n      set();\n    }, [percentName, percent]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControll, Object.assign({}, props, field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const onSubmit = (value, onSubmitProps) => {\n    console.log(\"value, \", value);\n\n    const submitChange = async () => {\n      const res = await dispatch(updatePercentThreshold({\n        id: value[variable.percentName],\n        name: \"\",\n        precent: value[variable.percent]\n      })); //* Update lai du lieu sau khi submit xong\n\n      const updateData = await dispatch(getAllPercentReport());\n      dispatch(addPercentReportName(updateData.payload.data));\n      console.log(\"submit= \", res);\n      onSubmitProps.setSubmitting(false);\n    };\n\n    submitChange();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SuccessPopUp, {\n    visible: successVisible,\n    length: \"200px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LoadingPopUp, {\n    visible: loading,\n    length: \"200px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    title: \"\",\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: initialValue //   validationSchema={validationSchema}\n      ,\n      onSubmit: onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, formik => {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormControll, Object.assign({\n        elementType: \"select\",\n        label: \"Loại ngưỡng báo cáo\",\n        name: variable.percentName\n      }, percentNames, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(MyField, {\n        elementType: \"input\",\n        type: \"number\",\n        label: \"Phần trăm ngưỡng\",\n        name: variable.percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(MaterialButton, {\n        variant: \"contained\",\n        color: \"success\",\n        type: \"submit\",\n        size: \"large\",\n        disabled: formik.isSubmitting || !formik.touched[variable.percent],\n        style: {\n          marginRight: 5,\n          marginTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, \"C\\u1EADp nh\\u1EADt\"));\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default SystemConfiguration;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/SystemConfiguration.jsx"],"names":["React","useState","CardNoFooter","Col","Grid","Row","FormControll","useDispatch","useSelector","getPercentReport","getPercent","getPercentName","getPercentResult","getSystemConfigLoading","Formik","Field","Form","useField","useFormikContext","ShowPopUp","SuccessPopUp","LoadingPopUp","variable","addPercentReportName","getPercentById","getAllPercentReport","updatePercentThreshold","MaterialButton","SystemConfiguration","dispatch","loading","state","successVisible","setSuccessVisible","percentNames","elementConfig","options","autoCloseSuccessModal","setTimeout","useEffect","loadPercentName","res","payload","data","then","rs","console","log","type","requestStatus","error","initialValue","percentName","percent","MyField","props","values","setFieldValue","field","meta","set","name","onSubmit","value","onSubmitProps","submitChange","id","precent","updateData","setSubmitting","margin","padding","width","formik","isSubmitting","touched","marginRight","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,gBADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,gBAJF,EAKEC,sBALF,QAMO,6BANP;AAOA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,gBAAxC,QAAgE,QAAhE;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,YAAlC,QAAsD,wBAAtD;AAEA,OAAO,KAAKC,QAAZ,MAA0B,wBAA1B;AACA,SACEC,oBADF,EAEEC,cAFF,EAGEC,mBAHF,EAIEC,sBAJF,QAKO,gBALP;AAMA,SAASC,cAAT,QAA+B,2CAA/B;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,QAAMC,QAAQ,GAAGtB,WAAW,EAA5B;AACA,QAAMuB,OAAO,GAAGtB,WAAW,CAAEuB,KAAD,IAAWlB,sBAAsB,CAACkB,KAAD,CAAlC,CAA3B;AACA,MAAI,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCjC,KAAK,CAACC,QAAN,CAAe,KAAf,CAA1C,CAH6B,CAGoC;;AACjE,QAAMiC,YAAY,GAAG;AACnBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,OAAO,EAAE5B,WAAW,CAAEuB,KAAD,IAAWpB,cAAc,CAACoB,KAAD,CAA1B;AADP;AADI,GAArB,CAJ6B,CAU7B;;AACA,WAASM,qBAAT,GAAiC;AAC/BJ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAK,IAAAA,UAAU,CAAC,YAAY;AACrBL,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,KAFS,EAEP,IAFO,CAAV;AAGD;;AAEDjC,EAAAA,KAAK,CAACuC,SAAN,CAAgB,MAAM;AACpB;AACA,UAAMC,eAAe,GAAG,YAAY;AAClC,YAAMC,GAAG,GAAG,MAAMZ,QAAQ,CAACJ,mBAAmB,EAApB,CAA1B;AACAI,MAAAA,QAAQ,CAACN,oBAAoB,CAACkB,GAAG,CAACC,OAAJ,CAAYC,IAAb,CAArB,CAAR,CAAiDC,IAAjD,CAAuDC,EAAD,IAAQ;AAC5DC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,EAA5B,EAD4D,CAE5D;;AACA,YAAIA,EAAJ,EAAQ;AACN,cAAIA,EAAE,CAACG,IAAH,CAAQC,aAAR,IAAyB,KAA7B,EAAoC;AAClCZ,YAAAA,qBAAqB;AACtB;AACF;AACF,OARD;AASD,KAXD;;AAYA,QAAI;AACFG,MAAAA,eAAe;AAChB,KAFD,CAEE,OAAOU,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCG,KAAlC;AACD;AACF,GAnBD,EAmBG,EAnBH;AAqBA,QAAMC,YAAY,GAAG;AACnB,KAAC7B,QAAQ,CAAC8B,WAAV,GAAwB,EADL;AAEnB,KAAC9B,QAAQ,CAAC+B,OAAV,GAAoB;AAFD,GAArB;;AAKA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,UAAMF,OAAO,GAAG7C,WAAW,CAAEuB,KAAD,IAAWrB,UAAU,CAACqB,KAAD,CAAtB,CAA3B;AACA,UAAM;AACJyB,MAAAA,MAAM,EAAE;AAAEJ,QAAAA;AAAF,OADJ;AAEJK,MAAAA;AAFI,QAGFvC,gBAAgB,EAHpB;AAIA,UAAM,CAACwC,KAAD,EAAQC,IAAR,IAAgB1C,QAAQ,CAACsC,KAAD,CAA9B;AAEAvD,IAAAA,KAAK,CAACuC,SAAN,CAAgB,MAAM;AACpB,YAAMqB,GAAG,GAAG,MAAM;AAChB/B,QAAAA,QAAQ,CAACL,cAAc,CAAC4B,WAAD,CAAf,CAAR;AACAK,QAAAA,aAAa,CAACF,KAAK,CAACM,IAAP,EAAaR,OAAb,CAAb;AACD,OAHD;;AAIAO,MAAAA,GAAG;AACJ,KAND,EAMG,CAACR,WAAD,EAAcC,OAAd,CANH;AAQA,wBACE,uDACE,oBAAC,YAAD,oBAAkBE,KAAlB,EAA6BG,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GArBD;;AAuBA,QAAMI,QAAQ,GAAG,CAACC,KAAD,EAAQC,aAAR,KAA0B;AACzClB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBgB,KAAvB;;AACA,UAAME,YAAY,GAAG,YAAY;AAC/B,YAAMxB,GAAG,GAAG,MAAMZ,QAAQ,CACxBH,sBAAsB,CAAC;AACrBwC,QAAAA,EAAE,EAAEH,KAAK,CAACzC,QAAQ,CAAC8B,WAAV,CADY;AAErBS,QAAAA,IAAI,EAAE,EAFe;AAGrBM,QAAAA,OAAO,EAAEJ,KAAK,CAACzC,QAAQ,CAAC+B,OAAV;AAHO,OAAD,CADE,CAA1B,CAD+B,CAS/B;;AACA,YAAMe,UAAU,GAAG,MAAMvC,QAAQ,CAACJ,mBAAmB,EAApB,CAAjC;AACAI,MAAAA,QAAQ,CAACN,oBAAoB,CAAC6C,UAAU,CAAC1B,OAAX,CAAmBC,IAApB,CAArB,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,GAAxB;AACAuB,MAAAA,aAAa,CAACK,aAAd,CAA4B,KAA5B;AACD,KAdD;;AAeAJ,IAAAA,YAAY;AACb,GAlBD;;AAoBA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEjC,cAAvB;AAAuC,IAAA,MAAM,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEF,OAAvB;AAAgC,IAAA,MAAM,EAAC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,KAAK,EAAE;AAAEwC,MAAAA,MAAM,EAAE,CAAV;AAAaC,MAAAA,OAAO,EAAE;AAAtB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,EADR;AAEE,IAAA,OAAO,eACL,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAErB,YADjB,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAEW,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKIW,MAAD,IAAY;AACX,0BACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAC,QADd;AAEE,QAAA,KAAK,EAAE,qBAFT;AAGE,QAAA,IAAI,EAAEnD,QAAQ,CAAC8B;AAHjB,SAIMlB,YAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,eAOE,oBAAC,OAAD;AACE,QAAA,WAAW,EAAC,OADd;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAE,kBAHT;AAIE,QAAA,IAAI,EAAEZ,QAAQ,CAAC+B,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eAcE,oBAAC,cAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,KAAK,EAAC,SAFR;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,QAAQ,EACNoB,MAAM,CAACC,YAAP,IACA,CAACD,MAAM,CAACE,OAAP,CAAerD,QAAQ,CAAC+B,OAAxB,CAPL;AASE,QAAA,KAAK,EAAE;AAAEuB,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,SAAS,EAAE;AAA7B,SATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAdF,CADF;AA8BD,KApCH,CADF,CADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF;AAuDD;;AAED,eAAejD,mBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport { FormControll } from \"../components/Formik/FormikControl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPercentReport,\r\n  getPercent,\r\n  getPercentName,\r\n  getPercentResult,\r\n  getSystemConfigLoading,\r\n} from \"../redux/Selector/Selectors\";\r\nimport { Formik, Field, Form, useField, useFormikContext } from \"formik\";\r\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\r\n\r\nimport * as variable from \"../variables/Variables\";\r\nimport {\r\n  addPercentReportName,\r\n  getPercentById,\r\n  getAllPercentReport,\r\n  updatePercentThreshold,\r\n} from \"../redux/index\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\n\r\nfunction SystemConfiguration() {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => getSystemConfigLoading(state));\r\n  let [successVisible, setSuccessVisible] = React.useState(false); // dùng để hiện succes popup\r\n  const percentNames = {\r\n    elementConfig: {\r\n      options: useSelector((state) => getPercentName(state)),\r\n    },\r\n  };\r\n\r\n  // tư động đóng popup lại sau 2s\r\n  function autoCloseSuccessModal() {\r\n    setSuccessVisible(true);\r\n    setTimeout(function () {\r\n      setSuccessVisible(false);\r\n    }, 2000);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // * khúc này lúc sau sẽ lấy giá trị percent đầu tiên của mảng percent report gửi về và đưa vào initialValue percent bằng cách gọi API\r\n    const loadPercentName = async () => {\r\n      const res = await dispatch(getAllPercentReport());\r\n      dispatch(addPercentReportName(res.payload.data)).then((rs) => {\r\n        console.log(\"Kết quả rs= \", rs);\r\n        //! nếu có kết quả và status code là 200\r\n        if (rs) {\r\n          if (rs.type.requestStatus == \"200\") {\r\n            autoCloseSuccessModal();\r\n          }\r\n        }\r\n      });\r\n    };\r\n    try {\r\n      loadPercentName();\r\n    } catch (error) {\r\n      console.log(\"Lỗi try catch rùi= \",error)\r\n    }\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    [variable.percentName]: \"\",\r\n    [variable.percent]: \"\",\r\n  };\r\n\r\n  const MyField = (props) => {\r\n    const percent = useSelector((state) => getPercent(state));\r\n    const {\r\n      values: { percentName },\r\n      setFieldValue,\r\n    } = useFormikContext();\r\n    const [field, meta] = useField(props);\r\n\r\n    React.useEffect(() => {\r\n      const set = () => {\r\n        dispatch(getPercentById(percentName));\r\n        setFieldValue(props.name, percent);\r\n      };\r\n      set();\r\n    }, [percentName, percent]);\r\n\r\n    return (\r\n      <>\r\n        <FormControll {...props} {...field} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onSubmit = (value, onSubmitProps) => {\r\n    console.log(\"value, \", value);\r\n    const submitChange = async () => {\r\n      const res = await dispatch(\r\n        updatePercentThreshold({\r\n          id: value[variable.percentName],\r\n          name: \"\",\r\n          precent: value[variable.percent],\r\n        })\r\n      );\r\n\r\n      //* Update lai du lieu sau khi submit xong\r\n      const updateData = await dispatch(getAllPercentReport());\r\n      dispatch(addPercentReportName(updateData.payload.data));\r\n      console.log(\"submit= \", res);\r\n      onSubmitProps.setSubmitting(false);\r\n    };\r\n    submitChange();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SuccessPopUp visible={successVisible} length=\"200px\" />\r\n      <LoadingPopUp visible={loading} length=\"200px\" />\r\n      <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n        <CardNoFooter\r\n          title=\"\"\r\n          content={\r\n            <React.Fragment>\r\n              <div style={{ width: \"30%\" }}>\r\n                <Formik\r\n                  initialValues={initialValue}\r\n                  //   validationSchema={validationSchema}\r\n                  onSubmit={onSubmit}\r\n                >\r\n                  {(formik) => {\r\n                    return (\r\n                      <Form>\r\n                        <FormControll\r\n                          elementType=\"select\"\r\n                          label={\"Loại ngưỡng báo cáo\"}\r\n                          name={variable.percentName}\r\n                          {...percentNames}\r\n                        />\r\n                        <MyField\r\n                          elementType=\"input\"\r\n                          type=\"number\"\r\n                          label={\"Phần trăm ngưỡng\"}\r\n                          name={variable.percent}\r\n                        />\r\n\r\n                        <MaterialButton\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          type=\"submit\"\r\n                          size=\"large\"\r\n                          disabled={\r\n                            formik.isSubmitting ||\r\n                            !formik.touched[variable.percent]\r\n                          }\r\n                          style={{ marginRight: 5, marginTop: 10 }}\r\n                        >\r\n                          Cập nhật\r\n                        </MaterialButton>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </div>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SystemConfiguration;\r\n"]},"metadata":{},"sourceType":"module"}