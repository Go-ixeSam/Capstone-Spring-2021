{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { getter } from 'property-expr';\nvar prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\n\nvar Reference = /*#__PURE__*/function () {\n  function Reference(key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Reference);\n\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    var prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  _createClass(Reference, [{\n    key: \"getValue\",\n    value: function getValue(value, parent, context) {\n      var result = this.isContext ? context : this.isValue ? value : parent;\n      if (this.getter) result = this.getter(result || {});\n      if (this.map) result = this.map(result);\n      return result;\n    }\n    /**\r\n     *\r\n     * @param {*} value\r\n     * @param {Object} options\r\n     * @param {Object=} options.context\r\n     * @param {Object=} options.parent\r\n     */\n\n  }, {\n    key: \"cast\",\n    value: function cast(value, options) {\n      return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve() {\n      return this;\n    }\n  }, {\n    key: \"describe\",\n    value: function describe() {\n      return {\n        type: 'ref',\n        key: this.key\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Ref(\".concat(this.key, \")\");\n    }\n  }], [{\n    key: \"isRef\",\n    value: function isRef(value) {\n      return value && value.__isYupRef;\n    }\n  }]);\n\n  return Reference;\n}(); // @ts-ignore\n\n\nexport { Reference as default };\nReference.prototype.__isYupRef = true;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/node_modules/yup/es/Reference.js"],"names":["getter","prefixes","context","value","create","key","options","Reference","TypeError","trim","isContext","isValue","isSibling","prefix","path","slice","length","map","parent","result","getValue","type","__isYupRef","prototype"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE,GADM;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAjB;AAIA,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AACnC,SAAO,IAAIC,SAAJ,CAAcF,GAAd,EAAmBC,OAAnB,CAAP;AACD;;IACoBC,S;AACnB,qBAAYF,GAAZ,EAA+B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC7B,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B,MAAM,IAAIG,SAAJ,CAAc,gCAAgCH,GAA9C,CAAN;AAC7B,SAAKA,GAAL,GAAWA,GAAG,CAACI,IAAJ,EAAX;AACA,QAAIJ,GAAG,KAAK,EAAZ,EAAgB,MAAM,IAAIG,SAAJ,CAAc,gCAAd,CAAN;AAChB,SAAKE,SAAL,GAAiB,KAAKL,GAAL,CAAS,CAAT,MAAgBJ,QAAQ,CAACC,OAA1C;AACA,SAAKS,OAAL,GAAe,KAAKN,GAAL,CAAS,CAAT,MAAgBJ,QAAQ,CAACE,KAAxC;AACA,SAAKS,SAAL,GAAiB,CAAC,KAAKF,SAAN,IAAmB,CAAC,KAAKC,OAA1C;AACA,QAAIE,MAAM,GAAG,KAAKH,SAAL,GAAiBT,QAAQ,CAACC,OAA1B,GAAoC,KAAKS,OAAL,GAAeV,QAAQ,CAACE,KAAxB,GAAgC,EAAjF;AACA,SAAKW,IAAL,GAAY,KAAKT,GAAL,CAASU,KAAT,CAAeF,MAAM,CAACG,MAAtB,CAAZ;AACA,SAAKhB,MAAL,GAAc,KAAKc,IAAL,IAAad,MAAM,CAAC,KAAKc,IAAN,EAAY,IAAZ,CAAjC;AACA,SAAKG,GAAL,GAAWX,OAAO,CAACW,GAAnB;AACD;;;;6BAEQd,K,EAAOe,M,EAAQhB,O,EAAS;AAC/B,UAAIiB,MAAM,GAAG,KAAKT,SAAL,GAAiBR,OAAjB,GAA2B,KAAKS,OAAL,GAAeR,KAAf,GAAuBe,MAA/D;AACA,UAAI,KAAKlB,MAAT,EAAiBmB,MAAM,GAAG,KAAKnB,MAAL,CAAYmB,MAAM,IAAI,EAAtB,CAAT;AACjB,UAAI,KAAKF,GAAT,EAAcE,MAAM,GAAG,KAAKF,GAAL,CAASE,MAAT,CAAT;AACd,aAAOA,MAAP;AACD;AACD;;;;;;;;;;yBASKhB,K,EAAOG,O,EAAS;AACnB,aAAO,KAAKc,QAAL,CAAcjB,KAAd,EAAqBG,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACY,MAAxD,EAAgEZ,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACJ,OAAnG,CAAP;AACD;;;8BAES;AACR,aAAO,IAAP;AACD;;;+BAEU;AACT,aAAO;AACLmB,QAAAA,IAAI,EAAE,KADD;AAELhB,QAAAA,GAAG,EAAE,KAAKA;AAFL,OAAP;AAID;;;+BAEU;AACT,2BAAc,KAAKA,GAAnB;AACD;;;0BAEYF,K,EAAO;AAClB,aAAOA,KAAK,IAAIA,KAAK,CAACmB,UAAtB;AACD;;;;KAED;;;SApDmBf,S;AAsDrBA,SAAS,CAACgB,SAAV,CAAoBD,UAApB,GAAiC,IAAjC","sourcesContent":["import { getter } from 'property-expr';\r\nconst prefixes = {\r\n  context: '$',\r\n  value: '.'\r\n};\r\nexport function create(key, options) {\r\n  return new Reference(key, options);\r\n}\r\nexport default class Reference {\r\n  constructor(key, options = {}) {\r\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\r\n    this.key = key.trim();\r\n    if (key === '') throw new TypeError('ref must be a non-empty string');\r\n    this.isContext = this.key[0] === prefixes.context;\r\n    this.isValue = this.key[0] === prefixes.value;\r\n    this.isSibling = !this.isContext && !this.isValue;\r\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\r\n    this.path = this.key.slice(prefix.length);\r\n    this.getter = this.path && getter(this.path, true);\r\n    this.map = options.map;\r\n  }\r\n\r\n  getValue(value, parent, context) {\r\n    let result = this.isContext ? context : this.isValue ? value : parent;\r\n    if (this.getter) result = this.getter(result || {});\r\n    if (this.map) result = this.map(result);\r\n    return result;\r\n  }\r\n  /**\r\n   *\r\n   * @param {*} value\r\n   * @param {Object} options\r\n   * @param {Object=} options.context\r\n   * @param {Object=} options.parent\r\n   */\r\n\r\n\r\n  cast(value, options) {\r\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\r\n  }\r\n\r\n  resolve() {\r\n    return this;\r\n  }\r\n\r\n  describe() {\r\n    return {\r\n      type: 'ref',\r\n      key: this.key\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return `Ref(${this.key})`;\r\n  }\r\n\r\n  static isRef(value) {\r\n    return value && value.__isYupRef;\r\n  }\r\n\r\n} // @ts-ignore\r\n\r\nReference.prototype.__isYupRef = true;"]},"metadata":{},"sourceType":"module"}