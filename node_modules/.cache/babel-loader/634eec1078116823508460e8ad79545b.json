{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\GitHub\\\\Capstone-Spring-2021\\\\src\\\\views\\\\White.jsx\";\nimport React, { useState } from \"react\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllVegetableUnapproved, setNotificationCount } from \"redux/index\";\nimport { prepareVegetableData } from \"util/Helper\";\nimport { getPostTableHeader, getVegetableAPIloadingTime } from \"../redux/Selector/Selectors\";\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nfunction White() {\n  const columns = [{\n    field: \"id\",\n    headerName: \"ID\",\n    width: 70\n  }, {\n    field: \"firstName\",\n    headerName: \"First name\",\n    width: 130\n  }, {\n    field: \"lastName\",\n    headerName: \"Last name\",\n    width: 130\n  }, {\n    field: \"age\",\n    headerName: \"Age\",\n    type: \"number\",\n    width: 90\n  }, {\n    field: \"fullName\",\n    headerName: \"Full name\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    width: 160,\n    valueGetter: params => `${params.getValue(\"firstName\") || \"\"} ${params.getValue(\"lastName\") || \"\"}`\n  }];\n  const rows = [{\n    id: 1,\n    lastName: \"Snow\",\n    firstName: \"Jon\",\n    age: 35\n  }, {\n    id: 2,\n    lastName: \"Lannister\",\n    firstName: \"Cersei\",\n    age: 42\n  }, {\n    id: 3,\n    lastName: \"Lannister\",\n    firstName: \"Jaime\",\n    age: 45\n  }, {\n    id: 4,\n    lastName: \"Stark\",\n    firstName: \"Arya\",\n    age: 16\n  }, {\n    id: 5,\n    lastName: \"Targaryen\",\n    firstName: \"Daenerys\",\n    age: null\n  }, {\n    id: 6,\n    lastName: \"Melisandre\",\n    firstName: null,\n    age: 150\n  }, {\n    id: 7,\n    lastName: \"Clifford\",\n    firstName: \"Ferrara\",\n    age: 44\n  }, {\n    id: 8,\n    lastName: \"Frances\",\n    firstName: \"Rossini\",\n    age: 36\n  }, {\n    id: 9,\n    lastName: \"Roxie\",\n    firstName: \"Harvey\",\n    age: 65\n  }];\n  let materialHeader = useSelector(state => getPostTableHeader(state));\n  let loading = useSelector(state => getVegetableAPIloadingTime(state));\n  const [tableBodyData, setTableBodyData] = useState([]);\n  let dispatch = useDispatch(); //! function sẽ load những rau trồng đc gửi lên để admin duyệt\n\n  function updateVegetableData() {\n    let hava = [];\n    dispatch(getAllVegetableUnapproved()).then(response => {\n      if (Object.keys(response.payload.data).length !== 0) {\n        hava = [...prepareVegetableData(response.payload.data)];\n        console.log(\"table đây ngày29/01= \", hava);\n        dispatch(setNotificationCount(hava.length));\n        setTableBodyData(hava);\n      } else {\n        hava = [...prepareVegetableData(response.payload.data)];\n        console.log(\"table đây= \", hava);\n        dispatch(setNotificationCount(0));\n        setTableBodyData(hava);\n      }\n    });\n  } //   React.useEffect(() => {\n  // updateVegetableData();\n  //   }, []);\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    pageSize: 5,\n    checkboxSelection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default White;","map":{"version":3,"sources":["C:/Users/Sam/Documents/GitHub/Capstone-Spring-2021/src/views/White.jsx"],"names":["React","useState","useDispatch","useSelector","getAllVegetableUnapproved","setNotificationCount","prepareVegetableData","getPostTableHeader","getVegetableAPIloadingTime","DataGrid","White","columns","field","headerName","width","type","description","sortable","valueGetter","params","getValue","rows","id","lastName","firstName","age","materialHeader","state","loading","tableBodyData","setTableBodyData","dispatch","updateVegetableData","hava","then","response","Object","keys","payload","data","length","console","log","height"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAllVegetableUnapproved, setNotificationCount } from \"redux/index\";\r\nimport { prepareVegetableData } from \"util/Helper\";\r\nimport {\r\n  getPostTableHeader,\r\n  getVegetableAPIloadingTime,\r\n} from \"../redux/Selector/Selectors\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\n\r\nfunction White() {\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 70 },\r\n    { field: \"firstName\", headerName: \"First name\", width: 130 },\r\n    { field: \"lastName\", headerName: \"Last name\", width: 130 },\r\n    {\r\n      field: \"age\",\r\n      headerName: \"Age\",\r\n      type: \"number\",\r\n      width: 90,\r\n    },\r\n    {\r\n      field: \"fullName\",\r\n      headerName: \"Full name\",\r\n      description: \"This column has a value getter and is not sortable.\",\r\n      sortable: false,\r\n      width: 160,\r\n      valueGetter: (params) =>\r\n        `${params.getValue(\"firstName\") || \"\"} ${\r\n          params.getValue(\"lastName\") || \"\"\r\n        }`,\r\n    },\r\n  ];\r\n\r\n  const rows = [\r\n    { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\r\n    { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 },\r\n  ];\r\n  let materialHeader = useSelector((state) => getPostTableHeader(state));\r\n  let loading = useSelector((state) => getVegetableAPIloadingTime(state));\r\n  const [tableBodyData, setTableBodyData] = useState([]);\r\n  let dispatch = useDispatch();\r\n\r\n  //! function sẽ load những rau trồng đc gửi lên để admin duyệt\r\n  function updateVegetableData() {\r\n    let hava = [];\r\n    dispatch(getAllVegetableUnapproved()).then((response) => {\r\n      if (Object.keys(response.payload.data).length !== 0) {\r\n        hava = [...prepareVegetableData(response.payload.data)];\r\n        console.log(\"table đây ngày29/01= \", hava);\r\n        dispatch(setNotificationCount(hava.length));\r\n        setTableBodyData(hava);\r\n      } else {\r\n        hava = [...prepareVegetableData(response.payload.data)];\r\n        console.log(\"table đây= \", hava);\r\n        dispatch(setNotificationCount(0));\r\n        setTableBodyData(hava);\r\n      }\r\n    });\r\n  }\r\n\r\n  //   React.useEffect(() => {\r\n  // updateVegetableData();\r\n  //   }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          pageSize={5}\r\n          checkboxSelection\r\n        />\r\n      </div>\r\n      {/* <LoadingPopUp visible={loading} length=\"200px\" />\r\n      <div className=\"content\">\r\n        <MaterialButton\r\n          variant=\"contained\"\r\n          color=\"info\"\r\n          size=\"large\"\r\n          style={{ marginRight: 5 }}\r\n          onClick={() => {\r\n            updateVegetableData();\r\n          }}\r\n        >\r\n          Cập nhật\r\n        </MaterialButton>\r\n        <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n          <CardNoFooter\r\n            titlet=\"Account list\"\r\n            content={\r\n              <NormalTable\r\n                headCells={materialHeader}\r\n                bodyData={tableBodyData}\r\n                notShowing={[variable.islock]}\r\n                actionbuttonlist={[\"remove\"]}\r\n              />\r\n            }\r\n          />\r\n        </Grid>\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default White;\r\n"]},"metadata":{},"sourceType":"module"}