{"ast":null,"code":"var _jsxFileName = \"E:\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\Vegetable.jsx\";\nimport richado from \"assets/img/richasdo.jpg\";\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\nimport NormalTable from \"components/SuperTable/NormalTable\";\nimport React, { useState } from \"react\";\nimport { Col, Grid, Row } from \"react-bootstrap\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport { prepareVegetableData } from \"util/Helper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setVisible, isAccept, getAllVegetableUnapproved, setNotificationCount // useWantAllVegetableUnapproved,\n} from \"redux/index\";\nimport { CardNoFooter } from \"../components/Card/Card\"; // import { useAPICalling } from \"api/JSONPLACEHOLDERApi\";\n\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\nimport { getModalVisible, getPostTableBodyData, getPostTableHeader, getVegetableAPIloadingTime, getAllVegetable } from \"../redux/Selector/Selectors\";\nimport * as variable from \"../variables/Variables\";\nimport { createVegetableData } from \"util/ContructorCreation\";\nimport { dataSales } from \"variables/Variables\";\n\nfunction Post() {\n  let materialBody = useSelector(state => getPostTableBodyData(state));\n  let materialHeader = useSelector(state => getPostTableHeader(state));\n  let loading = useSelector(state => getVegetableAPIloadingTime(state));\n  let [successVisible, setSuccessVisible] = React.useState(false);\n  const [tableBodyData, setTableBodyData] = useState([]);\n  const currentVegetableList = useSelector(state => getAllVegetable(state));\n  let dispatch = useDispatch();\n  let visible = useSelector(state => getModalVisible(state));\n  const HeightLength = \"200px\";\n  const WidthLength = \"300px\";\n\n  function updateVegetableData() {\n    let hava = [];\n    dispatch(getAllVegetableUnapproved()).then(response => {\n      if (Object.keys(response.payload.data).length !== 0) {\n        hava = [...prepareVegetableData(response.payload.data)];\n        console.log(\"table đây ngày29/01= \", hava);\n        dispatch(setNotificationCount(hava.length));\n        setTableBodyData(hava);\n      } else {\n        hava = [...prepareVegetableData(response.payload.data)];\n        console.log(\"table đây= \", hava);\n        dispatch(setNotificationCount(0));\n        setTableBodyData(hava);\n      }\n    });\n  }\n\n  React.useEffect(() => {\n    updateVegetableData();\n  }, []);\n\n  const closeModal = () => {\n    return \"\";\n  };\n\n  const autoCloseSuccessModal = () => {\n    dispatch(setVisible(false));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ShowPopUp, {\n    visible: visible,\n    onCLose: closeModal,\n    length: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    title: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }\n    }),\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"post-background-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"post-text-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }\n    }, \"X\\xE1c nh\\u1EADn l\\u1EF1a ch\\u1ECDn\"), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      style: {\n        height: 50,\n        width: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MaterialButton, {\n      variant: \"contained\",\n      color: \"error\",\n      size: \"large\",\n      style: {\n        marginRight: 5\n      },\n      click: () => autoCloseSuccessModal(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }\n    }, \"\\u0110\\xF3ng\"), /*#__PURE__*/React.createElement(MaterialButton, {\n      variant: \"contained\",\n      color: \"success\",\n      size: \"large\",\n      style: {\n        marginRight: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 27\n      }\n    }, \"X\\xE1c nh\\u1EADn\"))))))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(LoadingPopUp, {\n    visible: loading,\n    length: \"200px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MaterialButton, {\n    variant: \"contained\",\n    color: \"info\",\n    size: \"large\",\n    style: {\n      marginRight: 5\n    },\n    onClick: () => {\n      updateVegetableData();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"C\\u1EADp nh\\u1EADt\"), /*#__PURE__*/React.createElement(Grid, {\n    fluid: true,\n    style: {\n      margin: 0,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardNoFooter, {\n    titlet: \"Account list\",\n    content: /*#__PURE__*/React.createElement(NormalTable, {\n      headCells: materialHeader,\n      bodyData: tableBodyData,\n      notShowing: [variable.islock],\n      actionbuttonlist: [\"remove\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Post;","map":{"version":3,"sources":["E:/light-bootstrap-dashboard-react-master/src/views/Vegetable.jsx"],"names":["richado","ShowPopUp","SuccessPopUp","LoadingPopUp","NormalTable","React","useState","Col","Grid","Row","PerfectScrollbar","prepareVegetableData","useDispatch","useSelector","setVisible","isAccept","getAllVegetableUnapproved","setNotificationCount","CardNoFooter","MaterialButton","getModalVisible","getPostTableBodyData","getPostTableHeader","getVegetableAPIloadingTime","getAllVegetable","variable","createVegetableData","dataSales","Post","materialBody","state","materialHeader","loading","successVisible","setSuccessVisible","tableBodyData","setTableBodyData","currentVegetableList","dispatch","visible","HeightLength","WidthLength","updateVegetableData","hava","then","response","Object","keys","payload","data","length","console","log","useEffect","closeModal","autoCloseSuccessModal","margin","padding","height","width","display","marginTop","marginRight","islock"],"mappings":"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","sourcesContent":["import richado from \"assets/img/richasdo.jpg\";\r\nimport { ShowPopUp, SuccessPopUp, LoadingPopUp } from \"components/Modal/Modal\";\r\nimport NormalTable from \"components/SuperTable/NormalTable\";\r\nimport React, { useState } from \"react\";\r\nimport { Col, Grid, Row } from \"react-bootstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\nimport { prepareVegetableData } from \"util/Helper\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setVisible,\r\n  isAccept,\r\n  getAllVegetableUnapproved,\r\n  setNotificationCount,\r\n  // useWantAllVegetableUnapproved,\r\n} from \"redux/index\";\r\nimport { CardNoFooter } from \"../components/Card/Card\";\r\n// import { useAPICalling } from \"api/JSONPLACEHOLDERApi\";\r\nimport { MaterialButton } from \"../components/CustomButton/MaterialButton\";\r\nimport {\r\n  getModalVisible,\r\n  getPostTableBodyData,\r\n  getPostTableHeader,\r\n  getVegetableAPIloadingTime,\r\n  getAllVegetable,\r\n} from \"../redux/Selector/Selectors\";\r\nimport * as variable from \"../variables/Variables\";\r\nimport { createVegetableData } from \"util/ContructorCreation\";\r\nimport { dataSales } from \"variables/Variables\";\r\nfunction Post() {\r\n  let materialBody = useSelector((state) => getPostTableBodyData(state));\r\n  let materialHeader = useSelector((state) => getPostTableHeader(state));\r\n  let loading = useSelector((state) => getVegetableAPIloadingTime(state));\r\n  let [successVisible, setSuccessVisible] = React.useState(false);\r\n  const [tableBodyData, setTableBodyData] = useState([]);\r\n  const currentVegetableList = useSelector((state) => getAllVegetable(state));\r\n  let dispatch = useDispatch();\r\n  let visible = useSelector((state) => getModalVisible(state));\r\n  const HeightLength = \"200px\";\r\n  const WidthLength = \"300px\";\r\n\r\n  function updateVegetableData() {\r\n    let hava = [];\r\n    dispatch(getAllVegetableUnapproved()).then((response) => {\r\n      if (Object.keys(response.payload.data).length !== 0) {\r\n        hava = [...prepareVegetableData(response.payload.data)];\r\n        console.log(\"table đây ngày29/01= \", hava);\r\n        dispatch(setNotificationCount(hava.length));\r\n        setTableBodyData(hava);\r\n      } else {\r\n        hava = [...prepareVegetableData(response.payload.data)];\r\n        console.log(\"table đây= \", hava);\r\n        dispatch(setNotificationCount(0));\r\n        setTableBodyData(hava);\r\n      }\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    updateVegetableData();\r\n  }, []);\r\n  const closeModal = () => {\r\n    return \"\";\r\n  };\r\n  const autoCloseSuccessModal = () => {\r\n    dispatch(setVisible(false))\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ShowPopUp visible={visible} onCLose={closeModal} length=\"50%\">\r\n        <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n          <CardNoFooter\r\n            title={<React.Fragment></React.Fragment>}\r\n            content={\r\n              <React.Fragment>\r\n                <Row>\r\n                  <Col xs={7}>\r\n                    <div className=\"post-background-content\">\r\n                      <p\r\n                        className=\"post-text-header\"\r\n                      >\r\n                        Xác nhận lựa chọn\r\n                      </p>\r\n                      <PerfectScrollbar style={{ height: 50, width: 300 }}>\r\n                        \r\n                      </PerfectScrollbar>\r\n                      <div>\r\n                        <div style={{ display: \"flex\", marginTop: 10 }}>\r\n                          <MaterialButton\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            size=\"large\"\r\n                            style={{ marginRight: 5 }}\r\n                            click={() => autoCloseSuccessModal()}\r\n                          >\r\n                            Đóng \r\n                          </MaterialButton>\r\n                          <MaterialButton\r\n                            variant=\"contained\"\r\n                            color=\"success\"\r\n                            size=\"large\"\r\n                            style={{ marginRight: 5 }}\r\n                          >\r\n                            Xác nhận \r\n                          </MaterialButton>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Grid>\r\n      </ShowPopUp>\r\n      {/* <SuccessPopUp visible={successVisible} length=\"200px\" /> */}\r\n      <LoadingPopUp visible={loading} length=\"200px\" />\r\n\r\n      <div className=\"content\">\r\n        <MaterialButton\r\n          variant=\"contained\"\r\n          color=\"info\"\r\n          size=\"large\"\r\n          style={{ marginRight: 5 }}\r\n          onClick={() => {\r\n            updateVegetableData();\r\n          }}\r\n        >\r\n          Cập nhật\r\n        </MaterialButton>\r\n        <Grid fluid style={{ margin: 0, padding: 0 }}>\r\n          <CardNoFooter\r\n            titlet=\"Account list\"\r\n            content={\r\n              <NormalTable\r\n                headCells={materialHeader}\r\n                bodyData={tableBodyData}\r\n                notShowing={[variable.islock]}\r\n                actionbuttonlist={[\"remove\"]}\r\n              />\r\n            }\r\n          />\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}